<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SPI驱动分析之SPI Protocol</title>
    <link href="/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8BSPI%20Protocol/"/>
    <url>/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8BSPI%20Protocol/</url>
    
    <content type="html"><![CDATA[<h2 id="SPI-Protocol"><a href="#SPI-Protocol" class="headerlink" title="SPI Protocol"></a>SPI Protocol</h2>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI驱动分析之kernel SPI 框架</title>
    <link href="/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8Bkernel%20SPI%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8Bkernel%20SPI%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="kernel-SPI-框架"><a href="#kernel-SPI-框架" class="headerlink" title="kernel SPI 框架"></a>kernel SPI 框架</h2>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI驱动分析之kernel SPI data flow</title>
    <link href="/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8Bkernel%20SPI%20data%20flow/"/>
    <url>/2020/07/11/SPI%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90%E4%B9%8Bkernel%20SPI%20data%20flow/</url>
    
    <content type="html"><![CDATA[<h2 id="kernel-SPI-data-flow"><a href="#kernel-SPI-data-flow" class="headerlink" title="kernel SPI data flow"></a>kernel SPI data flow</h2>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建Linux内核函数的man手册</title>
    <link href="/2019/08/05/%E5%88%9B%E5%BB%BALinux%E5%86%85%E6%A0%B8%E5%87%BD%E6%95%B0%E7%9A%84man%E6%89%8B%E5%86%8C/"/>
    <url>/2019/08/05/%E5%88%9B%E5%BB%BALinux%E5%86%85%E6%A0%B8%E5%87%BD%E6%95%B0%E7%9A%84man%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>自带的man手册只能查询C库的函数和linux系统调用，不能查询linux内核函数。如果做驱动开发，就很不方便查询linux的内核函数。<strong>我们可以通过linux内核生成Man手册</strong>。</p><ul><li>下载linux内核源码，并且编译通过</li><li>在顶层目录下执行,这一步时间有点长</li></ul><pre><code class="hljs bash">make mandocs</code></pre><ul><li>安装man手册，就是把生成的文件拷贝到系统目录下，因此需要sudo权限</li></ul><pre><code class="hljs bash">sudo make installmandocs</code></pre><ul><li>如果第一步出现错误，则执行下面的命令</li></ul><pre><code class="hljs bash">sudo apt-get install xmlto</code></pre><p>linux的内核函数在man 9中<br>执行<strong>man 9 register_chrdev</strong>效果如下：</p><p><img src="/img/%E5%88%9B%E5%BB%BALinux%E5%86%85%E6%A0%B8%E5%87%BD%E6%95%B0%E7%9A%84man%E6%89%8B%E5%86%8C/1.svg" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Linux环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述</title>
    <link href="/2019/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <url>/2019/08/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一个目标"><a href="#一个目标" class="headerlink" title="一个目标"></a>一个目标</h3><p><strong>管理变化，提高复用</strong></p><h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><p><strong>稳定点和变化点</strong><br><strong>抽象类和接口</strong></p><h3 id="两个手段"><a href="#两个手段" class="headerlink" title="两个手段"></a>两个手段</h3><ul><li><strong>分解</strong></li><li><strong>抽象</strong></li></ul><h3 id="八大原则"><a href="#八大原则" class="headerlink" title="八大原则"></a>八大原则</h3><ul><li>依赖倒置原则 DIP</li><li>开放封闭原则 OCP</li><li>单一职责原则 SRP</li><li>Liskov替换原则 LSP</li><li>接口隔离原则 ISP</li><li>对象组合优于类继承</li><li>封装变化点</li><li>面向接口编程</li></ul><h3 id="重构技巧"><a href="#重构技巧" class="headerlink" title="重构技巧"></a>重构技巧</h3><ul><li>静态  》》》 动态</li><li>早绑定 》》》 晚绑定</li><li>继承 》》》 组合</li><li>编译时依赖 》》》 运行时依赖</li><li>紧耦合 》》》  松耦合</li></ul><h3 id="什么时候不用模式"><a href="#什么时候不用模式" class="headerlink" title="什么时候不用模式"></a>什么时候不用模式</h3><ul><li>代码可读写很差</li><li>需求理解很浅</li><li>变化没有显现</li><li>不是系统的关键依赖点</li><li>项目没有复用价值</li><li>项目将要发布</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式</title>
    <link href="/2019/08/02/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/08/02/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>适配器模式，又叫<strong>Adapter</strong>模式，属于<strong>接口隔离</strong>模式的一种，常用于framework中新老接口的更新。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 — 《设计模式》 GoF</p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>在软件系统中，通常可以使用目标类的接口访问它所提供的服务，但是有时现有的类的实现可以满足客户的需要但是接口并不能满足客户的需求，这可能是现有类的方法名称与目标类的方法名不一致导致的，因此这时候就需要使用适配器模式，<strong>将现有类的接口转化为客户需要的类的接口</strong>，这个包装的类就叫<strong>适配器</strong>，它所包装的类叫被适配的类。</p><p>日常生活中也有这样的例子，如电源适配器，将220V的AC转换为12V的DC，等等</p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>Target：目标接口</li><li>Adapter：适配器类，包装原有接口，重写目标接口的方法，类中组合了一个适配者类，这种适配器模式叫<strong>对象适配器</strong>，相比于<strong>类适配器</strong>更加灵活</li><li>Adaptee：适配者类</li><li>Client：客户类</li></ul><p><img src="/img/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/1.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><strong>旧接口</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IAdaptee</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:IAdaptee();~IAdaptee();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step1</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>旧接口的具体实现</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OldClass</span> :</span> <span class="hljs-keyword">public</span> IAdaptee&#123;<span class="hljs-keyword">public</span>:OldClass();~OldClass();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step1</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OldClass::step1</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"step 1 running \n"</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OldClass::step2</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"step 2 running \n"</span>;&#125;</code></pre><p><strong>目标接口</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ITarget</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:ITarget();<span class="hljs-keyword">virtual</span> ~ITarget() = <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>适配器</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IAdapter</span> :</span> <span class="hljs-keyword">public</span> ITarget&#123;IAdaptee *adaptee;<span class="hljs-keyword">public</span>:IAdapter(IAdaptee *adaptee);~IAdapter();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">()</span></span>;&#125;;IAdapter::IAdapter(IAdaptee *adaptee)&#123;<span class="hljs-keyword">this</span>-&gt;adaptee = adaptee;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IAdapter::process</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;adaptee-&gt;step1();adaptee-&gt;step2();&#125;</code></pre><p><strong>main函数</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;IAdaptee *adaptee = <span class="hljs-keyword">new</span> OldClass;ITarget *target = <span class="hljs-keyword">new</span> IAdapter(adaptee);target-&gt;<span class="hljs-built_in">process</span>();&#125;</code></pre><ul><li>运行结果</li></ul><p><img src="/img/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><ul><li>在main函数中指定具体的实现，达到晚绑定的效果</li><li>适配器类继承目标接口，组合旧的接口，调用旧接口的方法重写新的接口函数，实现接口的转换</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>享元模式</title>
    <link href="/2019/08/01/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/08/01/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>享元模式，又叫<strong>Flyweight</strong>，属于<strong>对象性能</strong>模式中的一种，主要解决<strong>系统中大量的细粒度的对象</strong>而带来不必要的系统开销，主要是指内存方面的开销。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>运用共享技术有效地支持大量细粒度的对象。 —《设计模式》 GoF</p><h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>系统中有大量的对象时，而且这些对象有些之间是相同的，或者说可以把这些对象分为几类，这种情况就可以使用相同的一类对象合并成使用相同的一个对象，因此系统就由之前<strong>很多重复的几类对象变为几个互不相同的对象</strong>，大大节约了系统的内存开销。<br>如何辨别这些对象是相同的？可以传入一个键值作为唯一标识码，如果这个键值相同，则返回其对应的对象，无需重复创建。</p><p>需要注意的事项，由于在内存中是多个业务共享了一个对象，为了避免改变这个对象，因此这个对象应该是只读的。</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>假如现在需要画10个圆，现在有3中颜色，正常的设计应该是每一个圆对应一个对象，然后分别画出，但是由于每个圆的颜色只有3中，因此只要是颜色相同的圆，我们就可以使用同一个对象来创建，因此只需要3个对象即可。</p><p><strong>画圆类</strong></p><p>包括一个画圆的函数和string类型的颜色</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:Circle(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> color);~Circle();<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> color;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shape</span><span class="hljs-params">()</span></span>;&#125;;Circle::Circle(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> color)&#123;<span class="hljs-keyword">this</span>-&gt;color = color;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Circle::shape</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"shape circle : "</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;color &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;&#125;</code></pre><p><strong>画圆工厂类</strong></p><p>使用享元模式产生一个画圆的对象，使用一个map容器来存储所有互不相同的对象，这些对象通过颜色来区分，因此使用颜色作为键值</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">private</span>:<span class="hljs-comment">/* 创建一个对象池存储所有的对象，这是一个散列表，通过color找到对应的对象 */</span><span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span> &lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, Circle* &gt;  Circlepool;<span class="hljs-keyword">public</span>:ShapeFactory();~ShapeFactory();<span class="hljs-function">Circle* <span class="hljs-title">createCircle</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> color)</span></span>;&#125;;<span class="hljs-function">Circle* <span class="hljs-title">ShapeFactory::createCircle</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> color)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">map</span> &lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, Circle*&gt; ::iterator item = Circlepool.<span class="hljs-built_in">find</span>(color);<span class="hljs-comment">/* 查找是否已经创建过了 */</span><span class="hljs-keyword">if</span> (item != Circlepool.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-keyword">return</span> Circlepool[color];&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"create new circle \n"</span>;Circle *<span class="hljs-built_in">circle</span> = <span class="hljs-keyword">new</span> Circle(color);Circlepool[color] = <span class="hljs-built_in">circle</span>;<span class="hljs-keyword">return</span> <span class="hljs-built_in">circle</span>;&#125;&#125;</code></pre><p><strong>main函数</strong></p><p>先构造一个工厂，再调用createCircle产生对象，是否产生了新对象有内部的享元模式进行判断</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;ShapeFactory *shapefactory = <span class="hljs-keyword">new</span> ShapeFactory;Circle *circle1 = shapefactory-&gt;createCircle(<span class="hljs-string">"red"</span>);circle1-&gt;shape();Circle *circle2 = shapefactory-&gt;createCircle(<span class="hljs-string">"red"</span>);circle2-&gt;shape();Circle *circle3 = shapefactory-&gt;createCircle(<span class="hljs-string">"blue"</span>);circle3-&gt;shape();&#125;</code></pre><p>运行结果：</p><p><img src="/img/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/1.png" srcset="/img/loading.gif" alt=""></p><p>可以看到，创建第二个红色圆形的时候并没有创建新的对象，而是使用了第一个创建的对象，而创建第三份白色圆的时候又创建了新的对象，这就是使用享元模式创建对象的过程。</p>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抽象工厂</title>
    <link href="/2019/07/30/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <url>/2019/07/30/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    
    <content type="html"><![CDATA[<p>抽象工厂模式，又称<strong>Abstract Factory</strong>模式，相对于工厂模式，抽象工厂模式是<strong>将几个具有关联性的对象合并在一个工厂中创建</strong>。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>提供一个接口，让该接口负责创建一系列“相关或者相互依 赖的对象”，无需指定它们具体的类。   — 《设计模式》 GoF</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>在工厂模式中，一个工厂接口产生一个抽象的工厂对象，一组具体的工厂产生每一个具体的对象，重载工厂方法，但是在实际使用中，我们有时候需要产生多个抽象的对象，并且每一个抽象的对象都对应各种不同的具体对象，这时我们可以<strong>使用抽象工厂将这些抽象的对象放在一个工厂中产生，下面的工厂继承抽象工厂，重载工厂方法返回一组具体的对象。</strong></p><p>抽象工厂方法可以产生一个产品族中的所有对象，比工厂方法效率更高，更简单。</p><p>Abstract Factory模式主要在于<strong>应对“新系列”的需求变动,其缺点在于难以应对“新对象”的需求变动</strong>。</p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>AbstractFactory：抽象工厂，返回多个产品</li><li>ConcreteFactory：具体工厂，返回多个具体的产品</li><li>AbstractProduct ： 抽象产品，多个抽象产品组成产品族</li><li>Product： 具体产品</li></ul><p><img src="/img/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/1.svg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>本文举一个数据库操作的例子，数据库操作需要分为先获取指令，再连接两个步骤，而数据库又有不同的类型，如Sql和Oracle,可以把获取指令和连接看成两个抽象的产品，每个数据库对应这两个步骤有不同的操作，看着具体的产品，使用抽象工厂方法设计。</p><blockquote><p>这种连个维度的变化联想到了桥模式,但是这里不适合使用桥模式，原因在于获取指令和连接两个步骤对于不同的数据库来说不是随机组合的，而是绑定的，即如果获取指令使用的是Sql数据库，那么连接也必须是Sql数据库。</p></blockquote><p><strong>抽象产品</strong></p><p>抽象产品是指获取指令和连接两个类，都是接口</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBCommand</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:IDBCommand();~IDBCommand();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCommond</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBConnection</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:IDBConnection();~IDBConnection();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>具体的产品</strong></p><p>具体的产品分别继承自抽象产品，每个操作下面分别对应两个数据库，因此具体的产品有4种</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleCommand</span> :</span> <span class="hljs-keyword">public</span>  IDBCommand&#123;<span class="hljs-keyword">public</span>:OracleCommand();<span class="hljs-keyword">virtual</span> ~OracleCommand();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCommond</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OracleCommand::getCommond</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"get oracle commond... \n"</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleConnection</span> :</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<span class="hljs-keyword">public</span>:OracleConnection();<span class="hljs-keyword">virtual</span> ~OracleConnection();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OracleConnection::getConnection</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"get oracle Connection... \n"</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlCommand</span> :</span> <span class="hljs-keyword">public</span> IDBCommand&#123;<span class="hljs-keyword">public</span>:SqlCommand();~SqlCommand();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCommond</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SqlCommand::getCommond</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"get Sql commond... \n"</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlConnection</span> :</span> <span class="hljs-keyword">public</span> IDBConnection&#123;<span class="hljs-keyword">public</span>:SqlConnection();~SqlConnection();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SqlConnection::getConnection</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"get Sql Connection... \n"</span>);&#125;</code></pre><p><strong>抽象工厂</strong></p><p>抽象工厂负责产生两个产品，即获取指令和连接<br>具体产生什么产品，放在具体的工厂中</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDBFactory</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:IDBFactory();~IDBFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand *<span class="hljs-title">getIDBCommand</span><span class="hljs-params">()</span>    </span>= <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection *<span class="hljs-title">getIDBConnection</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>具体的工厂</strong></p><p>负责产生Sql对应的产品和Oracle对应的产品</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlDBFactory</span> :</span> <span class="hljs-keyword">public</span> IDBFactory&#123;<span class="hljs-keyword">public</span>:SqlDBFactory();~SqlDBFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand *<span class="hljs-title">getIDBCommand</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection *<span class="hljs-title">getIDBConnection</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function">IDBCommand * <span class="hljs-title">SqlDBFactory::getIDBCommand</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlCommand;&#125;<span class="hljs-function">IDBConnection * <span class="hljs-title">SqlDBFactory::getIDBConnection</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlConnection;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OracleDBFactory</span> :</span> <span class="hljs-keyword">public</span> IDBFactory&#123;<span class="hljs-keyword">public</span>:OracleDBFactory();~OracleDBFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBCommand *<span class="hljs-title">getIDBCommand</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> IDBConnection *<span class="hljs-title">getIDBConnection</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function">IDBCommand * <span class="hljs-title">OracleDBFactory::getIDBCommand</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OracleCommand;&#125;<span class="hljs-function">IDBConnection * <span class="hljs-title">OracleDBFactory::getIDBConnection</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OracleConnection;&#125;</code></pre><p><strong>MainForm类</strong></p><p>这个类模拟使用数据库的类,这个类首先传入具体的工厂产生两个具体的产品，然后分别调用里面的函数。</p><p>MainForm作为上层应用应该是<strong>稳定的</strong>。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:MainForm(IDBFactory *dbfactory);~MainForm();IDBFactory *dbfactory;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getdata</span><span class="hljs-params">()</span></span>;&#125;;MainForm::MainForm(IDBFactory *dbfactory)&#123;<span class="hljs-keyword">this</span>-&gt;dbfactory = dbfactory;&#125;MainForm::~MainForm()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::getdata</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;IDBCommand *dbcommand =dbfactory-&gt;getIDBCommand();IDBConnection *dbconnection = dbfactory-&gt;getIDBConnection();dbcommand-&gt;getCommond();dbconnection-&gt;getConnection();&#125;</code></pre><p><strong>main函数测试</strong></p><p>先使用多态的方法创建一个工厂，再把这个工厂传入MainForm中。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;IDBFactory *dbfactory   = <span class="hljs-keyword">new</span> SqlDBFactory;MainForm   *mainform    = <span class="hljs-keyword">new</span> MainForm(dbfactory);mainform-&gt;getdata();&#125;</code></pre><ul><li>测试结果</li></ul><p><img src="/img/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/2.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2019/07/28/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/28/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>策略模式，又称<strong>strategy</strong>模式，是用于封装多样性的算法，避免支持不使用的算法带来的性能负担。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序(稳定)而变化（扩展，子类化）。             — 《设计模式》     GoF</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>在软件系统中，常常会遇到许多算法可以实现同一功能的情况，可以将这些算法写到一个类中，通过if…else来判断和选择，如果需要增加一种算法，则需要修改代码，增加分支，违背了设计模式的<strong>封闭原则</strong>。</p><p>更好的方法是将这些算法分别写在单独的类中，在客户端中使用这些算法子类的抽象接口，在运行时使用多态来决定具体使用哪一个算法。</p><h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul><li>Strategy : 算法的抽象接口</li><li>ConcreteStrategy A/B/C : 具体的不同的算法</li><li>Context : 算法使用的上下文</li></ul><p><img src="/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/1.jpg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>例子程序使用策略模式实现了一个加减乘除的计算功能。</p><p><strong>算法抽象接口</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculate</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">virtual</span> ~Calculate();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a , <span class="hljs-keyword">float</span> b)</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>不同的算法子类</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Add</span> :</span> <span class="hljs-keyword">public</span> Calculate&#123;<span class="hljs-keyword">public</span>:Add();~Add();<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Add::calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> (a + b);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sub</span> :</span> <span class="hljs-keyword">public</span> Calculate&#123;<span class="hljs-keyword">public</span>:Sub();~Sub();<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Sub::calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> (a - b);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mul</span> :</span> <span class="hljs-keyword">public</span> Calculate&#123;<span class="hljs-keyword">public</span>:Mul();~Mul();<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Mul::calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> (a * b);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Div</span> :</span> <span class="hljs-keyword">public</span> Calculate&#123;<span class="hljs-keyword">public</span>:Div();~Div();<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Div::calculate</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> (a / b);&#125;</code></pre><p><strong>使用算法的上下文</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalOrder</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:CalOrder(Calculate *Cal, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b);~CalOrder();<span class="hljs-keyword">private</span>:Calculate *p_Cal;<span class="hljs-keyword">int</span> data1;<span class="hljs-keyword">int</span> data2;<span class="hljs-keyword">public</span>:<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span>;&#125;;CalOrder::CalOrder (Calculate *Cal, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)&#123;<span class="hljs-keyword">this</span>-&gt;p_Cal = Cal;<span class="hljs-keyword">this</span>-&gt;data1 = a;<span class="hljs-keyword">this</span>-&gt;data2 = b;&#125;CalOrder::~CalOrder()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">CalOrder::calculate</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;p_Cal-&gt;calculate(<span class="hljs-keyword">this</span>-&gt;data1, <span class="hljs-keyword">this</span>-&gt;data2);&#125;</code></pre><p><strong>main函数测试</strong><br>定义了一个具体的算法，和使用算法的上下文。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;Calculate *cal = <span class="hljs-keyword">new</span> Add;CalOrder *caloder = <span class="hljs-keyword">new</span> CalOrder(cal, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ADD : "</span> &lt;&lt; caloder-&gt;calculate() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;&#125;</code></pre><p>结果：<br><img src="/img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><blockquote><p>策略模式属于<strong>组件协作</strong>模式的一种，基本思想是通过框架和应用程序的<strong>晚期绑定</strong>（手段：虚函数），实现框架和应用之间的松耦合。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2019/07/28/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/28/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>工厂模式又称Factory Method，属于<strong>对象创建</strong>模式中的一种，用来支持对象稳定的创建。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类。    — 《设计模式》  GoF</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>根据设计模式的依赖倒置原则，1 高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口，2抽象接口不应该依赖于具体实现，而具体实现则应该依赖于抽象接口，因此如果代码像下面这么写：</p><pre><code class="hljs c++">mybook *book = <span class="hljs-keyword">new</span> Mathbook;</code></pre><p>这种写法虽然定义虽然是面向接口编程，但是new的却是一个具体的类，因此不符合依赖倒置原则，那么如何创建对象才符合DIP原则呢？</p><p>这就是工厂模式需要解决的问题，创建一个工厂类，通过内部的方法返回一个具体的对象。</p><p>具体实施方法：</p><ul><li>创建一个工厂接口，提供返回对象的纯虚方法</li><li>对于每一个具体的子类，创建一个具体的工厂类继承工厂接口</li></ul><p>缺点：</p><ul><li>要求每一个子类的构造方法的参数相同</li></ul><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>Creator : 需要产生对象的接口</li><li>Concretecreator : 需要产生对象的具体类</li><li>Product : 工厂类，负责产生具体的Concretecreator对象</li></ul><p><img src="/img/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/1.svg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><strong>书本抽象类</strong></p><p>书本抽象类是所有书类的接口</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:Book();<span class="hljs-keyword">virtual</span> ~Book();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getbookname</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>两个书本类</strong></p><p>两个书本类是书本抽象类的实例化</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnglishBook</span> :</span> <span class="hljs-keyword">public</span> Book&#123;<span class="hljs-keyword">public</span>:EnglishBook();<span class="hljs-keyword">virtual</span> ~EnglishBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getbookname</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnglishBook::getbookname</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"this is English book\n"</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathBook</span> :</span> <span class="hljs-keyword">public</span> Book&#123;<span class="hljs-keyword">public</span>:MathBook();<span class="hljs-keyword">virtual</span> ~MathBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getbookname</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MathBook::getbookname</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"this is math book \n"</span>;&#125;</code></pre><p><strong>工厂类的接口</strong></p><p>工厂类的接口是所有工厂子类的父类，每一个书本类都有对应的一个工厂类，在运行时决定采用哪个工厂类返回哪种类型的书本</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookFactory</span> </span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:    BookFactory();<span class="hljs-keyword">virtual</span> ~BookFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> Book *<span class="hljs-title">Createbook</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>具体的工厂类</strong></p><p>每一个需要创建的子类都对应一个具体的工厂类，这个类负责返回这个子类的对象</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnglishBookFactory</span> :</span> <span class="hljs-keyword">public</span> BookFactory&#123;<span class="hljs-keyword">public</span>:EnglishBookFactory();~EnglishBookFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> Book *<span class="hljs-title">Createbook</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function">Book * <span class="hljs-title">EnglishBookFactory::Createbook</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EnglishBook;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathBookFactory</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:MathBookFactory();~MathBookFactory();<span class="hljs-function"><span class="hljs-keyword">virtual</span> Book *<span class="hljs-title">Createbook</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function">Book * <span class="hljs-title">MathBookFactory::Createbook</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MathBook;&#125;</code></pre><p><strong>界面显示类</strong></p><p>这个类用来调用book类里面的函数，显示book的名字，这里<strong>采用工厂模式的目的就是为了使这个类是稳定的</strong>，即不管书的类型怎么变化，无需修改这个类的代码，这也是设计模式的一个核心思想，<strong>需求变化通过添加代码实现，而不是修改代码</strong>。</p><p>可以看到这里面<strong>所有的类型都是接口，符合DIP原则</strong>。</p><p><strong>设计模式不可能完全把不稳定的东西去除，这是不符合实际场景的，但是可以将不稳定的部分放在一个范围内而不是整个代码中</strong>，MainForm通过其构造函数传入一个具体的工厂，然后创建具体的Book对象。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainForm</span></span><span class="hljs-class">&#123;</span>BookFactory *book_fac;<span class="hljs-keyword">public</span>:MainForm(BookFactory *fac);~MainForm();<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showbook</span><span class="hljs-params">()</span></span>;&#125;;MainForm::MainForm(BookFactory *fac)&#123;<span class="hljs-keyword">this</span>-&gt;book_fac = fac;&#125;MainForm::~MainForm()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MainForm::showbook</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;Book *book = <span class="hljs-keyword">this</span>-&gt;book_fac-&gt;Createbook();<span class="hljs-comment">// 多态new</span>book-&gt;getbookname();&#125;</code></pre><p><strong>main函数测试</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;BookFactory *fac = <span class="hljs-keyword">new</span> EnglishBookFactory;MainForm *mainform = <span class="hljs-keyword">new</span> MainForm(fac);mainform-&gt;showbook();&#125;</code></pre><p><strong>测试结果</strong></p><p><img src="/img/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/img/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/3.png" srcset="/img/loading.gif" alt=""></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>思考一个问题：上面的例子的MainForm中直接传入Book的对象指针不就行了吗？Book也是接口，因此MainForm也是稳定的<br>由此引出Factory模式的<strong>应用场景和局限性</strong>：</p><ul><li><p>工厂模式所实例化的对象常常具有<strong>私有的构造方法</strong>，因此这些类就不能扩展了</p></li><li><p>如果将所有的构造方法都用工厂实现，则常常会把构造函数设置为私有的，那么所有的new这个对象的代码都会失效</p></li><li><p>如果确实扩展了工厂方法所实例化的类，那么其子类必须具有自己的工厂类，否则调用工厂方法返回的是父类的实例而不是子类的实例</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桥接模式</title>
    <link href="/2019/07/27/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/27/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>桥模式</strong>，又叫<strong>Bridge模式</strong>，和之前的装饰模式有点类似，都属于<strong>单一职责模式</strong>，不同的是装饰模式的动机是动态的扩展对象的功能，而桥模式是为了应对一个场景中有两个或多个不同维度的变化，桥模式可以弱化他们的耦合性，使得它们可以按照各自的方向扩展。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将抽象部分(业务功能)与实现部分(平台实现)分离，使它们都可以独立地变化。   —《设计模式》 GoF</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>桥接模式的意图是将抽象与实现解耦，使得两者可以独立变化。</p><p>桥接模式主要应对的是某个类中有两个或两个以上的维度变化，如果只是用继承则会使设计变得非常臃肿，可以将这些变化维度分离，使它们可以各自变化，<strong>在运行时</strong>，使用多态机制将这些变化进行组合。</p><p>举个具体的例子，比如我们常用播放器，它可以播放MPEG、RMVB、AVI等格式的文件，同时它可以在不同的平台上运行，如windows，linux等，可以使用桥接模式设计该播放器。这里可以把不同的平台看成抽象的部分，不同的格式看成具体的实现部分。</p><p>或者是一个绘图软件，我们可以画圆形，正方形，三角形等，同时又需要使用不同的颜色，如红色，绿色，蓝色等，也可以使用桥接模式设计该绘图软件，假设有n种颜色，m种图形，那只需要写n+m个子类就可以达到n*m种组合方式的效果，无需写nxm个类。这里可以把不同的图形看成抽象的部分，不同的颜色看成具体的实现方式。</p><p><strong>桥接模式的难度在于需要开发者能正确识别出系统中两个独立变化的维度。</strong></p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>Abstraction : 定义抽象接口，拥有一个Implementor类型的对象引用</li><li>RefinedAbstraction：扩展Abstraction中的接口定义，可以有多个</li><li>Implementor：是具体实现的抽象类</li><li>ConcreteImplementor：实现Implementor接口，可以有多个</li></ul><p><img src="/img/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/1.svg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>实现了一个多平台的播放器，平台相关的设置代码放在不同平台的子类中，不同视频格式的编码算法放在不同的编码子类中，在这里，把不同的平台看成桥接模式的抽象部分，不同的编码方式看成是桥接模式的具体实现方法。</p><p><strong>播放器抽象类</strong><br>播放器抽象类是Abstraction，是一个抽象接口，里面含有Implementor类型的指针对象videoformat，也就是不同的编码方式。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoPlayer</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:VideoPlayer(VideoFormat* videoformat);<span class="hljs-keyword">virtual</span> ~VideoPlayer() &#123;&#125;;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;VideoFormat* videoformat;&#125;;</code></pre><p><strong>不同的平台</strong><br>不同的平台是播放器抽象类的子类，具体包括windows平台和unix平台，属于RefinedAbstraction，重写播放器类的play函数，并且在构造函数中初始化编码方式。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowsPlatform</span> :</span> <span class="hljs-keyword">public</span> VideoPlayer&#123;<span class="hljs-keyword">public</span>:WindowsPlatform(VideoFormat *videoformat);~WindowsPlatform();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>;&#125;;WindowsPlatform::WindowsPlatform(VideoFormat *videoformat) : VideoPlayer(videoformat)&#123;&#125;WindowsPlatform::~WindowsPlatform()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">WindowsPlatform::play</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"in windows platform\n"</span>);<span class="hljs-keyword">this</span>-&gt;videoformat-&gt;Encode();&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnixPlatform</span> :</span> <span class="hljs-keyword">public</span> VideoPlayer&#123;<span class="hljs-keyword">public</span>:UnixPlatform(VideoFormat *videoformat);~UnixPlatform();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span></span>;&#125;;UnixPlatform::UnixPlatform(VideoFormat *videoformat) : VideoPlayer(videoformat)&#123;&#125;UnixPlatform::~UnixPlatform()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">UnixPlatform::play</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"in unix platform\n"</span>);<span class="hljs-keyword">this</span>-&gt;videoformat-&gt;Encode();&#125;</code></pre><p><strong>编码方式抽象类</strong><br>编码方式抽象类是从播放器中抽出来生成的一个抽象类，也就是桥接模式的Implementor</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoFormat</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:VideoFormat();<span class="hljs-keyword">virtual</span> ~VideoFormat();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Encode</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p><strong>不同的编码方式类</strong><br>不同的编码方式是对编码方式抽象类的扩展和具体实现，包括mpeg方式和avi方式</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mpeg</span> :</span> <span class="hljs-keyword">public</span> VideoFormat&#123;<span class="hljs-keyword">public</span>:Mpeg();~Mpeg();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Encode</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mpeg::Encode</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"start encode mpeg image... \n"</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Avi</span> :</span> <span class="hljs-keyword">public</span> VideoFormat&#123;<span class="hljs-keyword">public</span>:Avi();~Avi();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Encode</span><span class="hljs-params">()</span></span>;&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Avi::Encode</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"start encode avi image... \n"</span>);&#125;</code></pre><p><strong>main测试函数</strong><br>main函数中先构造一个mpeg的编码方式，然后动态的加载到播放器中实现</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;VideoFormat *videoplatform = <span class="hljs-keyword">new</span> Mpeg;VideoPlayer *videoplayer = <span class="hljs-keyword">new</span> WindowsPlatform(videoplatform);videoplayer-&gt;play();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>运行结果：<br><img src="/img/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/img/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/3.png" srcset="/img/loading.gif" alt=""></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>一个系统存在两个或多个独立变化的维度，且都需要扩展，对于多个维度的系统，在抽象类中增加其他维度的指针对象即可</li><li>不希望因为继承导致类的个数急剧增加的系统</li><li>通过桥接模式可以使得抽象角色和具体的角色的搭配有更多的灵活性</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰模式</title>
    <link href="/2019/07/27/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/27/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>修饰模式</strong>，又叫<strong>Decorator模式</strong>,是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（<strong>消除重复代码 &amp; 减少子类个数</strong>）。   — 《设计模式》  GoF</p><h3 id="Motivation-动机"><a href="#Motivation-动机" class="headerlink" title="Motivation 动机"></a>Motivation 动机</h3><p>一般有两种方式可以实现给一个类或对象增加行为：</p><ul><li><strong>继承机制</strong>，使用继承机制是给现有类添加功能的一种有效途径，通过继承一个现有类可以使得子类在拥有自身方法的同时还拥有父类的方法。但是这种方法是静态的，用户不能控制增加行为的方式和时机。</li><li><strong>关联机制</strong>，即将一个类的对象嵌入另一个对象中，由另一个对象来决定是否调用嵌入对象的行为以便扩展自己的行为，我们称这个嵌入的对象为装饰器(Decorator)</li></ul><p>装饰模式可以在不需要创建更多子类的情况下，<strong>将对象的功能加以扩展</strong>，通过多态机制可以在<strong>运行时选择装配</strong>某一个具体构件，而不需要在每一个具体构件下面创建子类，增强了代码的复用性,符合GoF给出的定义，消除重复代码和减少子类个数。同时也符合设计模式的开闭原则，即扩展对象的功能时只需要增加装饰类即可，无需修改代码。</p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul><li>Component : 抽象构件</li><li>ConcreteComponent: 具体构件，可以有多个</li><li>Decorator: 抽象装饰类</li><li>ConcreteDecorator: 具体装饰类，可以有多个</li></ul><p><img src="/img/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/1.svg" srcset="/img/loading.gif" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>** 书本类 **</p><p>书本类是一个抽象构件，包括书的名字，页数和价格，都是纯虚函数，因此这是一个虚基类。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">book</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">virtual</span> ~book();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">page</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">price</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p>** 数学书和英语书 **</p><ul><li>这是两个具体的抽象构件，对比上面的模式结构图，即把ConcreteComponent扩展成两个。</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathBook</span> :</span> <span class="hljs-keyword">public</span> book&#123;<span class="hljs-keyword">public</span>:MathBook();~MathBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">page</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;&#125;;MathBook::MathBook()&#123;&#125;MathBook::~MathBook()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MathBook::name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">memcpy</span>(p_name, <span class="hljs-string">"math book\0"</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">"math book\0"</span>));&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MathBook::page</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MathBook::price</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnglishBook</span> :</span> <span class="hljs-keyword">public</span> book&#123;<span class="hljs-keyword">public</span>:EnglishBook();~EnglishBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">page</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;&#125;;EnglishBook::EnglishBook()&#123;&#125;EnglishBook::~EnglishBook()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnglishBook::name</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">memcpy</span>(p_name, <span class="hljs-string">"English book\0"</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-string">"English book\0"</span>));&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EnglishBook::page</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">EnglishBook::price</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">80</span>;&#125;</code></pre><p>** 抽象装饰类 **</p><p>装饰类继承book类，这里面没有方法，只有一个book类的指针对象,这个类用于被具体的装饰类继承，book类的指针对象用来在运行时动态的选择装饰哪一个具体的构件，这里指数学书或英语书。<br><strong>这里说一下为什么类里面包含了book类的指针对象，还要继承book</strong>：继承是为了接口的规范性，让子类必须重写父类的接口，包含是为了在运行时动态的加载具体的构件，这样的设计非常巧妙，这也是这个模式的核心所在。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DecratorBook</span> :</span> <span class="hljs-keyword">public</span> book&#123;<span class="hljs-keyword">public</span>:DecratorBook(book *book1);~DecratorBook();<span class="hljs-comment">/* 运行时决定是哪种book */</span>book *my_book;&#125;;DecratorBook::DecratorBook(book *book1):my_book(book1)&#123;&#125;DecratorBook::~DecratorBook()&#123;&#125;</code></pre><p>** 两个具体装饰类 **<br>具体装饰类继承自抽象装饰类，在构造函数中传入book的指针对象来初始化父类的my_book指针，动态的选择装饰哪一个具体构件，在这里是数学书或者英语书<br>这里我们把读书和买书当成是对书的功能的扩展。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetBook</span> :</span> <span class="hljs-keyword">public</span> DecratorBook&#123;<span class="hljs-keyword">public</span>:GetBook(book* my_book);~GetBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">page</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;&#125;;GetBook::GetBook(book* my_book) : DecratorBook(my_book)&#123;&#125;GetBook::~GetBook()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetBook::name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];my_book-&gt;name(name);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"I get book %s , %d ￥ \n"</span>, name, my_book-&gt;price());&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetBook::page</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this book page is %d \n"</span>, my_book-&gt;page());<span class="hljs-keyword">return</span> my_book-&gt;page();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetBook::price</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this book price is %d \n"</span>, my_book-&gt;price());<span class="hljs-keyword">return</span>  my_book-&gt;price();&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadBook</span> :</span> <span class="hljs-keyword">public</span> DecratorBook&#123;<span class="hljs-keyword">public</span>:ReadBook(book* my_book);~ReadBook();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">page</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">price</span><span class="hljs-params">()</span></span>;&#125;;ReadBook::ReadBook(book *my_book) : DecratorBook(my_book)&#123;&#125;ReadBook::~ReadBook()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ReadBook::name</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p_name)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];my_book-&gt;name(name);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"I read book %s , %d pages \n"</span>, name, my_book-&gt;page());&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ReadBook::page</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this book page is %d \n"</span>, my_book-&gt;page());<span class="hljs-keyword">return</span> my_book-&gt;page();&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ReadBook::price</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this book price is %d \n"</span>, my_book-&gt;price());<span class="hljs-keyword">return</span> my_book-&gt;page();&#125;</code></pre><p><strong>main函数测试</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;book* mathbook = <span class="hljs-keyword">new</span> MathBook;book* englishbook = <span class="hljs-keyword">new</span> EnglishBook;GetBook *getbook = <span class="hljs-keyword">new</span> GetBook(mathbook);getbook-&gt;name(<span class="hljs-literal">NULL</span>);ReadBook *readbook = <span class="hljs-keyword">new</span> ReadBook(mathbook); readbook-&gt;name(<span class="hljs-literal">NULL</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>测试结果：<br><img src="/img/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/4.png" srcset="/img/loading.gif" alt=""></p><p>两种模式的比较：</p><ul><li>使用继承<br>可以看到随着组合的增加，子类的个数成倍的增加</li></ul><p><img src="/img/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><ul><li>使用Decrator<br>对于每一种书扩展的动作是一样的，不需要每次都继承一个子类，可以把这些动作都提取出来，减少了代码的重复性，不管有多少种组合方式，只需要在实用的时候动态的加载具体的构件即可。</li></ul><p><img src="/img/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/3.png" srcset="/img/loading.gif" alt=""></p><blockquote><p>Decorator类在接口上表现为is-a Component的继承关系，即 Decorator类继承了Component类所具有的接口。但在实现上又表现为has-a Component的组合关系，即Decorator类又使用了另外一个Component类，这里指具体的英语书或者数学书<br>继承是为了接口的规范性，组合是为了动态的加载具体的构件，<strong>在代码中看到即有继承又有组合的方式，大部分都是使用了Decrator模式</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2019/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>观察者模式</strong>，又叫<strong>Observer模式或者Event模式</strong>，是用来对事件进行通知的模式，在UI框架中使用的比较多。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义对象间的一种一对多（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。 — 《设计模式》 GoF</p><h3 id="Motivation-动机"><a href="#Motivation-动机" class="headerlink" title="Motivation 动机"></a>Motivation 动机</h3><p>为了给某些对象建立一种<strong>通知依赖</strong>关系，即一个对象发生变化，所有的依赖对象都会得到通知。使用面向对象的技术，使得这种依赖关系弱化，具体实现方法：抽象出一个通知类，把通知的结果或者形式封装起来。</p><p>目标发送通知时，无需指定哪个观察者，通知会自动传播给所有的观察者<br>观察者自己觉得是否需要订阅通知，目标对象对此一无所知</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><strong>目标对象</strong><br>目标对象包括一个自动生成随机数的函数，一个发送通知的函数，订阅通知的函数和取消订阅通知的函数。<br>这个类中添加和删除订阅都是基于抽象的观察者类而不依赖具体的实现，抽象的观察者类是稳定的。</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValueChange</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:ValueChange();~ValueChange();<span class="hljs-comment">/* list 支持多个观察者 */</span><span class="hljs-built_in">list</span>&lt;IProgress*&gt;  progressList;<span class="hljs-comment">/* 数据变化 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ChangeValue</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">/* 发送通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onProcess</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>;<span class="hljs-comment">/* 添加通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">attachProcess</span><span class="hljs-params">(IProgress *progress)</span></span>;<span class="hljs-comment">/* 删除通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">detachProdess</span><span class="hljs-params">(IProgress *progress)</span></span>;&#125;;ValueChange::ValueChange()&#123;&#125;ValueChange::~ValueChange()&#123;&#125;<span class="hljs-comment">/* 数据变化 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ValueChange::ChangeValue</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = rand() % <span class="hljs-number">10</span>;onProcess(i);&#125;<span class="hljs-comment">/* 发送通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ValueChange::onProcess</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">list</span>&lt;IProgress *&gt;::iterator itor = progressList.<span class="hljs-built_in">begin</span>();<span class="hljs-keyword">while</span> (itor != progressList.<span class="hljs-built_in">end</span>())&#123;(*itor)-&gt;Doprogress(data);itor++;&#125;&#125;<span class="hljs-comment">/* 添加通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ValueChange::attachProcess</span><span class="hljs-params">(IProgress *progress)</span></span><span class="hljs-function"></span>&#123;progressList.push_back(progress);&#125;<span class="hljs-comment">/* 删除通知 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ValueChange::detachProdess</span><span class="hljs-params">(IProgress *progress)</span></span><span class="hljs-function"></span>&#123;progressList.<span class="hljs-built_in">remove</span>(progress);&#125;</code></pre><p><strong>观察者类</strong><br>观察者类是一个接口类，包括一个纯虚函数 : 显示数据</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IProgress</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:<span class="hljs-keyword">virtual</span> ~IProgress();<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Doprogress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>= <span class="hljs-number">0</span>;&#125;;</code></pre><p>** 两个通知类 **<br>两个通知类继承观察者类，重写观察者类里面的纯虚函数，实现具体的通知方式，如打印数据或者打印 * 符号</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Progress1</span> :</span> <span class="hljs-keyword">public</span> IProgress&#123;<span class="hljs-keyword">public</span>:Progress1();~Progress1();<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Doprogress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>;&#125;;Progress1::~Progress1()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Progress1::Doprogress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"data = %d\n"</span>, data);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Progress2</span> :</span> <span class="hljs-keyword">public</span> IProgress&#123;<span class="hljs-keyword">public</span>:Progress2();~Progress2();<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Doprogress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>;&#125;;Progress2::Progress2()&#123;&#125;Progress2::~Progress2()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Progress2::Doprogress</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; data; i++)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"*"</span>);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);&#125;</code></pre><p><strong>主函数</strong><br>主函数实现一个目标对象并且订阅了两个观察者，调用目标对象的随机数函数，查看事件的通知形式。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;ValueChange *val = <span class="hljs-keyword">new</span> ValueChange;IProgress *pro1 = <span class="hljs-keyword">new</span> Progress1;IProgress *pro2 = <span class="hljs-keyword">new</span> Progress2;val-&gt;attachProcess(pro1);val-&gt;attachProcess(pro2);<span class="hljs-keyword">do</span> &#123;val-&gt;ChangeValue();i--;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);&#125; <span class="hljs-keyword">while</span> (i);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>运行结果：<br><img src="/img/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/1.png" srcset="/img/loading.gif" alt=""></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/img/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板模式</title>
    <link href="/2019/07/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    <url>/2019/07/25/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>本文介绍23种设计模式的第一种，<strong>模板模式</strong>，英文是<strong>Template Method</strong>，这是一个非常常用的设计模式。从封装变化角度来分类，模板模式属于<strong>组件协作模式</strong>的一种。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟 (变化)到子类中。Template Method使得子类可以不改变 (复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。    —《设计模式》 GoF</p><h3 id="Motivation-动机"><a href="#Motivation-动机" class="headerlink" title="Motivation 动机"></a>Motivation 动机</h3><p>学习设计模式需要知道这个设计模式是用来干嘛的，解决哪一类问题的，这点很关键，但是设计模式的学习又不仅仅只是这些，重点是要学会根据具体的场景找出<strong>稳定和不稳定的分界线</strong>，在这个分界线处，就是需要使用设计模式的地方。</p><p>假设这样的场景，你需要基于framework开发一个APP，这是日常开发中很常用的场景。一般的方法是，厂家提供给你库，你调用库内部的方法写自己的业务，这样毫无疑问是可以的。<br>但是有一个更加简单的办法，就是厂家在framework把所有的业务流程全部写完，在不确定的位置使用<strong>虚函数</strong>（C++）或者是<strong>函数指针</strong>（C语言）代替，而你不需要知道全部的业务范围，只需要把重写虚函数或者实现一个函数指针对应的函数即可，这就是<strong>Template Method</strong>。</p><p>这里面有<strong>两个概念</strong>，早绑定和晚绑定</p><ul><li><strong>早绑定</strong>：写的晚的代码依赖于写的早的代码，也就是我们日常使用的开发方法</li><li><strong>晚绑定</strong>：写的早的代码依赖于写的晚的代码，也就是我们所说的<strong>Template Method</strong>模式，framework依赖于app的函数才能正确的运行</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><strong>framework 类</strong><br>有两个确定的步骤，两个不确定的步骤，和整个业务流程函数</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">framework</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">public</span>:framework();~framework();<span class="hljs-comment">/* 确定的步骤 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step1</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step3</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">/* 不确定的步骤 */</span><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">step4</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">/* 流程 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main_loop</span><span class="hljs-params">()</span></span>;&#125;;framework::framework()&#123;&#125;framework::~framework()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">framework::step1</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"framework step 1 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">framework::step2</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"framework step 2 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">framework::step3</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"framework tep 3 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">framework::step4</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"framework step 4 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">framework::main_loop</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;step1();step2();step3();step4();&#125;</code></pre><p><strong>两个APP</strong><br>继承固件库，重写固件库里的虚函数即可</p><pre><code class="hljs c++"><span class="hljs-comment">/* 第一个APP */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> :</span> <span class="hljs-keyword">public</span> framework&#123;<span class="hljs-keyword">public</span>:App();~App();<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step4</span><span class="hljs-params">()</span></span>;&#125;;App::App()&#123;&#125;App::~App()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">App::step2</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"App step 2 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">App::step4</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"App step 4 running ...\n"</span>);&#125;<span class="hljs-comment">/* 第二个APP */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App2</span> :</span> <span class="hljs-keyword">public</span> framework&#123;<span class="hljs-keyword">public</span>:App2();~App2();<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step2</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">step4</span><span class="hljs-params">()</span></span>;&#125;;App2::App2()&#123;&#125;App2::~App2()&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">App2::step2</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"App2 step 2 running ...\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">App2::step4</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"App2 step 4 running ...\n"</span>);&#125;</code></pre><p><strong>主函数</strong></p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"=========================\n"</span>);framework *work = <span class="hljs-keyword">new</span> App;work-&gt;main_loop();<span class="hljs-built_in">printf</span>(<span class="hljs-string">"=========================\n"</span>);framework *work2 = <span class="hljs-keyword">new</span> App2;work2-&gt;main_loop();<span class="hljs-built_in">printf</span>(<span class="hljs-string">"=========================\n"</span>);&#125;</code></pre><p>运行结果：<br><img src="/img/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/1.png" srcset="/img/loading.gif" alt=""></p><p><strong>类图</strong></p><p><img src="/img/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/2.png" srcset="/img/loading.gif" alt=""></p><blockquote><p>估计很多人尤其新手，在开发应用程序的时候会有种只见树木，不见森林的感觉，就是因为固件库使用了这种设计模式，封装了业务逻辑，而我们只需要重写部分代码即可。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程</title>
    <link href="/2019/07/21/%E7%BA%BF%E7%A8%8B/"/>
    <url>/2019/07/21/%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>线程基础知识包含两个部分，1是线程的基础概念，线程控制的API和线程属性设置的API，具体可以参考man手册，2是线程间同步的方法，有互斥锁，读写锁，条件变量，信号量等，以及使用信号量实现生产者消费者模型。   </p><p>线程，<strong>light weight process 轻量级的进程</strong>，是内核调度的基本单位，<strong>ps –Lf pid</strong> 查看指定线程的lwp号，lwp号和进程ID很相似，不是线程ID，线程ID是进程中区分不同的线程所使用的。</p><p>线程同步，一般用在<strong>多个线程，共同操作一个共享资源</strong>的情况。</p><p><img src="/img/%E7%BA%BF%E7%A8%8B/1.svg" srcset="/img/loading.gif" alt=""></p><ul><li>右键单独打开图片可以放大，，，</li></ul><blockquote><p>线程的一些基础知识和API就讲这么多，至于具体的细节知识，如条件变量，哲学家吃饭模型等放在单独的篇幅中</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>守护进程</title>
    <link href="/2019/07/15/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <url>/2019/07/15/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="进程组与会话"><a href="#进程组与会话" class="headerlink" title="进程组与会话"></a>进程组与会话</h2><h3 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h3><p>进程组，也称之为作业，顾名思义，代表一个或多个进程的集合，设计进程组的概念是为了简化对多个进程的管理。<br>父进程创建子进程的时候，默认父子进程位于同一个进程组，进程组的ID就是第一个进程的ID，第一个进程成为进程组的组长。<br>只要进程组有一个进程存在，进程组就存在，与组长进程是否终止无关。<br>进程组生存期：进程组的最后一个进程终止。<br>一个进程可以为自己或者子进程设置进程组ID</p><h3 id="进程组操作函数"><a href="#进程组操作函数" class="headerlink" title="进程组操作函数"></a>进程组操作函数</h3><ul><li>getpgrp 获取当前进程的进程组ID</li><li>getpgid 获取指定进程的进程组ID</li><li>setpgid 改变进程默认所属的进程组，通常可用来加入一个现有的进程组或创建一个新进程组</li></ul><h3 id="会话"><a href="#会话" class="headerlink" title="会话###"></a>会话###</h3><p>会话是一个进程组或者多个进程组的集合，通常一个会话开始于用户登录，终止与用户退出，在此期间，该用户运行的所有程序都属于这个会话<br><strong>创建一个会话需要注意以下几个事项：</strong></p><ul><li>创建会话的进程不能是某个进程组的组长</li><li>创建会话的进程成为这个会话的会长和会话里第一个进程组的组长</li><li>新会话丢弃原有的控制终端，该会话没有控制终端</li><li>建立新会话步骤，先fork一个子进程，然后父进程退出，子进程调用setsid</li></ul><p>会话相关的两个函数：</p><ul><li>getsid 查看当前进程的会话ID</li><li>setsid 创建一个会话，并以自己的ID为会话ID</li></ul><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>daemon进程，即守护进程是指linux后台服务程序，通常独立于控制终端并且周期性的执行某种任务，名字一般以d结尾<br>linux的系统服务进程，没有控制终端，不能直接和用户交互等都是守护进程，如nfs服务器，ftp服务器</p><p><strong>创建守护进程模型</strong></p><p><img src="/img/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/1.png" srcset="/img/loading.gif" alt=""></p><p>创建守护进程的过程实际上是创建一个新的会话，跳出控制终端建立的会话，达到脱离于终端运行的目的。创建守护进程模型有以下几个步骤：</p><ul><li>创建子进程，退出父进程</li><li>子进程调用setsid创建会话，成为会话第一个进程组的组长</li><li>改变当前目录为根目录，不是必须，为了防止当前目录被删除</li><li>重设文件权限掩码umask为0</li><li>重定向标准输入，标准输出和标准错误到/dev/null</li><li>开始守护进程的逻辑</li></ul><p><strong>示例代码</strong></p><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 创建一个守护进程</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">pid_t</span> pid;<span class="hljs-keyword">int</span> i;pid = fork();<span class="hljs-comment">/* 干掉父进程 */</span><span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/* 创建会话期 */</span>pid = setsid();<span class="hljs-built_in">printf</span>(<span class="hljs-string">"pid = %d \n"</span>, getpid());<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"setsid error :"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/* 改变文件掩码 */</span>umask(<span class="hljs-number">0</span>);<span class="hljs-comment">/* 切换目录到根目录 */</span>chdir(<span class="hljs-string">"/"</span>);<span class="hljs-comment">/* 重定位标准输入、输出、错误到/dev/null */</span><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)&#123;<span class="hljs-built_in">close</span>(i);&#125;<span class="hljs-built_in">open</span>(<span class="hljs-string">"/dev/null"</span>,O_RDWR);dup(<span class="hljs-number">0</span>);dup(<span class="hljs-number">0</span>);<span class="hljs-keyword">int</span> fd;<span class="hljs-keyword">time_t</span> t;<span class="hljs-keyword">char</span> *t_buffer;fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">"timelog"</span>, O_CREAT | O_RDWR, <span class="hljs-number">0644</span>);<span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"fd error:"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);&#125;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;t = time(<span class="hljs-number">0</span>);t_buffer = asctime(localtime(&amp;t));<span class="hljs-built_in">write</span>(fd, t_buffer, <span class="hljs-built_in">strlen</span>(t_buffer));sleep(<span class="hljs-number">5</span>);&#125;&#125;</code></pre><p>这个程序首先创建了一个守护进程，在守护进程里每隔5秒打印当前系统的时间到timelog日志文件里。<br>由于切换工作目录为根目录，因此执行的时候需要加上sudo权限，运行结果：<br><img src="/img/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/2.png" srcset="/img/loading.gif" alt=""><br>可以看到，这个守护进程的所属用户已经变成了root用户，父进程为1号进程，tty为？,表示不属于任何终端</p><p>使用<strong>sudo killall + 守护进程的名字</strong>可以杀掉守护进程</p><h2 id="daemon函数"><a href="#daemon函数" class="headerlink" title="daemon函数"></a>daemon函数</h2><p>除了上述方法可以创建一个守护进程外，也可以使用daemon函数创建一个守护进程。</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">daemon</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nochdir, <span class="hljs-keyword">int</span> noclose)</span></span>;</code></pre><p><strong>参数：</strong></p><ul><li>nochdir：=0 将当前目录更改至“/”</li><li>noclose：=0 将标准输入、标准输出、标准错误重定向至“/dev/null”</li></ul><p><strong>返回值</strong></p><ul><li>成功返回0</li><li>失败返回-1</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mmap</title>
    <link href="/2019/07/14/mmap/"/>
    <url>/2019/07/14/mmap/</url>
    
    <content type="html"><![CDATA[<p>Linux操作系统提供的IPC方法有很多，如文件，管道，信号，共享内存，消息队列，套接字，命名管道等，常用的进程间通信方法有：</p><ul><li>管道 (使用最简单)</li><li>信号 (开销最小)</li><li>共享映射区 (无血缘关系)</li><li>本地套接字 (最稳定)</li></ul><h2 id="mmap函数基本用法"><a href="#mmap函数基本用法" class="headerlink" title="mmap函数基本用法"></a>mmap函数基本用法</h2><p>上述IPC方法中的共享映射区就是使用mmap函数实现的,该函数的功能是<strong>将磁盘文件的内容映射到内存中</strong>，在不适用read和write函数的情况下，使用地址（指针）完成I/O操作</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mmap</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *adrr, <span class="hljs-keyword">size_t</span> length, <span class="hljs-keyword">int</span> prot, <span class="hljs-keyword">int</span> flags, <span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">off_t</span> offset)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">munmap</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> length)</span></span>; <span class="hljs-comment">/* 删除共享映射区 */</span></code></pre><p><strong>参数解析：</strong></p><ul><li>addr: 建立映射区的首地址，由Linux内核指定。使用时，直接传递NULL</li><li>length： 欲创建映射区的大小</li><li>prot：    映射区权限PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE</li><li>flags：    标志位参数(常用于设定更新物理区域、设置共享、创建匿名映射区)</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">MAP_SHARED</span>:  会将映射区所做的操作反映到物理设备（磁盘）上<span class="hljs-selector-tag">MAP_PRIVATE</span>: 映射区所做的修改不会反映到物理设备</code></pre><ul><li>fd：     用来建立映射区的文件描述符</li><li>offset： 映射文件的偏移(<strong>4k的整数倍</strong>)</li></ul><p><strong>返回值：</strong></p><ul><li>成功返回共享内存的首地址</li><li>失败返回 MAP_FAILED（(void *) -1）</li></ul><h2 id="mmap函数注意事项"><a href="#mmap函数注意事项" class="headerlink" title="mmap函数注意事项"></a>mmap函数注意事项</h2><p>先看一个示例程序：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/mman.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> fd_test;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *buf = <span class="hljs-literal">NULL</span>;<span class="hljs-keyword">int</span> ret;fd_test = <span class="hljs-built_in">open</span>(<span class="hljs-string">"temp"</span>, O_RDWR | O_CREAT, <span class="hljs-number">0644</span>);<span class="hljs-keyword">if</span> (fd_test == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"open err"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/*</span><span class="hljs-comment"> * 删除文件的目录项，使之具备被删除的条件,没有真正被删除</span><span class="hljs-comment"> * 在所有占有该文件描述符的进程结束后该文件被删除</span><span class="hljs-comment"> */</span><span class="hljs-comment">//unlink("temp");/* 程序结束后删除temp */</span><span class="hljs-keyword">int</span> n;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入文件的大小\n"</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);ret = ftruncate(fd_test, n); <span class="hljs-comment">/* 设置文件的大小 */</span><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"ftruncate err:"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">fd_stat</span>;</span>ret = fstat(fd_test, &amp;fd_stat);<span class="hljs-comment">/* 获取文件的大小 */</span><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"fstat err:"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">int</span> fd_len = fd_stat.st_size;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"fd_len = %d \n"</span>,fd_len);<span class="hljs-comment">/* 映射一个与文件大小相同的共享内存区域 */</span>buf = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *)mmap(<span class="hljs-literal">NULL</span>, fd_len, PROT_READ | PROT_WRITE, MAP_SHARED, fd_test, <span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (buf == MAP_FAILED)&#123;perror(<span class="hljs-string">"mmap failed"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">int</span> buf_len = <span class="hljs-built_in">strlen</span>((<span class="hljs-keyword">char</span> *)buf);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"buf len = %d \n"</span>, buf_len);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"修改前文件的内容：\n%s\n"</span>, buf);<span class="hljs-keyword">char</span> rcv_buf[<span class="hljs-number">1024</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">"输入写入文件的数据:\n"</span>);<span class="hljs-keyword">while</span> ( fgets(rcv_buf, <span class="hljs-keyword">sizeof</span>(rcv_buf), <span class="hljs-built_in">stdin</span>) != <span class="hljs-literal">NULL</span> )&#123;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(rcv_buf) &lt;= <span class="hljs-number">1</span>)<span class="hljs-keyword">continue</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-built_in">memcpy</span>(buf, rcv_buf, <span class="hljs-built_in">strlen</span>(rcv_buf));<span class="hljs-built_in">printf</span>(<span class="hljs-string">"修改后文件的内容：\n%s\n"</span>, buf);<span class="hljs-built_in">close</span>(fd_test);munmap(buf, <span class="hljs-number">10</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>代码中使用了几个系统调用，</p><ul><li>unlink，删除文件的目录项，使之具备被删除的条件,没有真正被删除，在所有占有该文件描述符的进程结束后该文件被删除,如果在程序结束后就无需使用这个文件，则调用它</li><li>ftruncate，设置文件的大小</li><li>fstat， 获取文件的大小 </li></ul><p><strong>mmap函数的核心在注意事项，主要有以下几个</strong></p><ul><li>新创建的文件无法mmap，必须要有实际的大小，可以使用ftruncate函数设置文件实际大小</li><li>对映射区的权限要小于等于打开文件的权限，映射的过程中隐藏了一次读操作，因此文件权限至少是可读</li><li>最后一个参数offset必须是4K的整数倍</li><li>映射的内存超出了文件的大小，不报错，但无法写入超出的部分</li><li>一定要检查返回值</li></ul><p>运行结果：</p><p><img src="/img/mmap/1.png" srcset="/img/loading.gif" alt=""></p><p>可以看到，设置文件的大小为10，但写入的数据超过10，虽然写入了共享内存区域，但是超出文件大小的部分并没有写入文件中</p><h2 id="mmap函数用于进程间通信"><a href="#mmap函数用于进程间通信" class="headerlink" title="mmap函数用于进程间通信"></a>mmap函数用于进程间通信</h2><p>实质上mmap是内核借助文件帮我们创建了一个映射区，多个进程之间利用该映射区完成数据传递。<strong>mmap可以用于父子间通信，也可以用于无血缘关系进程间通信</strong>，前提是必须要使用MAP_SHARED选项</p><h3 id="匿名映射"><a href="#匿名映射" class="headerlink" title="匿名映射"></a>匿名映射</h3><p>使用映射区必须要使用一个文件来创建共享内存,比较麻烦，也可以使用匿名映射来创建共享映射区，方法是使用MAP_ANONYMOUS (或MAP_ANON) </p><pre><code class="hljs c"><span class="hljs-keyword">int</span> *p = mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">4</span>, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);</code></pre><p>该方法只可能在Linux操作系统使用，无法在类Unix操作系统使用。</p>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile基础</title>
    <link href="/2019/07/14/makefile%E5%9F%BA%E7%A1%80/"/>
    <url>/2019/07/14/makefile%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>makefile是GUN执行make调用的程序，用来组织项目中的文件按照一定的规则被编译，其核心是规则</p></blockquote><h3 id="程序的编译过程"><a href="#程序的编译过程" class="headerlink" title="程序的编译过程"></a>程序的编译过程</h3><p>先来看看程序的编译过程<br><img src="/img/makefile%E5%9F%BA%E7%A1%80/1.png" srcset="/img/loading.gif" alt=""></p><p>大体上分为四步：</p><ul><li>预处理 </li><li>编译，生成.s文件</li><li>汇编，生成.o文件，是二进制文件</li><li>链接，将多个.o文件链接在一起，生成可执行文件ELF文件</li></ul><p>file命令查看文件格式：<br><img src="/img/makefile%E5%9F%BA%E7%A1%80/6.png" srcset="/img/loading.gif" alt=""></p><h3 id="makefile语法"><a href="#makefile语法" class="headerlink" title="makefile语法"></a>makefile语法</h3><p>Makefile的基本格式很简单：</p><pre><code class="hljs css">目标 : 依赖1 依赖2 ...<span class="hljs-selector-attr">[TAB]</span>命令</code></pre><p>执行命令的条件：</p><ul><li>当目标文件不存在</li><li>或者某个依赖比目标文件新</li></ul><h3 id="makefile通配符"><a href="#makefile通配符" class="headerlink" title="makefile通配符"></a>makefile通配符</h3><ul><li>%.o 表示某个.o文件</li><li>*.o 表示所有的.o文件</li><li>$@ 表示目标</li><li>$&lt; 表示第1个依赖文件</li><li>$^ 表示所有依赖文件</li></ul><h3 id="makefile变量的两个特色"><a href="#makefile变量的两个特色" class="headerlink" title="makefile变量的两个特色"></a>makefile变量的两个特色</h3><p>Makefile中变量分为两类，一类是<strong>即时变量</strong>，另一类是<strong>延时变量</strong>，这在GUN make中文手册中被翻译为Makefile变量的两个特色</p><p>A := xxx     </p><ul><li>A的值即刻确定，在定义时即确定    </li></ul><p>B = xxx     </p><ul><li>B的值使用到时才确定</li></ul><p>:=   即时变量<br>=    延时变量<br>?=   延时变量, 如果是第1次定义才起效, 如果在前面该变量已定义则忽略这句<br>+=   附加, 它是即时变量还是延时变量取决于前面的定义 </p><h3 id="makefile函数"><a href="#makefile函数" class="headerlink" title="makefile函数"></a>makefile函数</h3><p><strong>使用这些函数的目的是为了替代手动输入大量的.c或者.o文件组成的字符串(大项目中可能有成千上万个文件)，因此这些函数的输出都是字符串</strong></p><blockquote><p>makefile所有的函数都有返回值，我们使用函数也是为了读取它的返回值</p></blockquote><ul><li><strong>查找所有</strong><blockquote><p>查找当前目录下所有的.c文件</p></blockquote></li></ul><pre><code class="hljs makefile">src = <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span></code></pre><p>返回一个字符串，如下：<br><img src="/img/makefile%E5%9F%BA%E7%A1%80/2.png" srcset="/img/loading.gif" alt=""></p><ul><li><strong>按格式替换</strong><blockquote><p>替换当前目录下的.c为.o的形式,.c来源于上面的src变量,注意这里是一对一替换，因此是%而不是*</p></blockquote></li></ul><pre><code class="hljs makefile">obj = <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> ./%.c, ./%.o, <span class="hljs-variable">$(src)</span>)</span></code></pre><p>返回也是一个字符串，注意这只是修改了字符串中每个文件的后缀生成一个新的字符串，并不生成文件，结果如下：</p><p><img src="/img/makefile%E5%9F%BA%E7%A1%80/3.png" srcset="/img/loading.gif" alt=""></p><ul><li><strong>替换所有</strong><blockquote><p>将obj里面的文件依次取出并放在f中,并改成f.d的形式,注意f是变量，要加上$(f),输出这个字符串</p></blockquote></li></ul><pre><code class="hljs makefile">oobj=<span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> f, <span class="hljs-variable">$(obj)</span>, <span class="hljs-variable">$(f)</span>.d)</span></code></pre><p>结果如下：<br><img src="/img/makefile%E5%9F%BA%E7%A1%80/4.png" srcset="/img/loading.gif" alt=""></p><ul><li><strong>过滤文件</strong><blockquote><p>将src里面的符合xx.c形式的文件取出来，注意这里是依次取出，因此是%</p></blockquote></li></ul><pre><code class="hljs makefile">obj=<span class="hljs-variable">$(<span class="hljs-built_in">filter</span> %.c, <span class="hljs-variable">$(src)</span>)</span></code></pre><p>输出结果：<br><img src="/img/makefile%E5%9F%BA%E7%A1%80/5.png" srcset="/img/loading.gif" alt=""></p><ul><li><strong>反过滤函数</strong></li></ul><p>filter-out用法与filter相反，不再介绍</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>这个代码会生成两个目标，适用于编译多个可执行文件，上面的输出信息写在终极目标的命令中，因为终极目标不需要执行任何gcc指令<br>.PHONY : clean，声明一个伪目标，在文件夹下有文件名为clean的文件时，依然会执行makefile里面的clean指令，否则会执行这个clean文件，做个试验测试一下即可</p><pre><code class="hljs makefile">CC = gccCFLAGS = -Wall -g<span class="hljs-comment"># 查找，获取的也是一个字符串</span>src = <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span><span class="hljs-comment"># 替换指定格式的文件</span>obj = <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> ./%.c, ./%.o, <span class="hljs-variable">$(src)</span>)</span><span class="hljs-comment"># 替换所有</span>dbj=<span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> f, <span class="hljs-variable">$(obj)</span>, <span class="hljs-variable">$(f)</span>.d)</span><span class="hljs-comment"># 过滤文件</span>fbj=<span class="hljs-variable">$(<span class="hljs-built_in">filter</span> %.c, <span class="hljs-variable">$(src)</span>)</span>target : client serverecho <span class="hljs-variable">$(fbj)</span>client : client.o sckutil.o <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span>server : server.o sckutil.o <span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><span class="hljs-section">%.o:%.c </span><span class="hljs-variable">$(CC)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><span class="hljs-comment"># 伪目标</span>.PHONY : clean<span class="hljs-section">clean:</span>rm -rf *.o client server</code></pre><blockquote><p>以上是学习makefile必备的基础知识，知识来源于积累，，，</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Makefile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下的静态库与动态库</title>
    <link href="/2019/07/13/Linux%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <url>/2019/07/13/Linux%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Linux下的库文件分为动态库和静态库，都是二进制文件，动态库的后缀为.so，静态库的后缀为.a</p></blockquote><h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><p><strong>静态库的命名规则：</strong></p><pre><code class="hljs bash">lib + 静态库的名字 + .a</code></pre><p><strong>制作步骤：</strong></p><p>1) 生成对应的.o文件 ： </p><pre><code class="hljs bash">gcc -c xxx.c</code></pre><p>2) 将生成的.o文件打包：</p><pre><code class="hljs bash">ar rcs xxx.a xxx.o</code></pre><p><strong>发布静态库</strong><br>发布静态库就是要发布.a文件和对应的头文件，头文件提供了库文件的接口</p><p><strong>示例：</strong><br>我的文件夹下有一个sckutil.c的套接字库文件，现在将它打包，并使用它编译一下TCP客户端client.c<br><img src="/img/Linux%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/1.png" srcset="/img/loading.gif" alt=""></p><p>看一下生成文件的大小：<br><img src="/img/Linux%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/2.png" srcset="/img/loading.gif" alt=""></p><p><strong>优缺点：</strong></p><ul><li>库里面的程序直接拷贝到应用程序中，发布应用程序时无需再发布库文件，但是会导致应用程序过大。如果一个系统多个应用程序都链接到相同的库文件，会导致一份代码多个拷贝的情况，浪费系统资源</li><li>无需动态链接，程序运行速度相对较快</li></ul><h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><p><strong>静态库的命名规则：</strong></p><pre><code class="hljs bash">lib + 动态库的名字 + .so</code></pre><p><strong>动态库的三种名称：</strong></p><ul><li>soname，动态库的软链接名称,指向realname</li><li>realname, 动态库的真实名称，带有版本号信息，如 libsckutil.so.xxx，xxx是版本号</li><li>linkername，编译过程中使用的动态库的名称，如sckutil，linkername也是指向realname的，编译过程中使用-L指定动态库的位置，-l指定是哪个动态库</li></ul><p><strong>制作步骤：</strong></p><p>1) 生成位置无关的.o文件 ，加-fPIC选项</p><pre><code class="hljs bash">gcc -fPIC -c xxx.c</code></pre><p>2) 将生成的.o文件打包： -shared选项</p><pre><code class="hljs bash">gcc -shared -o libxxx.so xxx.o</code></pre><p><strong>示例：</strong></p><p><img src="/img/Linux%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/3.png" srcset="/img/loading.gif" alt=""></p><p>可以看到，使用动态库之后文件的大小已经大大减少。</p>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPC小工具</title>
    <link href="/2019/07/12/IPC%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <url>/2019/07/12/IPC%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>分享一个ipc小工具，功能是清除某个用户下的ipc对象，这个对于我们开发时清理环境是很有用的</p></blockquote><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"check params..."</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> != <span class="hljs-string">"2"</span> ];<span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span>  <span class="hljs-string">"usage: <span class="hljs-variable">$0</span> user smg|shm|sem|all"</span><span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$2</span> != <span class="hljs-string">"shm"</span> -a <span class="hljs-variable">$2</span> != <span class="hljs-string">"sem"</span> -a <span class="hljs-variable">$2</span> != <span class="hljs-string">"smg"</span> -a <span class="hljs-variable">$2</span> != <span class="hljs-string">"all"</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"usage: <span class="hljs-variable">$0</span> user smg|shm|sem|all"</span><span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"delete the shm..."</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">"shm"</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">"all"</span> ];<span class="hljs-keyword">then</span>START=`ipcs|sed -n <span class="hljs-string">'/Shared/='</span>`END=`ipcs|sed -n <span class="hljs-string">'/Semaphore/='</span>`<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ipcs | sed -n <span class="hljs-string">"<span class="hljs-variable">$&#123;START&#125;</span>,<span class="hljs-variable">$&#123;END&#125;</span>p"</span> | grep <span class="hljs-variable">$1</span> | awk <span class="hljs-string">'&#123;print $2&#125;'</span>`<span class="hljs-keyword">do</span>ipcrm shm <span class="hljs-variable">$i</span><span class="hljs-built_in">echo</span> -e <span class="hljs-variable">$i</span><span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"delete the sem..."</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">"sem"</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">"all"</span> ];<span class="hljs-keyword">then</span>START=`ipcs|sed -n <span class="hljs-string">'/Semaphore/='</span>`<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ipcs | sed -n <span class="hljs-string">"<span class="hljs-variable">$&#123;START&#125;</span>,$<span class="hljs-variable">$p</span>"</span> | grep <span class="hljs-variable">$1</span> | awk <span class="hljs-string">'&#123;print $2&#125;'</span>`<span class="hljs-keyword">do</span>ipcrm sem <span class="hljs-variable">$i</span><span class="hljs-built_in">echo</span> -e <span class="hljs-variable">$i</span><span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span><span class="hljs-built_in">echo</span> <span class="hljs-string">"delete the msg..."</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">"msg"</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">"all"</span> ];<span class="hljs-keyword">then</span>START=`ipcs|sed -n <span class="hljs-string">'/Message/='</span>`END=`ipcs|sed -n <span class="hljs-string">'/Shared/='</span>`<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ipcs | sed -n <span class="hljs-string">"<span class="hljs-variable">$&#123;START&#125;</span>,<span class="hljs-variable">$&#123;END&#125;</span>p"</span> | grep <span class="hljs-variable">$1</span> | awk <span class="hljs-string">'&#123;print $2&#125;'</span>`<span class="hljs-keyword">do</span>ipcrm msg <span class="hljs-variable">$i</span><span class="hljs-built_in">echo</span> -e <span class="hljs-variable">$i</span><span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span></code></pre><p>使用方法：</p><p><img src="/img/IPC%E5%B0%8F%E5%B7%A5%E5%85%B7/1.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>SHELL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SHELL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPC机制</title>
    <link href="/2019/07/12/IPC%E6%9C%BA%E5%88%B6/"/>
    <url>/2019/07/12/IPC%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>IPC，Inter-Process Communication，进程间通信<br>ipcs : 查看当前系统的IPC机制使用情况</p></blockquote><p><img src="/img/IPC%E6%9C%BA%E5%88%B6/1.svg" srcset="/img/loading.gif" alt=""></p><p>IPC进程间通信机制的料不多，信号量是一个比较难得点，但是要根据实际项目的场景进行分析，纸上谈兵是没有意义的。</p><h3 id="通过种子文件获取KEY-L的值"><a href="#通过种子文件获取KEY-L的值" class="headerlink" title="通过种子文件获取KEY_L的值"></a>通过种子文件获取KEY_L的值</h3><p>如果各个进程都需要获取相同的IPC对象的ID，因此需要相同的KEY_L，也就是IPC秘钥，可以通过ftok函数来获取相同的key，使用方法很简单</p><ul><li>在目录下建立一个种子文件，注意不能删除这个文件</li><li>所有的进程都调用ftok，第一个参数就是这个文件的路径和名字，第二个参数调相同的值，不为0即可</li></ul><h3 id="信号量的小工具分享"><a href="#信号量的小工具分享" class="headerlink" title="信号量的小工具分享"></a>信号量的小工具分享</h3><ul><li>分享一个信号量小工具，包括了信号量的所有操作</li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-keyword">union</span> semun &#123;<span class="hljs-keyword">int</span>              val;    <span class="hljs-comment">// Value for SETVAL </span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span>    <span class="hljs-comment">// Buffer for IPC_STAT, IPC_SET </span><span class="hljs-keyword">unsigned</span> short  *<span class="hljs-built_in">array</span>;  <span class="hljs-comment">// Array for GETALL, SETALL</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seminfo</span>  *__<span class="hljs-title">buf</span>;</span>  <span class="hljs-comment">// Buffer for IPC_INFO</span>&#125;;<span class="hljs-comment">/* 创建信号量 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_creat</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> semid;semid = semget(key, <span class="hljs-number">1</span>, <span class="hljs-number">0666</span> | IPC_CREAT | IPC_EXCL);<span class="hljs-keyword">if</span> (semid == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semget error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">return</span> semid;&#125;<span class="hljs-comment">/* 删除信号量 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid)</span></span><span class="hljs-function"></span>&#123;semctl(semid, <span class="hljs-number">0</span>, IPC_RMID, <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 打开信号量 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_open</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> semid;semid = semget(key, <span class="hljs-number">1</span>, <span class="hljs-number">0666</span>);<span class="hljs-keyword">if</span> (semid == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semget error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">return</span> semid;&#125;<span class="hljs-comment">/* 设置信号量的值 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_setval</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid, <span class="hljs-keyword">int</span> val)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> ret;<span class="hljs-keyword">union</span> semun su;<span class="hljs-comment">/* 表示资源的个数 */</span>su.val = val;ret = semctl(semid, <span class="hljs-number">0</span>, SETVAL, su);<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semctl error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 获取信号量的值 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_getval</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>;val = semctl(semid, <span class="hljs-number">0</span>, GETVAL, <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">if</span> (val == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semctl error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"val : %d \n"</span>, val);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 信号量p操作 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_p</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sp</span> = &#123;</span><span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;semop(semid, &amp;sp, <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 信号量v操作 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_v</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sv</span> = &#123;</span><span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;semop(semid, &amp;sv, <span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 获取信号量权限 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_getmode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> ret;<span class="hljs-keyword">int</span> val;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> <span class="hljs-title">buf</span>;</span>ret = semctl(semid, <span class="hljs-number">0</span>, IPC_STAT, &amp;buf);<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semctl error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;val = buf.sem_perm.mode;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"mode : 0%o \n"</span>,val);<span class="hljs-keyword">return</span> val;&#125;<span class="hljs-comment">/* 设置信号量权限 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_setmode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid, <span class="hljs-keyword">int</span> mode)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> ret;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> <span class="hljs-title">buf</span>;</span>buf.sem_perm.mode = mode;ret = semctl(semid, <span class="hljs-number">0</span>, IPC_SET, &amp;buf);<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"semctl error"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -c 创建信号量\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -d 删除信号量\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -p 信号量p操作\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -v 信号量v操作\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -s&lt;val&gt; 信号量设置初始值\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -g 获取信号量的值\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -f 打开权限\n"</span>);<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"semtool -m&lt;mode&gt; 设置权限\n"</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> opt;opt = getopt(argc, argv, <span class="hljs-string">"cdpvs:gfm:"</span>);<span class="hljs-keyword">if</span> (opt == <span class="hljs-number">-1</span>)&#123;usage();<span class="hljs-built_in">exit</span>(EXIT_FAILURE);&#125;<span class="hljs-keyword">key_t</span> key;key = ftok(<span class="hljs-string">"."</span>,<span class="hljs-string">'s'</span>);<span class="hljs-keyword">int</span> semid;<span class="hljs-keyword">switch</span> (opt)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">'c'</span>:semid = sem_creat(key);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'d'</span>:semid = sem_open(key);sem_delete(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'p'</span>:semid = sem_open(key);sem_p(semid);sem_getval(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'v'</span>:semid = sem_open(key);sem_v(semid);sem_getval(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'s'</span>:semid = sem_open(key);sem_setval(semid, atoi(optarg));sem_getval(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'g'</span>:semid = sem_open(key);sem_getval(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'f'</span>:semid = sem_open(key);sem_getmode(semid);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'m'</span>:semid = sem_open(key);sem_setmode(semid, atoi(optarg));<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">'?'</span>:usage();<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>可以使用这个小工具进行信号量的创建，使用，删除，pv操作，运行结果：</p><p><img src="/img/IPC%E6%9C%BA%E5%88%B6/2.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>管道</title>
    <link href="/2019/07/11/%E7%AE%A1%E9%81%93/"/>
    <url>/2019/07/11/%E7%AE%A1%E9%81%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>管道是一种进程间通信的方式，也就是 | 符号的含义</p></blockquote><p><img src="/img/%E7%AE%A1%E9%81%93/1.svg" srcset="/img/loading.gif" alt=""><br>图片来自于xmind导出的svg格式,右键打开图片，查看大图。。。</p><p>要讲的东西不多，直接看代码</p><h3 id="父子进程通信例子"><a href="#父子进程通信例子" class="headerlink" title="父子进程通信例子"></a>父子进程通信例子</h3><p><strong>示例程序</strong></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><span class="hljs-comment">/*</span><span class="hljs-comment">int fcntl(int fd, int cmd, ... // arg  );</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> signum)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (signum == SIGPIPE)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"rcv sig %d \n"</span>,signum);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> pipefd[<span class="hljs-number">2</span>];signal(SIGPIPE, handler);<span class="hljs-comment">/* </span><span class="hljs-comment">pipefd[0] 用于读 </span><span class="hljs-comment">pipefd[1] 用于写 </span><span class="hljs-comment">*/</span>ret = pipe(pipefd);<span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)&#123;perror(<span class="hljs-string">"pipe err"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">pid_t</span> pid;pid = fork();<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"fork err"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">0</span>]);sleep(<span class="hljs-number">2</span>);<span class="hljs-built_in">write</span>(pipefd[<span class="hljs-number">1</span>], <span class="hljs-string">"childssssssssssss"</span>, <span class="hljs-number">10</span>);sleep(<span class="hljs-number">2</span>);<span class="hljs-built_in">write</span>(pipefd[<span class="hljs-number">1</span>], <span class="hljs-string">"childssssssssssss"</span>, <span class="hljs-number">10</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"child quit...\n"</span>);<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">1</span>]);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> buf[<span class="hljs-number">1024</span>];<span class="hljs-built_in">memset</span>(buf,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(buf));<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">1</span>]);<span class="hljs-comment">/*</span><span class="hljs-comment">fcntl 更改管道描述符属性为非阻塞/阻塞</span><span class="hljs-comment">*/</span><span class="hljs-keyword">int</span> flag;flag = fcntl(pipefd[<span class="hljs-number">0</span>], F_SETFL);<span class="hljs-comment">//flag |= O_NONBLOCK;</span>flag &amp;= ~O_NONBLOCK;fcntl(pipefd[<span class="hljs-number">0</span>], F_SETFL, flag);ret = <span class="hljs-built_in">read</span>(pipefd[<span class="hljs-number">0</span>], buf, <span class="hljs-keyword">sizeof</span>(buf));<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;perror(<span class="hljs-string">"read err"</span>);&#125;<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)&#123;perror(<span class="hljs-string">"read err"</span>);&#125;buf[ret] = <span class="hljs-string">'\0'</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"rcv : %s \n"</span>,buf);<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">0</span>]);wait(<span class="hljs-literal">NULL</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"parent quit...\n"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><ul><li>子进程关闭读，父进程关闭写，只能有子进程想父进程写数据</li><li>子进程向写两次数据</li><li>父进程读到第一次的数据之后关闭管道的读端，此时子进程再次写管道会接收到SIGPIPE信号，该信号默认动作是退出进程，这里注册了一个新的信号处理函数</li><li>父进程等待子进程退出，父进程退出</li></ul><h3 id="实现ls-wc-w"><a href="#实现ls-wc-w" class="headerlink" title="实现ls | wc -w"></a>实现ls | wc -w</h3><p>该命令是统计当前目录下文件和目录的单词数</p><p><img src="/img/%E7%AE%A1%E9%81%93/2.png" srcset="/img/loading.gif" alt=""></p><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment">实现 ls | wc -w</span><span class="hljs-comment">*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> ret;<span class="hljs-keyword">int</span> pipefd[<span class="hljs-number">2</span>];<span class="hljs-comment">/* pipefd[0] 用于读 pipefd[1] 用于写 */</span>ret = pipe(pipefd);<span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)&#123;perror(<span class="hljs-string">"pipe err"</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">pid_t</span> pid;pid = fork();<span class="hljs-comment">/* 子进程执行ls 写管道 */</span><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">0</span>]);<span class="hljs-comment">/* 复制管道的输出到标准输出 */</span>dup2(pipefd[<span class="hljs-number">1</span>],STDOUT_FILENO);<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">1</span>]);execlp(<span class="hljs-string">"ls"</span>, <span class="hljs-string">"ls"</span>, <span class="hljs-literal">NULL</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/* 父进程执行wc -c 读管道 */</span><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">1</span>]);<span class="hljs-comment">/* 复制管道的读到标准输入 */</span>dup2(pipefd[<span class="hljs-number">0</span>],STDIN_FILENO);<span class="hljs-built_in">close</span>(pipefd[<span class="hljs-number">1</span>]);execlp(<span class="hljs-string">"wc"</span>, <span class="hljs-string">"wc"</span>, <span class="hljs-string">"-w"</span>, <span class="hljs-literal">NULL</span>);&#125;wait(<span class="hljs-literal">NULL</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ul><li>子进程复制管道的输出替换原来的标准输出，并拉起ls程序</li><li>父进程复制管道的输入替换原来的标准输入，并拉起wc -w程序</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>socket应用编程(2)</title>
    <link href="/2019/07/11/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(2)/"/>
    <url>/2019/07/11/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(2)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍的内容是在socket应用编程(1)的基础上进行一些错误的分析，返回值的判断以及对基本的API进行封装，目的是增强服务器的鲁棒性，可以应对复杂的网络环境，理解TCP/IP的11种状态以及使用代码复现某些状态是非常关键的，可以帮助你在发送错误的时候发现问题出在了什么地方。<br>本文除了介绍socket应用编程进阶的一些知识点之外，还将介绍TCP/IP协议的11种状态<br>netstat -na | grep xxx可以查看某个端口的连接状态，xxx表示端口</p></blockquote><p><img src="/img/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(2)/1.svg" srcset="/img/loading.gif" alt=""></p><p>图片来自于xmind导出的svg格式,右键打开图片，查看大图。。。</p><h3 id="TCP-IP协议的11种状态"><a href="#TCP-IP协议的11种状态" class="headerlink" title="TCP/IP协议的11种状态"></a>TCP/IP协议的11种状态</h3><p><img src="/img/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(2)/2.png" srcset="/img/loading.gif" alt=""></p><p>TCP/IP的这11种状态的某些中间状态是TCP/IP协议栈自动推着连接往前走的，不需要上层参与，但是对于一些没有输入箭头的状态，如图中的FIN_WAIT_1等状态需要上层应用调用close才能使连接往下进行</p><p><strong>三次握手</strong></p><ul><li>TCP/IP协议需要确定双方的身份，服务器先监听套接字，客户端发起连接，会发生SYN报文到客户端，客户端返回一个SYN报文和一个应答信号给客户端，然后双方进入ESTABLSH状态，至此已经完成连接，accept从完成连接的队列里拿出连接并返回一个新的套接字</li></ul><p><strong>四次断开</strong></p><ul><li>客户端（或服务器）显式的调用close系统调用（前提是引用计数减少为0），会发送FIN报文给服务器，服务器接收到FIN报文时会返回ACK信号给客户端，同时服务器read调用会返回0，此时，客户端接收到ACK报文会到达FIN_WAIT_2状态，也就是半连接状态，客户端必须一直等服务器显式调用close之后才能进入TIME_WAIT状态，同时客户端会返回ACK信号给服务器，服务器会进入CLOSED状态，客户端的TIME_WAIT状态会持续一段时间，原因防止(ACK y+1)发送失败，便于重发。</li><li>通过read调用是否返回0来判断对方是否已经关闭，如果返回0，则调用close，关闭套接字</li></ul><p><strong>CLOSING状态</strong></p><ul><li>上图少了一种状态，就是closing状态，两端同时关闭将产生closing状态，最后双方都进入TIME_WAIT状态</li></ul><blockquote><p>socket编程对于返回值的判断十分关键，这可以精准的定位到问题所在。</p></blockquote><h3 id="select函数用法"><a href="#select函数用法" class="headerlink" title="select函数用法"></a>select函数用法</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;fd_set rfds;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">tv</span>;</span><span class="hljs-keyword">int</span> retval;<span class="hljs-comment">/* Watch stdin (fd 0) to see when it has input. */</span>FD_ZERO(&amp;rfds);FD_SET(<span class="hljs-number">0</span>, &amp;rfds);<span class="hljs-comment">/* Wait up to five seconds. */</span>tv.tv_sec = <span class="hljs-number">5</span>;tv.tv_usec = <span class="hljs-number">0</span>;retval = select(<span class="hljs-number">1</span>, &amp;rfds, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;tv);<span class="hljs-comment">/* Don't rely on the value of tv now! */</span><span class="hljs-keyword">if</span> (retval == <span class="hljs-number">-1</span>)perror(<span class="hljs-string">"select()"</span>);<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (retval)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Data is available now.\n"</span>);<span class="hljs-comment">/* FD_ISSET(0, &amp;rfds) will be true. */</span><span class="hljs-keyword">else</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"No data within five seconds.\n"</span>);<span class="hljs-built_in">exit</span>(EXIT_SUCCESS);&#125;</code></pre><ul><li>通过select管理标准输入，5s内无输入则返回,代码来自man手册示例程序。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>socket应用编程(1)</title>
    <link href="/2019/07/11/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(1)/"/>
    <url>/2019/07/11/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(1)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍tcp/ip协议的基本知识，属于入门可能还不算的知识点，但是应该是必须掌握的。</p></blockquote><p><img src="/img/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(1)/1.svg" srcset="/img/loading.gif" alt=""></p><p>最基础的知识点大概是这样，有几个部分补充一下。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>tcp/ip协议栈模型：</p><p><img src="/img/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(1)/2.png" srcset="/img/loading.gif" alt=""></p><ul><li>对等通信的概念是指服务器和客户端之间的通信只能是对等的协议层之间的通信，也就是说应用层与应用层通信，IP层与IP层通信，IP层是无法与应用层通信的</li><li>TCP/IP嵌入内核是因为网卡驱动收发大量数据的时候，切换到用户态会非常耗时，直接把TCP/IP放在内核中会减少数据传输的时间</li></ul><h3 id="TCP-IP客户端服务器基本编程模型"><a href="#TCP-IP客户端服务器基本编程模型" class="headerlink" title="TCP/IP客户端服务器基本编程模型"></a>TCP/IP客户端服务器基本编程模型</h3><p><img src="/img/socket%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B(1)/3.png" srcset="/img/loading.gif" alt=""></p><ul><li>长连接是指服务器客户端发送数据后不立马断开，而是一直保持连接状态</li><li>短连接是指服务器客户端发送数据后立马断开</li><li>具体采用哪种连接方式视情况而定</li></ul><h3 id="测试字节序与IP地址转换测试程序"><a href="#测试字节序与IP地址转换测试程序" class="headerlink" title="测试字节序与IP地址转换测试程序"></a>测试字节序与IP地址转换测试程序</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">/* 测试字节序 */</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a= <span class="hljs-number">0x12345678</span>;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *p = &amp;a;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%2x 0x%2x 0x%2x 0x%2x \n"</span>,p[<span class="hljs-number">0</span>],p[<span class="hljs-number">1</span>],p[<span class="hljs-number">2</span>],p[<span class="hljs-number">3</span>]);(p[<span class="hljs-number">0</span>]==<span class="hljs-number">0x78</span>)? <span class="hljs-built_in">printf</span>(<span class="hljs-string">"本系统是小字节序\n"</span>) : <span class="hljs-built_in">printf</span>(<span class="hljs-string">"本系统是大字节序\n"</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"字节序转换为网络字节序 ...\n"</span>);b = htonl(a);p = &amp;b;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"0x%2x 0x%2x 0x%2x 0x%2x \n"</span>,p[<span class="hljs-number">0</span>],p[<span class="hljs-number">1</span>],p[<span class="hljs-number">2</span>],p[<span class="hljs-number">3</span>]);(p[<span class="hljs-number">0</span>]==<span class="hljs-number">0x78</span>)? <span class="hljs-built_in">printf</span>(<span class="hljs-string">"网络字节序是小字节序\n"</span>) : <span class="hljs-built_in">printf</span>(<span class="hljs-string">"网络字节序是大字节序\n"</span>);<span class="hljs-comment">/* IP字符串 与 iPv4:32bit  与  in_addr 的转换 */</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">T_addr</span>;</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *ip = <span class="hljs-string">"192.168.3.123"</span>;<span class="hljs-keyword">in_addr_t</span> addr;<span class="hljs-keyword">char</span> *ip2;<span class="hljs-comment">/* 字符串转in_addr结构 */</span>inet_aton(ip,&amp;T_addr);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"ipv4 %u \n"</span>,T_addr.s_addr);<span class="hljs-comment">/* 字符串转32bit */</span>addr = inet_addr(ip);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"ipv4 %u \n"</span>,addr);<span class="hljs-comment">/* in_addr结构转字符串 */</span>ip2 = inet_ntoa(T_addr);<span class="hljs-comment">// printf("0x%x  0x%x \n",(unsigned int)ip2,(unsigned int)(&amp;T_addr));</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s \n"</span>,ip2);&#125;</code></pre><ul><li>测试结果：x86架构是小字节序，网络字节序是大字节序。。。。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号</title>
    <link href="/2019/07/11/%E4%BF%A1%E5%8F%B7/"/>
    <url>/2019/07/11/%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>信号实际上是一种软中断，如ARM的SWI指令可以产生软中断。</p></blockquote><p><img src="/img/%E4%BF%A1%E5%8F%B7/1.svg" srcset="/img/loading.gif" alt=""></p><p><strong>信号的料基本上就这么多，再提炼总结一下就是以下几点：</strong></p><ul><li><strong>signal函数和sigaction函数的对比</strong>，结论：后者传递信号的同时可以传递数据</li><li><strong>可靠信号与不可靠信号的对比</strong>，结论：前者linux内核会维护一个队列，存储所有未达的可靠信号，后者没有队列，因此易造次信号丢失</li><li><strong>信号的传递过程</strong>，内核会先检查信号阻塞状态字block，如果状态字该bit为1，linux内核则不会继续传递该信号</li><li><strong>pending状态字</strong>，即信号未决状态字，只要该信号被阻塞，pending状态字的对应bit位就会被置为1，可以通过检查该状态字，查看哪些信号被阻塞，通过对其的介绍可以知道，该状态字是由内核进行维护，应用程序是不可写可读的</li></ul><p><strong>kill -l 可以查看所有的信号，signal的默认动作和含义在man 7 signal</strong></p><p><img src="/img/%E4%BF%A1%E5%8F%B7/2.png" srcset="/img/loading.gif" alt=""></p><p>画框的信号应该要知道：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>2</td><td>SIGINT</td><td>ctrl+c退出</td></tr><tr><td>3</td><td>SIGQUIT</td><td>ctrl+\退出</td></tr><tr><td>6</td><td>SIGABRT</td><td>abort()系统调用</td></tr><tr><td>9</td><td>SIGKILL</td><td>停止进程(此信号不能被忽略或捕获)</td></tr><tr><td>10</td><td>SIGUSR1</td><td>用户定义信号1</td></tr><tr><td>12</td><td>SIGUSR2</td><td>用户定义信号2</td></tr><tr><td>13</td><td>SIGPIPE</td><td>向没有读者的管道写入数据，默认动作为退出进程，很重要</td></tr><tr><td>14</td><td>SIGALRM</td><td>警告信号</td></tr><tr><td>17</td><td>SIGCHLD</td><td>子进程已经停止或退出</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程</title>
    <link href="/2019/07/11/%E8%BF%9B%E7%A8%8B/"/>
    <url>/2019/07/11/%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文从整体上介绍linux进程的相关知识点，以及应该知道和了解的点，对于某些简单的点，会在框图下面给出解释，对于复杂的内容，会以单独的篇幅详细解释。</p></blockquote><p><img src="/img/%E8%BF%9B%E7%A8%8B/1.svg" srcset="/img/loading.gif" alt=""></p><ul><li>右键可以单独打开图片</li></ul><p>进程需要掌握的点如上图所示，左边是一些进程涉及到的知识点，右边是应知应会的一些API函数，这里边需要有几个点注意：</p><h3 id="进程地址空间"><a href="#进程地址空间" class="headerlink" title="进程地址空间"></a>进程地址空间</h3><p><img src="/img/%E8%BF%9B%E7%A8%8B/3.png" srcset="/img/loading.gif" alt=""></p><h3 id="wait返回后判断子进程退出状态"><a href="#wait返回后判断子进程退出状态" class="headerlink" title="wait返回后判断子进程退出状态"></a>wait返回后判断子进程退出状态</h3><p>这部分内容应该是man手册里面的，不应该出现在这里。。。<br><strong>示例程序</strong></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERR_EXIT(m) \</span><span class="hljs-keyword">do</span>&#123;\perror(m);\<span class="hljs-built_in">exit</span>(EXIT_FAILURE);\&#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">pid_t</span> pid;<span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> status;pid = fork();<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>)&#123;ERR_EXIT(<span class="hljs-string">"fork error :"</span>);&#125;<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this is child %d \n"</span>,getpid());<span class="hljs-built_in">exit</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//abort();</span>&#125;ret = wait(&amp;status);<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;ERR_EXIT(<span class="hljs-string">"wait error :"</span>);&#125;<span class="hljs-keyword">if</span> (WIFEXITED(status)) <span class="hljs-comment">// 正常退出</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"正常退出 : %d\n"</span>, WEXITSTATUS(status));&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFSIGNALED(status)) <span class="hljs-comment">// 异常退出</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"异常退出 : %d\n"</span>, WTERMSIG(status));&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (WIFSTOPPED(status)) <span class="hljs-comment">// 进程停止</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"进程停止 : %d\n"</span>, WSTOPSIG(status));&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h3 id="父进程等待子进程退出的问题"><a href="#父进程等待子进程退出的问题" class="headerlink" title="父进程等待子进程退出的问题"></a>父进程等待子进程退出的问题</h3><ul><li>父进程等待子进程退出有两个点需要注意一下，一是wait函数在有一个子进程返回时会立马返回，在多个子进程的情况下会导致其他的子进程没有收尸，二是wait调用的可中断睡眠，在接收到信号时，wait函数也会返回，需要作进一步判断。。。</li></ul><p><strong>示例程序</strong></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERR_EXIT(m) \</span><span class="hljs-keyword">do</span>&#123;\perror(m);\<span class="hljs-built_in">exit</span>(EXIT_FAILURE);\&#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">pid_t</span> pid;<span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> num;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"请输入子进程个数:"</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);<span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;num; i++)&#123;pid = fork();<span class="hljs-keyword">if</span>(pid == <span class="hljs-number">-1</span>)&#123;ERR_EXIT(<span class="hljs-string">"fork error :"</span>);&#125;<span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"this is child %d \n"</span>,getpid());sleep(<span class="hljs-number">1</span>);<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;&#125;<span class="hljs-comment">/* 收尸所有的僵尸进程 */</span><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;ret = wait(<span class="hljs-literal">NULL</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"子进程退出,mypid \n"</span>);<span class="hljs-keyword">if</span> (ret == <span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">if</span>(errno == EINTR)<span class="hljs-comment">// 父进程阻塞过程中可能被别的信号中断</span>&#123;<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"父进程退出 ....\n"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ul><li>父进程创建了n个子进程，子进程先退出，父进程收尸，调用wait收尸所有的子进程，在阻塞期间可能会由别的信号使wait返回，应该判断errno的值并继续等待，运行结果：</li></ul><p><img src="/img/%E8%BF%9B%E7%A8%8B/2.png" srcset="/img/loading.gif" alt=""></p><h3 id="sleep不可中断写法"><a href="#sleep不可中断写法" class="headerlink" title="sleep不可中断写法"></a>sleep不可中断写法</h3><p>sleep函数会将进程进行休眠，但是sleep函数属于可中断睡眠，在进程接收到信号之后会立刻返回，返回值为剩下的秒数，利用这个特点，可以让sleep在接收到信号之后继续睡眠，直到睡眠时间结束为止。</p><p><strong>示例程序</strong></p><pre><code class="hljs c"><span class="hljs-keyword">do</span>&#123;n = sleep(<span class="hljs-number">10</span>);<span class="hljs-comment">// 返回剩余的秒数  可中断睡眠</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"keep sleeping ... \n"</span>);&#125;<span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>);</code></pre><blockquote><p>进程里面还有一些有料的点，后面单独讲。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNIX环境编程概述</title>
    <link href="/2019/07/10/UNIX%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
    <url>/2019/07/10/UNIX%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>回头看之前写的几篇unix环境编程的博客实在是惨不忍睹，像是在记流水账。于是在精心设计好框架之后重新写一下unix环境编程的内容，毕竟这块还是比较重要的也是比较基础的。无论是做嵌入式开发还是服务器开发，无论是驱动还是应用，这块都是绕不开的。之前写的内容都重写一下，另外新加一些。<br>以后博客的内容对于基础知识框架以框图的形式一笔带过，主要的内容放在重难点或者项目实用的或者是一些好玩的东西，博客的内容尽量简短，避免长篇大论。</p></blockquote><h2 id="unix环境编程知识框架"><a href="#unix环境编程知识框架" class="headerlink" title="unix环境编程知识框架"></a>unix环境编程知识框架</h2><p><img src="/img/UNIX%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/1.svg" srcset="/img/loading.gif" alt=""></p><ul><li>unix环境编程需要掌握的大概内容如上面的图所示，适用于系统工程师，系统工程师的工作更偏向于软件的底层框架，如果你偏向于网络编程方向，那你应该更加关注socket编程。这也是各个公司在面试嵌入式软件开发时很可能会问到的问题，大概率出自这里面，对于刚毕业的应届生，一般对于linux内核实现应该会问的很少（这里我是猜的，因为我也没毕业。。。）</li><li>另外，这只是一个整体框图，对于每一个部分的内容接下来会以单独的篇幅给出，也是以框图的形式，对于难点则会另外单开一篇。宗旨不变，减少篇幅，提炼精华。</li></ul><h2 id="如何入门嵌入式开发？"><a href="#如何入门嵌入式开发？" class="headerlink" title="如何入门嵌入式开发？"></a>如何入门嵌入式开发？</h2><p>相信很多同学尤其是本科刚毕业或者没有毕业的同学，对于单片机的知识已经很熟悉了，但是又不希望于只停留在单片机的层面上（本人最开始就是这种情况），那如何进入嵌入式的领域呢？<br>首先说说我的例子，我在本科学的单片机，学习STM32,然后接触了操作系统ucosIII,本科毕业后找了一份实习，做单片机开发，刚入职也应付不了单片机的工作，后来慢慢锻炼，感觉对于单片机开发应该是轻车熟路了。后来读研，在学习给老师做项目，最开始是一个硬件的项目，因为这个画了很多PCB，刚开始画了不能用不满意，重画，打板测试，再重画，再打板，后来终于能用了，顺利交付了项目，通过这个项目也锻炼了PCB Layout的能力。后来又有了一些上位机的项目，因此又学习了QT，QT开发到现在为止我也不知道自己是什么水平，但是对于简单的UI还是能搞得定的，到这算是入门嵌入式之前。<br>后来，我买了韦东山老师的视频和开发板，开始打开嵌入式的大门，由于我有单片机和硬件的基础，地址空间的概念在学ucosIII操作系统也玩的挺明白了，因此对于第一期视频我觉得还是挺简单的，但是ARM汇编和makefile还有代码重定位还是属实给我上了一课。对于BootLoader和移植那一块的东西，我觉得能手写一个boot是最好的，对boot的理解也最到位，移植和文件系统这块我是学完了之后移植了4.9的内核到开发板上，内核版本越高移植越简单。。。<br>后来按照顺序学习第二期，我就感觉有点吃力了，对于unix环境不了解，对于内核的子系统不了解，对于用户空间和内核空间也不了解，对于shell也不懂，因此老师调用的很多API只能达到看看的程度，根本不理解，但我还是硬着头皮学完了第二期，毕竟对于内核的那些机制是不需要其他知识只需要C语言好就行了，比如输入子系统，分离分层驱动模型什么的。。。在第二期学完之后，我突然意识到这种水平是没法去做嵌入式开发的，因为只了解了某些点，知识根本不全面，因此我就开始补充应用层的知识，也就是现在所要介绍的unix环境编程，还有shell的一些基础用法，之后也会有专题介绍，等把这些都学完之后，我感觉我与内核亲切了许多，感觉自己学的很多东西现在可以连起来了，虽然对于一些机制还是不怎么了解。。。<br>总结一下从单片机转嵌入式应该是以下的顺序：</p><ul><li>unix环境编程，建立内核与应用交互的概念</li><li>shell编程，熟悉内核脚本，建立亲切感</li><li>ARM汇编，裸机开发，boot学习，内核移植等，，，</li><li>驱动框架学习</li><li>设备树</li><li>。。。</li></ul><p>为什么没有写linux入门啥的，我觉得那些东西没必要单独学，在学习其他知识的过程中会慢慢掌握，还有，嵌入式开发很考验经验，但是对于在学校的学生无法实习的，最好也能做一两个小项目练手，但是千万别沉迷于项目忘记了学习，不学习你永远不会去做更有价值的事情，你永远不会更上一个台阶。。。个人观点。。。</p><h2 id="unix环境编程入门知识"><a href="#unix环境编程入门知识" class="headerlink" title="unix环境编程入门知识"></a>unix环境编程入门知识</h2><ul><li>对于unix环境编程首先是要时时刻刻建立起内核和应用程序的关系，<strong>要从内核的角度看应用开发</strong>，各种调度的机制是内核帮我们实现的，因此程序首先要进入内核态，在内核完成调度之后再切换回用户态。</li><li>进程三态是十分重要的知识点，等待的程序不可能直接运行，要先进入就绪态，等待内核调度，内核会从就绪队列中按照调度算法拿出相应的应用程序开始运行。。。</li><li>学习方式需要强调一下，学习unix环境编程应该侧重于<strong>学习内核的机制，而不是API</strong>，<strong>API查询应该统一去man手册查询而不是任何的书籍</strong>。学习机制的好处在于对于一些不好解释的现象可以从内核的角度进行解释。。。</li></ul><p><img src="/img/UNIX%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/2.svg" srcset="/img/loading.gif" alt=""></p><p>需要了解的主要知识点都在图上了，想深入理解还是建议自己去查。在网上这么多资源中找到真正能让你理解的，这也是一种能力。。。</p><hr><p>图片是矢量图，可以右键查看大图。。。</p>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通用Makefile</title>
    <link href="/2019/06/24/%E9%80%9A%E7%94%A8Makefile/"/>
    <url>/2019/06/24/%E9%80%9A%E7%94%A8Makefile/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍一种适用于管理大型项目的通用Makefile写法，不同的项目可直接套用，分为三个部分，子目录makefile，顶层目录makefile和顶层目录的makefile.build</p></blockquote><h3 id="子目录Makefile写法"><a href="#子目录Makefile写法" class="headerlink" title="子目录Makefile写法"></a>子目录Makefile写法</h3><blockquote><p>子目录Makefile写法比较简单,如果有子目录的话加上dir/</p></blockquote><pre><code class="hljs makefile">obj-y += xxx.o<span class="hljs-comment">#进入子目录test</span>obj-y += test/</code></pre><h3 id="顶层目录Makefile写法"><a href="#顶层目录Makefile写法" class="headerlink" title="顶层目录Makefile写法"></a>顶层目录Makefile写法</h3><p>顶层目录Makefile也比较简单，主要包括以下几个功能：</p><ul><li>定义obj-y来指定根目录下要编进程序去的文件、子目录</li><li>定义工具链、编译参数、链接参数，并用export导出</li></ul><pre><code class="hljs makefile"><span class="hljs-comment">#交叉编译工具链</span>CROSS_COMPILE = <span class="hljs-comment">#编译选项</span>AS= <span class="hljs-variable">$(CROSS_COMPILE)</span>asLD= <span class="hljs-variable">$(CROSS_COMPILE)</span>ldCC= <span class="hljs-variable">$(CROSS_COMPILE)</span>gccCPP= <span class="hljs-variable">$(CC)</span> -EAR= <span class="hljs-variable">$(CROSS_COMPILE)</span>arNM= <span class="hljs-variable">$(CROSS_COMPILE)</span>nmSTRIP= <span class="hljs-variable">$(CROSS_COMPILE)</span>stripOBJCOPY= <span class="hljs-variable">$(CROSS_COMPILE)</span>objcopyOBJDUMP= <span class="hljs-variable">$(CROSS_COMPILE)</span>objdump<span class="hljs-comment"># 导出变量给子makefile使用</span><span class="hljs-keyword">export</span> AS LD CC CPP AR NM<span class="hljs-keyword">export</span> STRIP OBJCOPY OBJDUMP<span class="hljs-comment"># 编译选项</span>CFLAGS := -Wall -O2 -gCFLAGS += -I <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span>/<span class="hljs-keyword">include</span><span class="hljs-comment">#链接选项：没有链接库</span>LDFLAGS := <span class="hljs-keyword">export</span> CFLAGS LDFLAGS<span class="hljs-comment"># 导出顶层目录</span>TOPDIR := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><span class="hljs-keyword">export</span> TOPDIRobj-y += main.oobj-y += a/obj-y += b/TARGET := test<span class="hljs-comment"># make的默认目标</span><span class="hljs-comment"># 把子目录下的built-in.o文件链接成目标</span><span class="hljs-section">all:</span><span class="hljs-comment"># 进入某个目录，使用Makefile.build来编译</span>make -C ./ -f <span class="hljs-variable">$(TOPDIR)</span>/Makefile.build<span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(LDFLAGS)</span> -o <span class="hljs-variable">$(TARGET)</span> built-in.o<span class="hljs-section">clean:</span>rm -f <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find -name "*.o")</span>rm -f <span class="hljs-variable">$(TARGET)</span><span class="hljs-section">distclean:</span>rm -f <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find -name "*.o")</span>rm -f <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find -name "*.d")</span>rm -f <span class="hljs-variable">$(TARGET)</span></code></pre><h3 id="顶层目录Makefile-build写法"><a href="#顶层目录Makefile-build写法" class="headerlink" title="顶层目录Makefile.build写法"></a>顶层目录Makefile.build写法</h3><blockquote><p>顶层目录Makefile.build写法比较复杂，而且难以理解，我在代码中都给了注释</p></blockquote><p><strong>makefile的分析需要从终极目标一层一层往下分析：</strong></p><p>1 –build是第一个目标，make最终要生成这个目标<br>2 –build依赖于子目录$(subdir-y) 和当前目录的built-in.o，$(subdir-y)在之前定义，是子目录，built-in.o是当前目录的built-in.o文件，下面分别处理这两个依赖，看步骤3、4</p><pre><code class="hljs makefile">__build : $(subdir-y) built-in.o</code></pre><p>3 进入子目录，<strong>递归</strong>使用Makefile.build进行编译</p><pre><code class="hljs makefile"><span class="hljs-section">$(subdir-y):</span>make -C <span class="hljs-variable">$@</span> -f <span class="hljs-variable">$(TOPDIR)</span>/Makefile.build</code></pre><p>4 built-in.o文件，依赖于当前目录所有的.o文件$(cur_objs)和子目录的built-in.o文件$(subdir_objs)</p><pre><code class="hljs makefile">built-in.o : <span class="hljs-variable">$(cur_objs)</span> <span class="hljs-variable">$(subdir_objs)</span><span class="hljs-variable">$(LD)</span> -r -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span></code></pre><p>5 .o文件依赖于.c文件，执行Makefile文件里的CC指令</p><pre><code class="hljs makefile">%.o : %.c<span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -Wp,-MD,<span class="hljs-variable">$(dep_files)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span></code></pre><ul><li><strong>完整代码</strong></li></ul><pre><code class="hljs makefile">PHONY := __build<span class="hljs-comment"># 第一个目标</span><span class="hljs-section">__build:</span>obj-y :=subdir-y :=<span class="hljs-comment"># Makefile中含有obj-y，知道编译哪些子目录</span><span class="hljs-keyword">include</span> Makefile<span class="hljs-comment"># 子目录</span><span class="hljs-comment"># 例：obj-y := a.o b.o c/ d/,那么 subdir-y := c/ d/，那么怎么把 c/ d/取出来？</span><span class="hljs-comment"># filter 函数：obj-y中符合 %/ 形式的文件取出来 </span><span class="hljs-comment"># patsubst函数：把%/ 替换成 % </span>subdir-y:= <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %/,%,$(<span class="hljs-built_in">filter</span> %/, $(obj-y)</span>))<span class="hljs-comment"># 子目录下的built-in.o文件</span><span class="hljs-comment"># c/built-in.o d/built-in.o,取出子目录下的built-in.o文件</span>subdir_objs := <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> f,$(subdir-y)</span>,<span class="hljs-variable">$(f)</span>/built-in.o)<span class="hljs-comment"># 取出当前目录下的.o文件</span><span class="hljs-comment"># obj-y := a.o b.o c/ d/ 取出a.o b.o</span><span class="hljs-comment"># filter-out 函数：从 obj-y 中把不匹配 %/ 的文本取出来,即取出文件，过滤掉目录</span>cur_objs := <span class="hljs-variable">$(<span class="hljs-built_in">filter</span>-out %/, $(obj-y)</span>)<span class="hljs-comment"># 依赖文件，形式 .xx.o.d</span><span class="hljs-comment"># foreach : 修改cur_objs里面的.o 为 .(xx.o).d 的形式</span>dep_files := <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> f,<span class="hljs-variable">$(cur_objs)</span>,.<span class="hljs-variable">$(f)</span>.d)</span><span class="hljs-comment"># 取出已经存在的.x.o.d文件放在dep_files里面</span>dep_files := <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> <span class="hljs-variable">$(dep_files)</span>)</span><span class="hljs-comment"># 如果dep_files不为空，则包含进来</span><span class="hljs-keyword">ifneq</span> (<span class="hljs-variable">$(dep_files)</span>,)  <span class="hljs-keyword">include</span> <span class="hljs-variable">$(dep_files)</span><span class="hljs-keyword">endif</span><span class="hljs-comment"># __build 依赖于子目录和当前目录下的built-in.o</span>__build : $(subdir-y) built-in.oPHONY += $(subdir-y)<span class="hljs-comment"># 递归，进入子目录，使用Makefile.build进行编译</span><span class="hljs-section">$(subdir-y):</span>make -C <span class="hljs-variable">$@</span> -f <span class="hljs-variable">$(TOPDIR)</span>/Makefile.build<span class="hljs-comment"># built-in.o 依赖于当前目录下的.o文件 和 子目录下的built-in.o文件</span>built-in.o : <span class="hljs-variable">$(cur_objs)</span> <span class="hljs-variable">$(subdir_objs)</span><span class="hljs-variable">$(LD)</span> -r -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$^</span><span class="hljs-comment"># 延时变量</span>dep_files = .<span class="hljs-variable">$@</span>.d<span class="hljs-comment"># 生成.o文件和依赖文件</span>%.o : %.c<span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> -Wp,-MD,<span class="hljs-variable">$(dep_files)</span> -c -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span>.PHONY : <span class="hljs-variable">$(PHONY)</span></code></pre><blockquote><p>这种Makefile的写法适合项目，修改起来比较方便，可以直接套用。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Makefile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0移植4.9内核(1)</title>
    <link href="/2019/06/14/%E4%BB%8E0%E7%A7%BB%E6%A4%8D4.9%E5%86%85%E6%A0%B8(1)/"/>
    <url>/2019/06/14/%E4%BB%8E0%E7%A7%BB%E6%A4%8D4.9%E5%86%85%E6%A0%B8(1)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单说明：从搭建环境，安装虚拟机开始移植4.9内核到jz2440开发板，目的是复习Linux交叉编译环境和系统构建的过程</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装ubuntu虚拟机18-04"><a href="#安装ubuntu虚拟机18-04" class="headerlink" title="安装ubuntu虚拟机18.04"></a>安装ubuntu虚拟机18.04</h3><ul><li>下载地址</li></ul><pre><code class="hljs http"><span class="hljs-attribute">https://www.ubuntu.com/download/desktop</span></code></pre><blockquote><p>注意虚拟机的网卡需要设置为桥接模式</p></blockquote><h3 id="下载linux内核4-9"><a href="#下载linux内核4-9" class="headerlink" title="下载linux内核4.9"></a>下载linux内核4.9</h3><ul><li>下载地址</li></ul><pre><code class="hljs http"><span class="hljs-attribute">www.kernel.org</span></code></pre><ul><li>解压过程分为两步</li></ul><pre><code class="hljs bash">xz -d linux-4.9.180.tar.xztar xvf linux-4.9.180.tar</code></pre><ul><li>开启SSH服务</li></ul><pre><code class="hljs bash">sudo apt-get install openssh-server /etc/init.d/ssh start (如果没启动，手动启动)</code></pre><h3 id="安装arm-linux-gcc工具链"><a href="#安装arm-linux-gcc工具链" class="headerlink" title="安装arm-linux-gcc工具链"></a>安装arm-linux-gcc工具链</h3><ul><li>下载，解压，版本号:4.4.3</li></ul><pre><code class="hljs bash">arm-linux-gcc-4.4.3.tar.gztar -zxvf arm-linux-gcc-4.4.3.tar.gz</code></pre><ul><li>在/usr/local目录中新建文件夹，并解压</li></ul><pre><code class="hljs bash">sudo mkdir /usr/<span class="hljs-built_in">local</span>/armsudo cp * /usr/<span class="hljs-built_in">local</span>/arm -rf</code></pre><ul><li>设置环境变量</li></ul><pre><code class="hljs bash">sudo vi /etc/environment添加 /usr/<span class="hljs-built_in">local</span>/arm/bin</code></pre><h2 id="内核的配置过程分析"><a href="#内核的配置过程分析" class="headerlink" title="内核的配置过程分析"></a>内核的配置过程分析</h2><blockquote><p>在开始配置编译内核之前先来分析一下和内核编译息息相关的几个文件，Kconfig、.config、makefile，以及内核的编译过程</p></blockquote><ul><li>Linux内核配置有2中不同的方法，make menuconfig是最常用的方法，本文重点分析make menuconfig的过程，这三种方法殊途同归。</li></ul><pre><code class="hljs bash">make .config / make xxx_defconfigmake menuconfig</code></pre><h3 id="makefile-Kconfig-config之间的关系"><a href="#makefile-Kconfig-config之间的关系" class="headerlink" title="makefile/Kconfig/.config之间的关系"></a>makefile/Kconfig/.config之间的关系</h3><blockquote><p>Makefile ：编译源文件的方法<br>Kconfig: 文本文件，内核的配置菜单，提供所有的配置选项<br>.config: 编译内核所依据的配置,菜单里选中的菜     </p></blockquote><p><strong>Makefile：(drivers/Makefile)</strong></p><pre><code class="hljs makefile">/* 直接编译 */obj-y+= cdrom/obj-y+= auxdisplay//* 条件编译：根据.config的CONFIG_XXX来决定是否编译 *//* CONFIG_XXX变量的取值是通过.config文件来集中赋值的 */obj-<span class="hljs-variable">$(CONFIG_PCCARD)</span>+= pcmcia/obj-<span class="hljs-variable">$(CONFIG_DIO)</span>+= dio//* 条件编译：只有make modules才会被编译 */obj-m+= cdrom/</code></pre><p><strong>Kconfig</strong><br>— 决定make menuconfig时展示的菜单项</p><ul><li>示例(drivers/leds/Kconfig）</li></ul><pre><code class="hljs makefile">config LEDS_S3C24XXtristate <span class="hljs-string">"LED Support for Samsung S3C24XX GPIO LEDs"</span>depends on LEDS_CLASSdepends on ARCH_S3C24XXhelpThis option enables support for LEDs connected to GPIO lineson Samsung S3C24XX series CPUs, such as the S3C2410 and S3C2440.config ： 关键字，表示一个配置选项的开始tristate : 显示为&lt; &gt;,<span class="hljs-string">"LED Support for Samsung S3C24XX GPIO LEDs"</span>:make menuconfig 时显示的配置项名称，表示是否编译进内核，y/m/nbool：显示为[]，即无法配置成模块dependon ： 该选项依赖于另一个选项，只有依赖项被选中时，才能配置当前项select ： 反向依赖，该项选中时，同时选中select后面定义的那一项<span class="hljs-section">help: 帮助信息</span>source：source <span class="hljs-string">"arch/$SRCARCH/Kconfig"</span> --- (顶层makefile) ： 目录层次迭代，使各个目录管理自己的配置内容。</code></pre><p><strong>.config</strong></p><ul><li><p>内核编译参考文件，查看里面内容可以知道哪些驱动被编译进内核</p></li><li><p>Kconfig提供了编译选项，.config提供当前选中了哪些选项，在make menuconfig的时候修改的选项在保存后会同步到.config文件中</p></li><li><p>– 不建议直接修改.config</p></li></ul><p><strong>总结：三者之间的关系</strong></p><ul><li>makefile里面的条件编译的选项都是在.config里面集中定义的</li><li>Kconfig在make menuconfig的时候提供界面的选项，.config提供当前选中的选项，前者相当于菜单，后者相当于选中的菜，makefile就是炒这些菜的方法</li><li>make menuconfig 修改时会更新.config里面的配置项</li></ul><h3 id="make-menuconfig过程分析"><a href="#make-menuconfig过程分析" class="headerlink" title="make menuconfig过程分析"></a>make menuconfig过程分析</h3><p><strong>涉及到的文件：</strong></p><blockquote><p>1 Linux内核根目录下的scripts文件夹<br>2 arch/$ARCH/Kconfig文件、各层目录下的Kconfig文件<br>3 Linux内核根目录下的makefile文件、各层目录下的makefile文件<br>4 Linux内核根目录下的的.config文件、arm/$ARCH/下的config文件<br>5 Linux内核根目录下的 include/generated/autoconf.h文件</p></blockquote><p><strong>1 读取scripts文件夹中，存放的是make menuconfig 配置界面相关的文件</strong><br></p><p><strong>2 读取arch/$ARCH/Kconfig以及各子目录下的Kcondig ，生成配置条目</strong></p><pre><code class="hljs bash"><span class="hljs-variable">$ARCH</span> 由根目录下的makefile决定：257 ARCH?= arm258 CROSS_COMPILE?= arm-linux-Kconfig文件中为配置信息的宏定义，与我们在make menuconfig图形界面看到的信息一致</code></pre><p><strong>3 读取内核目录下的.config文件，生成配置选项:[*]编译进内核 [M]编译为模块 []不编译</strong> </p><pre><code class="hljs bash">arch/arm/configs ： 存放了一些配置模板可以通过cp /arch/arm/configs/xx_defconfig .config来使用这些配置模板 通过图形界面变更配置选项会自动更新到.config文件中 make disclean 会删除.config</code></pre><p><strong>4 编译过程根据.config生成 Linux内核根目录下的 include/config/auto.conf文件</strong></p><pre><code class="hljs makefile">CONFIG_EEPROM_93CX6=m CONFIG_DM9000=y 根目录Makefile以及子目录的Makefile根据auto.conf生成编译条件 obj-<span class="hljs-variable">$(CONFIG_DM9000)</span> += dm9000.o //obj-m += dm9000.o</code></pre><p><strong>5 编译过程根据.config生成Linux内核根目录下的 include/linux/autoconf.h文件</strong></p><pre><code class="hljs makefile">.config 或 auto.conf 中定义要编译为 m 模块的项，如： CONFIG_DEBUG_NX_TEST=m 在 autoconf.h 中会被定义为： <span class="hljs-comment">#define CONFIG_DEBUG_NX_TEST_MODULE 1 </span>.config或auto.conf 中定义为编译为 y 的选项,如： CONFIG_DM9000= y 在 autoconf.h 中会被定义为： <span class="hljs-comment">#define CONFIG_DM9000 1 </span>autoconf.h中是站在源码的角度，供源码使用的C语言宏定义。</code></pre><p><strong>总结</strong></p><pre><code class="hljs css">1 确定架构<span class="hljs-selector-tag">arch</span>，读取<span class="hljs-selector-tag">arch</span>目录的<span class="hljs-selector-tag">Kconfig</span>中的配置，生成编译条目2 读取内核根目录下的<span class="hljs-selector-class">.config</span>选项，将配置信息显示在图像界面上<span class="hljs-selector-attr">[*]</span> <span class="hljs-selector-attr">[M]</span> <span class="hljs-selector-attr">[]</span>3 图像界面的改动会自动保存到<span class="hljs-selector-class">.config</span>文件中4 编译过程根据<span class="hljs-selector-class">.config</span>形成<span class="hljs-selector-tag">auto</span><span class="hljs-selector-class">.config</span>,它决定了<span class="hljs-selector-tag">makefile</span>中各个文件的编译类型<span class="hljs-selector-tag">auto</span><span class="hljs-selector-class">.config</span> 相对于<span class="hljs-selector-class">.config</span>少了注释和增加了一些变量，顶层目录下的<span class="hljs-selector-tag">makefile</span>包含<span class="hljs-selector-tag">auto</span><span class="hljs-selector-class">.conf</span>文件5 编译时生成<span class="hljs-selector-tag">autoconfig</span><span class="hljs-selector-class">.h</span>,以<span class="hljs-selector-tag">C</span>语言宏的形式表达个各个文件是否被编译，源码中  会判断某文件是否被编译进行不同的处理。</code></pre><h2 id="配置编译内核"><a href="#配置编译内核" class="headerlink" title="配置编译内核"></a>配置编译内核</h2><pre><code class="hljs makefile">/*修改顶层makefile*/257 ARCH?= arm258 CROSS_COMPILE?= arm-linux-/* 复制默认的配置文件到顶层文件目录下的.config文件 */cd /work/sys/linux-4.9.180/arch/arm/configscp  s3c2410_defconfig  /work/sys/linux-4.9.180/.config/* 安装缺少的库 */sudo apt-get install libc6-devsudo apt-get install libncurses5-dev libncursesw5-dev/* 配置,裁剪内核  */make menuconfigmake uImage出现错误 ：/usr/local/arm/bin/arm-linux-gcc: 15: exec: /usr/local/arm/bin/.arm-none-linux-gnueabi-gcc: not found原因：64位的系统缺少32位的库根据错误提示安装32位的库：sudo apt-get install lib32z1sudo apt-get install lib32stdc++6再次make uImage <span class="hljs-section">错误：arch/arm/boot/Makefile:79: recipe for target 'arch/arm/boot/uImage' failed</span>解决：sudo apt-get install u-boot-tools再次make uImage ,即可编译通过Image Name:   Linux-4.9.180<span class="hljs-section">Created:      Sun Jun  9 23:09:38 2019</span>Image Type:   ARM Linux Kernel Image (uncompressed)Data Size:    3150272 Bytes = 3076.44 KiB = 3.00 MiBLoad Address: 30108000Entry Point:  30108000下载内核到开发板上：tftp 30000000 uImagebootm 30000000可以打印出内核信息，但是并不能正常启动内核，因此需要修改内核</code></pre><h2 id="修改内核"><a href="#修改内核" class="headerlink" title="修改内核"></a>修改内核</h2><p><strong>设置机器ID</strong>        </p><pre><code class="hljs makefile"><span class="hljs-section">Error: unrecognized/unsupported machine ID (r1 = 0x000000c1).</span>Available machine support:ID (hex)        NAME000002de        Simtec-Anubis00000707        AT2440EVB000007cf        MINI2440000002a9        NexVision - Nexcoder 24400000034a        Simtec-OSIRIS00000250        IPAQ-RX37150000016a        SMDK2440设置：上面是.config文件中配置成y的机器类型：因此set machid 选择单板和其中最相近的一个单板即可。uboot设置机器ID参数  set machid 0x16a;save</code></pre><p><strong>修改时钟</strong>    </p><pre><code class="hljs c">linux<span class="hljs-number">-4.9</span><span class="hljs-number">.180</span>/arch/arm/mach-s3c24xx$ vi mach-smdk2440.c<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __init <span class="hljs-title">smdk2440_init_time</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//s3c2440_init_clocks(16934400);</span>s3c2440_init_clocks(<span class="hljs-number">12000000</span>);samsung_timer_init();&#125;</code></pre><p><strong>修改MTD分区</strong></p><pre><code class="hljs c">与uboot里面设置的一样arch\arm\mach-s3c24xx\common-smdk.c<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mtd_partition</span> <span class="hljs-title">smdk_default_nand_part</span>[] = &#123;</span>[<span class="hljs-number">0</span>] = &#123;.name= <span class="hljs-string">"u-boot"</span>,.<span class="hljs-built_in">size</span>= SZ_256K,.offset= <span class="hljs-number">0</span>,&#125;,[<span class="hljs-number">1</span>] = &#123;.name= <span class="hljs-string">"params"</span>,.offset = MTDPART_OFS_APPEND,.<span class="hljs-built_in">size</span>= SZ_128K,&#125;,[<span class="hljs-number">2</span>] = &#123;.name= <span class="hljs-string">"kernel"</span>,.offset = MTDPART_OFS_APPEND,.<span class="hljs-built_in">size</span>= SZ_4M,&#125;[<span class="hljs-number">3</span>] = &#123;.name= <span class="hljs-string">"rootfs"</span>,.offset = MTDPART_OFS_APPEND,.<span class="hljs-built_in">size</span>= MTDPART_SIZ_FULL,&#125;&#125;;</code></pre><p>下载内核并启动，nandflash已经正确显示分区，看到内核panic信息：mount root 错误，没有挂接到正确的文件系统</p><pre><code class="hljs c">VFS: Cannot <span class="hljs-built_in">open</span> root device <span class="hljs-string">"mtdblock3"</span> <span class="hljs-keyword">or</span> unknown-block(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>): error <span class="hljs-number">-6</span></code></pre><p>原因可能是：</p><blockquote><p>1 MTD分区和boot的分区对不上,找不到根文件系统<br>2 nand flash中对应的位置没有根文件系统<br>3 命令行参数设置的不对<br>4 内核中没有对应的文件系统</p></blockquote><pre><code class="hljs c">由于uboot设置的nandflash分区内核部分为<span class="hljs-number">2</span>M,而<span class="hljs-number">4.9</span>的内核大于<span class="hljs-number">2</span>M,因此需要修改uboot的nandflash分区修改uboot2012:<span class="hljs-number">1</span> 修改分区 /include/configs/smdk2440.h<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MTDPARTS_DEFAULT        <span class="hljs-meta-string">"mtdparts=jz2440-0:256k(u-boot),"</span>       \</span>                                    <span class="hljs-string">"128k(params),"</span>         \                                    <span class="hljs-string">"4m(kernel),"</span>   \                                    <span class="hljs-string">"-(rootfs)"</span>             \重新 make</code></pre><p>2 u-boot nandflash 操作方法介绍</p><pre><code class="hljs c">烧写u-boot:tftp <span class="hljs-number">30000000</span> u-boot.bin; protect off all; erase <span class="hljs-number">0</span> <span class="hljs-number">0x3ffff</span>; cp.b <span class="hljs-number">30000000</span> <span class="hljs-number">0</span> <span class="hljs-number">40000</span>tftp烧写内核到nandflash:tftp <span class="hljs-number">30000000</span> uImagenand erase.part kernelnand <span class="hljs-built_in">write</span> <span class="hljs-number">30000000</span> kerneltftp烧写jffs文件系统：tftp <span class="hljs-number">30000000</span> fs_mini_mdev.jffs2nand erase.part rootfs/                        目标地址  大小/nand <span class="hljs-built_in">write</span>.jffs2 <span class="hljs-number">30000000</span> <span class="hljs-number">260000</span> <span class="hljs-number">5b</span>89a8<span class="hljs-built_in">set</span> boota rgs console=ttySAC0 root=/dev/mtdblock3 rootfstype=jffs2tftp烧写yaffs文件系统：  tftp <span class="hljs-number">30000000</span> fs_qtopia.yaffs2nand erase.part rootfs/                        目标地址  大小/nand <span class="hljs-built_in">write</span>.yaffs <span class="hljs-number">30000000</span> <span class="hljs-number">260000</span> <span class="hljs-number">889b</span>c0</code></pre><blockquote><p>到此为止，内核和u-boot需要修改的部分以及修改完成，下一步制作最小根文件系统</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux系统构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0移植4.9内核(2)</title>
    <link href="/2019/06/14/%E4%BB%8E0%E7%A7%BB%E6%A4%8D4.9%E5%86%85%E6%A0%B8(2)/"/>
    <url>/2019/06/14/%E4%BB%8E0%E7%A7%BB%E6%A4%8D4.9%E5%86%85%E6%A0%B8(2)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单说明：从搭建环境，安装虚拟机开始移植4.9内核到jz2440开发板，目的是复习Linux交叉编译环境和系统构建的过程</p></blockquote><h2 id="构建最小根文件系统"><a href="#构建最小根文件系统" class="headerlink" title="构建最小根文件系统"></a>构建最小根文件系统</h2><blockquote><p>根文件系统和文件系统的区别：<br>文件系统是对一个存储设备上的数据进行组织的机制，这种机制有利于用户和操作系统交互<br>根文件系统是一种文件系统,不仅具有普通文件系统存储数据文件的功能,还是内核启动mount<br>的第一个文件系统</p></blockquote><h3 id="Linux进程启动分析"><a href="#Linux进程启动分析" class="headerlink" title="Linux进程启动分析"></a>Linux进程启动分析</h3><ul><li>内核源码分析：init/main.c</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> noinline <span class="hljs-title">init_post</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"><span class="hljs-comment">/* 创建标准输入,标准输出,标准错误 */</span></span><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(sys_open((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user *) <span class="hljs-string">"/dev/console"</span>, O_RDWR, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>)</span></span><span class="hljs-function"><span class="hljs-title">printk</span><span class="hljs-params">(KERN_WARNING <span class="hljs-string">"Warning: unable to open an initial console.\n"</span>)</span></span>;(<span class="hljs-keyword">void</span>) sys_dup(<span class="hljs-number">0</span>);(<span class="hljs-keyword">void</span>) sys_dup(<span class="hljs-number">0</span>);<span class="hljs-comment">/* execute_command 在 boot命令行参数中设置为 init=/linuxrc */</span><span class="hljs-keyword">if</span> (execute_command) <span class="hljs-comment">/* 启动第一个程序,是死循环，不会退出 */</span>run_init_process(execute_command);&#125;<span class="hljs-comment">/* 第一个应用程序一般是execute_command 或者是"/sbin/init",一般不会调用到后面的 */</span>run_init_process(<span class="hljs-string">"/sbin/init"</span>);run_init_process(<span class="hljs-string">"/etc/init"</span>);run_init_process(<span class="hljs-string">"/bin/init"</span>);run_init_process(<span class="hljs-string">"/bin/sh"</span>);</code></pre><p><strong>init程序的执行过程 ：（配置文件/etc/inittab）</strong></p><blockquote><p>1 读取配置文件<br>2 解析配置文件<br>    2.1 配置文件指定应用程序<br>    2.2 指定何时执行<br>3 执行用户程序</p></blockquote><p><strong>init程序就是busybox</strong><br><strong>linuxrc 和 /sbin/init 都是busybox的链接，都指向 /bin/busybox</strong><br>busybox根据<strong>/etc/inittab</strong>里面的项进行系统初始化，最后执行 <strong>/etc/init.d/rcS</strong> 脚本<br><strong>busybox 的 执行顺序：/sbin/init &gt; /etc/inittab &gt; /etc/init.d/rcS</strong></p><ul><li>/etc/inittab 格式 —根据busybox的文档inittab</li></ul><pre><code class="hljs c">&lt;id&gt;:&lt;runlevels&gt;:&lt;action&gt;:&lt;<span class="hljs-built_in">process</span>&gt;<span class="hljs-number">1</span> id =&gt; /dev/id   用作终端：<span class="hljs-built_in">stdin</span>,<span class="hljs-built_in">stdout</span>... 可以省略<span class="hljs-number">2</span> runlevels ： 忽略<span class="hljs-number">3</span> action ： 执行时机，  sysinit,respawn,askfirst,wait,once,restart,ctrlaltdel,<span class="hljs-built_in">shutdown</span><span class="hljs-number">4</span> <span class="hljs-built_in">process</span> ： 应用程序或脚本</code></pre><p><strong>由此可以推出：init程序需要准备东西(即最小根文件系统)</strong></p><blockquote><p>1 /dev/console  /dev/null</p></blockquote><blockquote><p>2 /etc/inittab 文件 </p></blockquote><blockquote><p>3 配置文件里指定的应用程序</p></blockquote><blockquote><p>4 C库(glibc)</p></blockquote><blockquote><p>5 init程序本身，来源于busybox</p></blockquote><h3 id="制作最小根文件系统"><a href="#制作最小根文件系统" class="headerlink" title="制作最小根文件系统"></a>制作最小根文件系统</h3><h4 id="配置，编译busybox"><a href="#配置，编译busybox" class="headerlink" title="配置，编译busybox"></a>配置，编译busybox</h4><p>下载链接 ： <a href="https://busybox.net/downloads/" target="_blank" rel="noopener">https://busybox.net/downloads/</a><br>下载版本：1.20.0</p><p>配置安装方法：查看INSTALL文件</p><pre><code class="hljs bash">make menuconfig     <span class="hljs-comment"># This creates a file called ".config"</span>make                <span class="hljs-comment"># This creates the "busybox" executable</span>make install        <span class="hljs-comment"># or make CONFIG_PREFIX=/path/from/root install</span></code></pre><p>解压</p><pre><code class="hljs bash">tar xjf busybox-1.20.0.tar.bz2</code></pre><p>配置</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> busybox-1.20.0.tar.bz2make menuconfig 完成后保存，因为需要生成.config配置文件</code></pre><p>设置交叉编译工具链：</p><pre><code class="hljs bash">vi MakefileCROSS_COMPILE ?=arm-linux-</code></pre><p>编译</p><pre><code class="hljs bash">make</code></pre><p>安装</p><pre><code class="hljs bash">创建安装的文件夹，-p表示递归创建sudo mkdir /work/nfs_root/first_fs -p安装,安装有错误要修改文件夹的权限make CONFIG_PREFIX=/work/nfs_root/first_fs install查看文件夹，已经创建了相应的目录了:zhanghui@ubuntu:/work/nfs_root/first_fs$ lsbin  linuxrc  sbin  usr</code></pre><h4 id="构建最小根文件系统：（按照init进程分析的结果）"><a href="#构建最小根文件系统：（按照init进程分析的结果）" class="headerlink" title="构建最小根文件系统：（按照init进程分析的结果）####"></a>构建最小根文件系统：（按照init进程分析的结果）####</h4><p><strong>1 创建/dev/console  /dev/null设备节点</strong></p><pre><code class="hljs bash">mkdir dev// 查看虚拟机的 /dev/console /dev/null 节点信息：zhanghui@ubuntu:/work/nfs_root/first_fs/dev$ ls /dev/console /dev/null -lcrw------- 1 root root 5, 1 Jun 12 00:26 /dev/consolecrw-rw-rw- 1 root root 1, 3 Jun 12 00:24 /dev/null//创建设备节点，字符设备/主/次设备号sudo mknod console c 5 1 sudo mknod null c 1 3</code></pre><p><strong>2 创建/etc/inittab</strong></p><pre><code class="hljs bash">mkdir etcvi inittabconsole::askfirst:-/bin/sh</code></pre><p><strong>3 安装C库</strong>    </p><pre><code class="hljs bash">C库的位置在：zhanghui@ubuntu:/work/sys/opt/FriendlyARM/toolschain/4.4.3/lib$ lsgcc            libcloog.so.0.0.0  libgmpxx.la        libmpc.la        libmpfr.so        libmp.so.3       libppl_c.so.2.1.0  libpwl.laldscripts      libgmp.la          libgmpxx.so        libmpc.so        libmpfr.so.1      libmp.so.3.1.14  libppl.la          libpwl.solibcloog.la    libgmp.so          libgmpxx.so.4      libmpc.so.2      libmpfr.so.1.2.2  libppl_c.la      libppl.so          libpwl.so.4libcloog.so    libgmp.so.3        libgmpxx.so.4.1.0  libmpc.so.2.0.0  libmp.la          libppl_c.so      libppl.so.7        libpwl.so.4.0.0libcloog.so.0  libgmp.so.3.5.0    libiberty.a        libmpfr.la       libmp.so          libppl_c.so.2    libppl.so.7.1.0创建lib目录：mkdir /work/nfs_root/first_fs/lib拷贝C库到lib目录：cp *.so* /work/nfs_root/first_fs/lib -d</code></pre><p><strong>4 指定应用程序</strong><br> — 没有应用程序</p><p><strong>5 完善最小根文件系统</strong></p><pre><code class="hljs bash">创建proc文件系统  mkdir proc在/etc/inittab中加上：::sysinit:/etc/init.d/rcS再创建init.d/rcS脚本文件mkdir init.dvi rcS   sudo chmod +x rcS// 自动挂载proc文件系统mount -t  proc none /proc 另外一种方法：vi rcS<span class="hljs-comment">#mount -t  proc none /proc </span>mount -a  mount -a 依赖于/etc/fstab创建fstab, vi fstab  添加 proc     /proc     proc   defaults  0      0</code></pre><ul><li>fstab的格式： 执行mount -a 后将挂接proc tmpfs 文件系统</li></ul><pre><code class="hljs bash"><span class="hljs-comment"># device mount-pount type  options   dump  fsck order </span>  proc     /proc     proc   defaults  0      0  tmpfs    /tmp      tmpfs  defaults  0      0</code></pre><p><strong>6 增加udev机制(自动创建设备节点)</strong></p><p>— busybox里面的简化版本 mdev</p><pre><code class="hljs bash">mkdir sysvi etc/fstab添加：sysfs    /sys   sysfs  defaults  0  0tmpfs    /dev   tmpfs  defaults  0  0vi etc/init.d/rcS添加：mkdir /dev/ptsmount -t devpts devpts /dev/pts<span class="hljs-built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplugmdev -s</code></pre><h2 id="制作根文件系统映像文件"><a href="#制作根文件系统映像文件" class="headerlink" title="制作根文件系统映像文件"></a>制作根文件系统映像文件</h2><h3 id="制作yaffs2文件系统"><a href="#制作yaffs2文件系统" class="headerlink" title="制作yaffs2文件系统"></a>制作yaffs2文件系统</h3><ul><li>制作工具 </li></ul><pre><code class="hljs bash">yaffs_source_util_larger_small_page_nand.tar.bz2 （韦东山）tar xjf yaffs_source_util_larger_small_page_nand.tar.bz2<span class="hljs-built_in">cd</span> /work/sys/Development_util_ok/yaffs2/utils(里面含有makefile)make</code></pre><ul><li>编译结果：</li></ul><pre><code class="hljs bash">zhanghui@ubuntu:/work/sys/Development_util_ok/yaffs2/utils$ ls -ltotal 144-rw------- 1 zhanghui zhanghui  1770 Jul  7  2008 Makefile-rwxrwxr-x 1 zhanghui zhanghui 22768 Jun 12 01:22 mkyaffs2image-rw------- 1 zhanghui zhanghui 19669 Jul  7  2008 mkyaffs2image.c-rw-rw-r-- 1 zhanghui zhanghui 12408 Jun 12 01:22 mkyaffs2image.o-rwxrwxr-x 1 zhanghui zhanghui 18496 Jun 12 01:22 mkyaffsimage-rw------- 1 zhanghui zhanghui 16206 Feb 28  2008 mkyaffsimage.c-rw-rw-r-- 1 zhanghui zhanghui 11160 Jun 12 01:22 mkyaffsimage.o... ...我们使用 mkyaffs2image 这个工具拷贝到系统目录：sudo cp mkyaffs2image /usr/<span class="hljs-built_in">local</span>/bin/sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/mkyaffs2image切换到最小根文件系统目录的上一级：<span class="hljs-built_in">cd</span> /work/nfs_root/创建映像：/* 目录    名称  */ mkyaffs2image first_fs first_fs.yaffs2 创建成功：zhanghui@ubuntu:/work/nfs_root$ lsfirst_fs  first_fs.yaffs2</code></pre><h3 id="制作jffs2文件系统"><a href="#制作jffs2文件系统" class="headerlink" title="制作jffs2文件系统"></a>制作jffs2文件系统</h3><ul><li>u-boot 命令行参数设置</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">set</span> bootargs noinitrd console=ttySAC0,115200 root=/dev/mtdblock3 rootfstype=jffs2 init=/linuxrc</code></pre><ul><li>制作jffs2文件系统</li></ul><pre><code class="hljs bash">工具：mtd-utils-05.07.23.tar.bz2zlib-1.2.3.tar.gz解压tar xzf zlib-1.2.3.tar.gz配置./configure --shared --prefix=/usr编译 安装makesudo make install解压tar xjf mtd-utils-05.07.23.tar.bz2<span class="hljs-built_in">cd</span> mtd-utils-05.07.23/util/makesudo make install 制作：<span class="hljs-built_in">cd</span> /work/nfs_root/mkfs.jffs2 -n -s 2048 -e 128KiB -d first_fs -o  first_fs.jffs2</code></pre><h2 id="搭建NFS文件系统"><a href="#搭建NFS文件系统" class="headerlink" title="搭建NFS文件系统"></a>搭建NFS文件系统</h2><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><pre><code class="hljs bash">1 安装nfs文件系统sudo apt-get install nfs-kernel-serversudo vi /etc/exports 添加：/work/nfs_root/first_fs  192.168.3*(rw,sync,no_subtree_check)sudo service portmap restartsudo service nfs-kernel-server restart2 虚拟机允许：sudo vi /etc/exports添加网络文件系统目录3 本地挂载sudo mount -t nfs -o nolock 192.168.3.61:/work/nfs_root/first_fs /mnt</code></pre><h3 id="单板"><a href="#单板" class="headerlink" title="单板"></a>单板</h3><pre><code class="hljs bash">1 手动挂载：mount -t nfs -o nolock 192.168.1.19:/work/nfs_root/first_fs /mnt2 直接从NFS启动：设置启动参数1 服务器IP2 设置自己的IP命令行格式：参考内核文档 ：Documentation/filesystems/nfs/nfsroot.txtroot=/dev/nfsnfsroot=[&lt;server-ip&gt;:]&lt;root-dir&gt;[,&lt;nfs-options&gt;] ip=&lt;client-ip&gt;:&lt;server-ip&gt;:&lt;gw-ip&gt;:&lt;netmask&gt;::eth0:offgw-ip ：网关，随便写netmask ： 子网掩码  255.255.255.0</code></pre><h2 id="下载文件系统并测试"><a href="#下载文件系统并测试" class="headerlink" title="下载文件系统并测试"></a>下载文件系统并测试</h2><blockquote><p>至此,应该做的准备工作已经全部做完，现在验证内核是否能成功启动（实际移植顺序应该是边移植边验证）</p></blockquote><p>1 内核本身不支持yaffs2文件系统，因此yaffs2文件系统暂时不支持<br>2 网卡驱动还没有移植，因此NFS文件系统还不能用<br>3 因此，首先使用jffs2验证</p><ul><li>过程中遇到的一些错误及其处理</li></ul><pre><code class="hljs bash">1 注意最小文件系统的lib库需要复制/opt/FriendlyARM/toolschain/4.4.3/arm-none-linux-gnueabi/lib里面的库文件arm-none-linux-gnueabi 是新的工具链2 配置内核增加EABI接口：make menuconfigKernel Features ---&gt;        [*] Use the ARM EABI to compile the kernel        [*] Allow old ABI binaries to run with this kernel (EXPERIMENTAL)EABI简介：ABI 指的是应用程序二进制接口，类比及API，ABI是二进制级别的兼容。  E指的是Embedded，嵌入的好处：支持软件浮点和硬件实现浮点功能混用系统调用的效率更高后今后的工具更兼容软件浮点的情况下，EABI的软件浮点的效率要比OABI高很多3 无法创建节点错误：can<span class="hljs-string">'t open /dev/ttySAC0: No such file or directory</span><span class="hljs-string">解决方法：</span><span class="hljs-string">make menuconfig 搜索 DEVTMPFS 把相关自动创建节点的配置项设置为Y即可</span></code></pre><ul><li>到现在为止，内核已经成功启动！</li></ul><pre><code class="hljs bash">/ <span class="hljs-comment"># ls</span>bin      etc      linuxrc  sbin     tmpdev      lib      proc     sys      usr/ <span class="hljs-comment">#</span></code></pre><ul><li>接下来，</li></ul><blockquote><p>1 移植DM9000网卡驱动，挂载NFS文件系统<br>2 移植yaffs文件系统<br>3 移植LCD驱动</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux系统构建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux系统构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-哈希表</title>
    <link href="/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C/"/>
    <url>/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<p><strong>哈希表，又称散列表，通过键-值对(key-indexed)的方式将数据存储在一片连续的内存中，注意哈希表的结构是数组结构（连续存储区域）</strong></p><blockquote><p>这里解释一下什么是健和值，健相当于数组中的值，值就是数组的下标index，哈希也就是把数组的值和数组的下标建立起了一定的关系，一般是通过值直接确定下标。    </p></blockquote><ul><li>那么哈希表是用来做什么的呢？      </li><li>答：最适合解决的问题是   <strong>查找与给定值相等的记录</strong>，并且可以*<em>快速插入 *</em></li></ul><p>也就是说，我可以通过我知道的这个值，快速的确定这个数组里面有没有这个值，而且这个速度是比二分法查找等算法快得多的，它的算法复杂度一直为O(1).</p><ul><li>那么是怎么通过数组链的值（健）找到对应的数组下标（值）的呢?</li><li>答：健和值之间有一个转换函数，叫做<strong>哈希函数</strong>或者叫<strong>散列函数</strong>，index = F(key)，输入key,即可算出key在<strong>散列表</strong>（哈希表）中的索引</li></ul><p>散列表查找步骤：</p><ul><li>存储时，通过哈希函数计算散列地址，并按照此散列地址记录   </li><li>查找记录时，通过<strong>同样的散列函数</strong>计算散列地址</li></ul><blockquote><p>哈希是一种存储方法，也是一种查找方法</p></blockquote><p>哈希表查找需要注意两个问题：</p><ul><li><p>1 散列函数的选取，有很多种选取的方法，本文的例子是最常用的<strong>除留余数法</strong>，<strong>index = key % p (p &lt;= HASHSIZE)</strong>,p的取值等于或小于哈希表的长度。<br>一个好的哈希函数，可以使得不同的数据会产生更多不同的索引，便于存储</p></li><li><p>2 如果不同的数据产生了相同的索引，那就需要采用新的办法来处理这个问题，一般是有三种方法      </p></li></ul><p><strong>开放定址法</strong>，即<strong>f`(key) = (f(key)+d) % HASHSIZE</strong>，哈希函数得到的数据索引中已经有值的时候，对这个addr进行上述操作，d取值为1…(HASHSIZE-1)<br><strong>再散列函数</strong>，<strong>f(key)=RH(key)(1=1 ,2,…,k)</strong>,RH为不同的散列函数<br><strong>链地址法</strong>，在当前的位置增加一个链表节点，存储相同索引的不同数据即可</p><ul><li>散列表的结构，elem是一个动态数组的首地址，count是数据个数</li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HASHSIZE 12</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NO_DATA -12345</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">HashTable</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> *elem;<span class="hljs-keyword">int</span> count;&#125;HashTable,*HashTable_ptr;<span class="hljs-comment">// 散列表首地址 + 散列表数据个数</span></code></pre><ul><li>初始化散列表</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 初始化散列表 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_HashTable</span><span class="hljs-params">(HashTable_ptr H)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i;H-&gt;elem = <span class="hljs-built_in">malloc</span>(HASHSIZE * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;HASHSIZE;i++)&#123;H-&gt;elem[i] = NO_DATA;&#125;&#125;</code></pre><ul><li>插入值到散列表,就是上述的第一步操作，按照散列函数的方式将值插入到散列表中，对于冲突问题，这里采取的是开放定址法</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 插入key到散列表 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inset_HashTable</span><span class="hljs-params">(HashTable_ptr H,<span class="hljs-keyword">int</span> key)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> addr = HASH(key);<span class="hljs-keyword">while</span>(H-&gt;elem[addr] != NO_DATA)<span class="hljs-comment">// 如果这一项有值了，往后存储</span>&#123;addr = (addr+<span class="hljs-number">1</span>) % HASHSIZE;<span class="hljs-comment">// 开放定址法 : 以HASH函数得到的索引为key,产生新的索引</span>&#125;H-&gt;elem[addr] = key;&#125;</code></pre><ul><li>查找数据的索引，按照相同的散列函数，得到散列表的索引，如果开放定址法的输出又回到了最初的值，表明散列表的没有这个需要查找的值。</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 查找关键字的地址 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">search_HashTable</span><span class="hljs-params">(HashTable_ptr H,<span class="hljs-keyword">int</span> key)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> addr = HASH(key);<span class="hljs-keyword">while</span>(H-&gt;elem[addr] != key)&#123;addr = (addr+<span class="hljs-number">1</span>) % HASHSIZE;<span class="hljs-comment">// 同样的方法查找</span><span class="hljs-keyword">if</span>(addr == HASH(key))<span class="hljs-comment">// 查找回到原点，说明数据不存在</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"no data \r\n"</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;&#125;<span class="hljs-keyword">return</span> addr;&#125;</code></pre><ul><li>测试代码</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> a[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">67</span>,<span class="hljs-number">56</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">37</span>,<span class="hljs-number">22</span>,<span class="hljs-number">29</span>,<span class="hljs-number">15</span>,<span class="hljs-number">47</span>,<span class="hljs-number">48</span>,<span class="hljs-number">34</span>&#125;;HashTable hash;HashTable_ptr H = &amp;hash;init_HashTable(H);<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;HASHSIZE;i++)&#123;inset_HashTable(H,a[i]);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"插入之后的哈希表为："</span>);<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;HASHSIZE;i++)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,H-&gt;elem[i]);&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"搜索到2的地址为: %d \r\n"</span>,search_HashTable(H,<span class="hljs-number">2</span>));&#125;</code></pre><blockquote><p>对于查找类的题，别再盲目的遍历啦，可以先创建一个散列表再进行查找。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-队列</title>
    <link href="/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <url>/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><strong>队列是只允许在一端进行插入操作，另一端进行删除操作的线性表</strong>    </p><ul><li>队列是一种<strong>先进先出（First In First Out）</strong>结构，简称FIFO，允许插入的一端成为对尾，允许删除的一端成为队头，可以类比于实际生活中的队列。</li></ul><p>本文介绍两种队列的存储结构的实现，分别是连续存储结构和链式存储结构，连续存储结构一般又称为环形缓冲区。以下的代码均在ubuntu16.04上运行，测试过。</p><h2 id="一-环形缓冲区"><a href="#一-环形缓冲区" class="headerlink" title="一 环形缓冲区"></a>一 环形缓冲区</h2><p><strong>队列的连续存储结构通过数组实现，队头删除数据之后，对尾添加的数据在超过数组长度时，需要插入数组前部（队头被删除的数据位置），这样，数组首尾相连，形成一个环形数组</strong></p><ul><li>队列的存储结构如下，一个数组，一个指向队头的数组index，front，一个指向对尾的index,rear，最后一个是队列中的数据个数。</li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_SIZE 10</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqQueue</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> data[MAX_SIZE];<span class="hljs-comment">// 存储数据的数组</span><span class="hljs-keyword">int</span> front;<span class="hljs-comment">// 头指针</span><span class="hljs-keyword">int</span> rear;<span class="hljs-comment">// 尾指针</span><span class="hljs-keyword">int</span> flag;<span class="hljs-comment">// 队列中数据的个数</span>&#125;SqQueue;</code></pre><ul><li>初始化一个环形缓冲区,这个环形缓冲区的位置分配在堆中</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_queue</span><span class="hljs-params">(SqQueue **S)</span></span><span class="hljs-function"></span>&#123;*S = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct SqQueue));<span class="hljs-comment">// 动态内存分配</span>(*S)-&gt;front = <span class="hljs-number">0</span>;(*S)-&gt;rear  = <span class="hljs-number">0</span>;(*S)-&gt;flag  = <span class="hljs-number">0</span>;&#125;</code></pre><ul><li>对尾添加数据,如果队列中的数据超过了最大值，说明缓冲区已满，否则在rear位置插入一个数据，并将rear+1,在rear到达数组尾部时，让rear置为0，即指向数组首地址</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(SqQueue *S,<span class="hljs-keyword">int</span> data)</span>   <span class="hljs-comment">// 队尾添加数据</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(S-&gt;flag &gt;= MAX_SIZE)<span class="hljs-keyword">return</span>;S-&gt;data[S-&gt;rear] = data;S-&gt;rear ++;<span class="hljs-keyword">if</span>(S-&gt;rear == MAX_SIZE) S-&gt;rear = <span class="hljs-number">0</span>;S-&gt;flag++;&#125;</code></pre><ul><li>队头删除数据,也就是让队头index+1，并且让flag减一即可</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delQueue</span><span class="hljs-params">(SqQueue *S)</span>    <span class="hljs-comment">// 队头删除数据</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(S-&gt;flag &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;S-&gt;front ++;<span class="hljs-keyword">if</span>(S-&gt;front == MAX_SIZE) S-&gt;front = <span class="hljs-number">0</span>;S-&gt;flag--;&#125;</code></pre><ul><li>返回队列中的元素个数,也就是返回flag的数值</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">queueLength</span><span class="hljs-params">(SqQueue *S)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> S-&gt;flag;&#125;</code></pre><ul><li>遍历环形缓冲区，打印出所有的数值,从队头打印到对尾，如果超过数组范围，仍然是回到数组首位</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printall</span><span class="hljs-params">(SqQueue *S)</span> </span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> count = S-&gt;front;<span class="hljs-keyword">if</span>(S-&gt;flag == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;S-&gt;flag;i++)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,S-&gt;data[count]);count++;<span class="hljs-keyword">if</span>(count &gt;= MAX_SIZE)count = <span class="hljs-number">0</span>;&#125;&#125;</code></pre><h2 id="二-链式队列"><a href="#二-链式队列" class="headerlink" title="二 链式队列"></a>二 链式队列</h2><p><strong>链式队列是一种带有限制的链表，优点在于没有长度的限制</strong></p><ul><li>链式队列的存储结构,封装了一个单链表，并且加入了队头指针，对尾指针和队列的长度。</li></ul><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span>&#125;QNode,*QNodePtr;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQueue</span></span><span class="hljs-class">&#123;</span>QNodePtr front;<span class="hljs-comment">// 表头，删除数据</span>QNodePtr rear;<span class="hljs-comment">// 表尾，添加数据</span><span class="hljs-keyword">int</span> count;<span class="hljs-comment">// 队列长度</span>&#125;LinkQueue;</code></pre><ul><li>在队尾插入数据，也就是在链表的尾部增加节点，先把旧队尾rear的next指向新增的节点，再把rear更新为这个新增的节点。</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_LinkQueue</span><span class="hljs-params">(LinkQueue *Q,<span class="hljs-keyword">int</span> data)</span> <span class="hljs-comment">// 队尾增加节点</span></span><span class="hljs-function"></span>&#123;QNodePtr s = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct QNode));s-&gt;data = data;s-&gt;next = <span class="hljs-literal">NULL</span>;Q-&gt;count++;Q-&gt;rear-&gt;next = s;     <span class="hljs-comment">// 先前节点的next指向s </span>Q-&gt;rear = s;<span class="hljs-comment">// 现在的节点更新为s</span>Q-&gt;rear-&gt;next = <span class="hljs-literal">NULL</span>;&#125;</code></pre><ul><li>在队头删除数据,注意这里删除的是首节点的下一个节点，并且把首节点的next指向下下个节点</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del_LinkQueue</span><span class="hljs-params">(LinkQueue *Q)</span><span class="hljs-comment">//删除队头的下一个节点（队头不删）</span></span><span class="hljs-function"></span>&#123;QNodePtr p;<span class="hljs-keyword">if</span>(Q-&gt;count == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;p = Q-&gt;front-&gt;next;Q-&gt;front-&gt;next = p-&gt;next;<span class="hljs-keyword">if</span>(Q-&gt;rear == p) Q-&gt;rear = Q-&gt;front; <span class="hljs-comment">// 如果删除的恰好是尾结点</span>Q-&gt;count --;<span class="hljs-built_in">free</span>(p);&#125;</code></pre><ul><li>遍历整个队列,从头结点的下一个节点一直输出至队尾节点。</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printall</span><span class="hljs-params">(LinkQueue *Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i;QNodePtr p = Q-&gt;front; <span class="hljs-built_in">printf</span>(<span class="hljs-string">"count = %d\r\n"</span>,Q-&gt;count);<span class="hljs-keyword">if</span>(Q-&gt;count == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt; Q-&gt;count;i++)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\r\n"</span>,p-&gt;next-&gt;data);p = p-&gt;next;&#125;&#125;</code></pre><blockquote><p>队列还有其他别的操作，如插入，删除某个特定的节点等，但是这都是建立在对队列这个数据结构非常了解的基础上的，只要真正了解了这个数据结构，就很容易实现。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-二叉树</title>
    <link href="/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><strong>二叉树是一种非线性数据结构，本文实现的是二叉树的三种遍历方法，以及一种二叉搜索树，即左孩子节点的值小于根节点的值小于右孩子节点的值</strong></p><blockquote><p>对二叉树不了解的需要先了解二叉树，本文说的比较简练实用</p></blockquote><ul><li>二叉树的结构,二叉树的链式结构非常简单，即一个数据节点，加上两个孩子节点。</li></ul><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BitNode</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BitNode</span> *<span class="hljs-title">left_child</span>,*<span class="hljs-title">right_child</span>;</span>&#125;BitNode,*BitNode_ptr;</code></pre><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树的遍历方法总结起来一共分为三步：     </p><ul><li>按照顺序访问节点，前序，中序，后序，分别对应<br>1 从根节点到左右孩子<br>2 左孩子到根节点再到右节点<br>3 左右孩子节点再到根节点    </li><li>有孩子节点的优先遍历孩子节点      </li><li>访问到根节点就输出数据    <blockquote><p>把握住这三步，对于二叉树的遍历基本没有问题,对于前中后序遍历步骤不用记，前就是从上到下，后就是从下到上，中就是下到上再到下</p></blockquote></li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 前序遍历 */</span><span class="hljs-comment">/* 根-&gt;左-&gt;右 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(BitNode_ptr T)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,T-&gt;data);  <span class="hljs-comment">// 访问根节点</span>preOrder(T-&gt;left_child); <span class="hljs-comment">// 访问左节点</span>preOrder(T-&gt;right_child);<span class="hljs-comment">// 访问右节点</span>&#125;<span class="hljs-comment">/* 中序遍历 */</span><span class="hljs-comment">/* 左-&gt;根-&gt;右 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BitNode_ptr T)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;InOrder(T-&gt;left_child);   <span class="hljs-comment">/* 访问左节点 */</span><span class="hljs-comment">/* 一直遍历到最后的左节点才开始返回打印数据 */</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,T-&gt;data);   <span class="hljs-comment">/* 访问根节点 */</span>InOrder(T-&gt;right_child);   <span class="hljs-comment">/* 访问右节点 */</span>&#125;<span class="hljs-comment">/* 后序遍历 */</span><span class="hljs-comment">/* 左-&gt;右-&gt;根  / 右-&gt;左-&gt;根 */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BitNode_ptr T)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;PostOrder(T-&gt;left_child);  <span class="hljs-comment">/* 访问左节点 */</span>PostOrder(T-&gt;right_child);    <span class="hljs-comment">/* 访问右节点 */</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,T-&gt;data);    <span class="hljs-comment">/* 访问根节点 */</span>&#125;</code></pre><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><blockquote><p>对于二叉树的掌握需要对递归有一定的理解</p></blockquote><pre><code class="hljs c"><span class="hljs-comment">/* 1 创建一个二叉树节点 */</span><span class="hljs-function">BitNode_ptr <span class="hljs-title">create_bitnode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span><span class="hljs-function"></span>&#123;BitNode_ptr t = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct BitNode));t-&gt;left_child = <span class="hljs-literal">NULL</span>;t-&gt;right_child = <span class="hljs-literal">NULL</span>;t-&gt;data = data;&#125;<span class="hljs-comment">/* 2 将二叉树节点插入到二叉树中（以二叉搜索树的方式） */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_bitree</span><span class="hljs-params">(BitNode_ptr T,BitNode_ptr t)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">// 根节点</span>&#123;T = t;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">if</span>(t-&gt;data &lt; T-&gt;data)<span class="hljs-comment">// 小于 放在左节点，有孩子节点先判断孩子节点</span>&#123;<span class="hljs-keyword">if</span>(T-&gt;left_child != <span class="hljs-literal">NULL</span>)add_bitree(T-&gt;left_child,t);<span class="hljs-keyword">else</span>T-&gt;left_child = t;&#125;<span class="hljs-keyword">else</span>  <span class="hljs-comment">// 大于等于  放在右节点，有孩子节点先判断孩子节点</span>&#123;<span class="hljs-keyword">if</span>(T-&gt;right_child != <span class="hljs-literal">NULL</span>)add_bitree(T-&gt;right_child,t);<span class="hljs-keyword">else</span> T-&gt;right_child = t;&#125;&#125;<span class="hljs-comment">/* 返回二叉树的深度 */</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bit_tree_depth</span><span class="hljs-params">(BitNode_ptr T)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> depth = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> left_depth = <span class="hljs-number">0</span>,right_depth = <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;left_depth  = bit_tree_depth(T-&gt;left_child);right_depth = bit_tree_depth(T-&gt;right_child);depth = right_depth&gt;left_depth ? right_depth : left_depth;<span class="hljs-keyword">return</span> depth + <span class="hljs-number">1</span>;&#125;</code></pre><h3 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h3><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">/* 创建根节点 */</span>T = create_bitnode(<span class="hljs-number">10</span>);BitNode_ptr t;<span class="hljs-comment">/* 创建各个节点 */</span>t = create_bitnode(<span class="hljs-number">9</span>);add_bitree(T,t);    t = create_bitnode(<span class="hljs-number">20</span>);add_bitree(T,t);t = create_bitnode(<span class="hljs-number">15</span>);add_bitree(T,t);t = create_bitnode(<span class="hljs-number">35</span>);add_bitree(T,t);<span class="hljs-comment">/* 三种遍历方式 */</span>preOrder(T);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);InOrder(T);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);PostOrder(T);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<span class="hljs-comment">/* 返回二叉树的深度 */</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"depth is %d\r\n "</span>,bit_tree_depth(T));&#125;</code></pre><blockquote><p>还有一些高级的二叉树，如二叉平衡树，红黑树等，如果需要掌握这些高级的数据结构，还是要下一定的功夫的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-栈</title>
    <link href="/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <url>/2019/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p><strong>栈与队列恰好相反，栈是一种后进先出的结构（Last In First Out）LIFO,你可以想像成一个容器，最先倒进去的最后倒出来</strong>   </p><p>本文介绍的是链式栈结构，在数据结构中几乎用的都是这种存储形式，这里要把数据结构的栈和内存的栈空间区别开，这里的栈是一种数据结构，内存的栈是指内存的存取方式类似于栈这种形式，因此取名栈空间。</p><ul><li>栈的结构,这里也是封装了一个链表，在此基础上加了一个栈顶指针，和栈内的数据个数。</li></ul><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span>&#125;StackNode, *LinkStackPtr;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkStack</span></span><span class="hljs-class">&#123;</span>LinkStackPtr top;<span class="hljs-keyword">int</span> count;&#125;LinkStack;</code></pre><ul><li>初始化一个栈,此时栈内部的链表没有任何节点，也就是栈内没有任何数据</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stack</span><span class="hljs-params">(LinkStack *S)</span></span><span class="hljs-function"></span>&#123;S-&gt;top = <span class="hljs-literal">NULL</span>;S-&gt;count = <span class="hljs-number">0</span>;&#125;</code></pre><ul><li>push操作，入栈操作<br>这里需要注意的是，这里不是按照单链表的方式连接到上一个节点的尾部，这里相当于单链表反向操作，即是把新加入的节点的next指向链表表头的位置（栈顶节点top），并且把top更新为新插入的节点<br>为什么这么做？原因在于删除的节点为链表最新加入的节点，这样便于删除这个节点，而不用遍历整个链表</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">push</span><span class="hljs-params">(LinkStack *S,<span class="hljs-keyword">int</span> data)</span></span><span class="hljs-function"></span>&#123;LinkStackPtr s = (LinkStackPtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct StackNode));s-&gt;data = data;s-&gt;next = S-&gt;top;<span class="hljs-comment">/* 逆向的链表 */</span>S-&gt;top = s;S-&gt;count ++;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><ul><li>pop操作，出栈操作，就是把栈顶指针top更新为top-&gt;next,并把top节点free掉</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">(LinkStack *S, <span class="hljs-keyword">int</span> *p_dat)</span></span><span class="hljs-function"></span>&#123;LinkStackPtr p;<span class="hljs-keyword">if</span>(S == <span class="hljs-literal">NULL</span> || S-&gt;top == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">if</span>(p_dat != <span class="hljs-literal">NULL</span>)*p_dat = S-&gt;top-&gt;data;p = S-&gt;top-&gt;next;<span class="hljs-built_in">free</span>(S-&gt;top);S-&gt;top = p;S-&gt;count--;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><ul><li>遍历整个栈,从栈顶一直遍历到栈底</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">print_all</span><span class="hljs-params">(LinkStack *S)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(S == <span class="hljs-literal">NULL</span> || S-&gt;top == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">do</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"data is %d \n"</span>,S-&gt;top-&gt;data);S-&gt;top = S-&gt;top-&gt;next;   &#125;<span class="hljs-keyword">while</span>(S-&gt;top != <span class="hljs-literal">NULL</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><blockquote><p>注意栈结构中的链表操作有所不同</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++脑图</title>
    <link href="/2019/06/01/C++%E8%84%91%E5%9B%BE/"/>
    <url>/2019/06/01/C++%E8%84%91%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/C++%E8%84%91%E5%9B%BE/c++.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>CPP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux文件操作</title>
    <link href="/2019/05/18/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/05/18/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p><strong>目录结构</strong>  </p><blockquote><p>1  底层系统调用<br>2  标准IO库<br>3  格式化输入输出<br>4  带缓冲的IO和不带缓冲的IO<br>5  目录操作<br>6  文件和目录的维护<br>7  proc文件系统<br>8  锁文件<br>9  文件锁  </p></blockquote><p>想必在此之前，你已经听说过这么一句话，<strong>在linux中，一切（几乎一切）都是文件</strong>，设置硬件设备也被映射为文件，Linux中比较重要的设备文件有3个：</p><pre><code class="hljs css">/dev/console：系统控制台/dev/tty：终端控制，由系统自动运行的进程和脚本没有控制终端，所以它们不能打开/dev/tty/dev/null：空设备，在cp命令里把它用作复制空文件的源文件，例如：cp /dev/null empty_file</code></pre><h2 id="一-底层系统调用"><a href="#一-底层系统调用" class="headerlink" title="一 底层系统调用"></a>一 底层系统调用</h2><p><strong>文件操作的底层系统调用常用的有以下几个：</strong>    </p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>open</td><td>打开文件或设备</td></tr><tr><td>read</td><td>从打开的文件或者设备里面读数据</td></tr><tr><td>write</td><td>向文件或设备里写数据</td></tr><tr><td>close</td><td>关闭文件或设备</td></tr><tr><td>lseek</td><td>设置读写指针</td></tr><tr><td>fstat/stat/lstat</td><td>获取文件相关信息</td></tr><tr><td>mmap/msync</td><td>内存映射</td></tr></tbody></table><p>当一个进程（process）开始运行时，一般会有3个已经打开的文件描述符：    </p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>标准输入</td></tr><tr><td>1</td><td>标准输出</td></tr><tr><td>2</td><td>标准错误</td></tr></tbody></table><p><strong>open</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,<span class="hljs-keyword">int</span> oflags)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,<span class="hljs-keyword">int</span> oflags,<span class="hljs-keyword">mode_t</span> mode)</span></span>;</code></pre><p>— 参数解释 —</p><ul><li>path:文件路径和文件名</li><li>oflags:</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">O_RDONLY</span>:以只读方式打开<span class="hljs-selector-tag">O_WRONLY</span>:以只写方式打开<span class="hljs-selector-tag">O_RDWR</span>:以读写方式打开可选的组合模式:<span class="hljs-selector-tag">O_APPEND</span>:把写入的数据追加在文件的末尾<span class="hljs-selector-tag">O_TRUNC</span>:把文件的长度设置为0，丢弃已有的内容<span class="hljs-selector-tag">O_CREAT</span>:如果需要，则创建文件，比较常用<span class="hljs-selector-tag">O_EXCL</span>:与<span class="hljs-selector-tag">O_CREAT</span>一起使用，使用这个模式可以方式两个进程同时创建出一个文件，如果文件已经存在，则创建失败。</code></pre><ul><li>mode:<br>如果你使用O_CREAT标志的open来创建文件时，你必须使用三个参数的open函数。<br>第三个参数是文件的读/写/执行权限，一般是以0开头的三个八进制数，每个八进制数都是由1/2/4中的一个或几个进行相加得到的。<br>这三个八进制中，第一个表述属主的权限，第二个表示组的权限，第三个表示其他用户的权限。</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>0</td><td>允许任何权限</td></tr><tr><td>1</td><td>禁止执行权限</td></tr><tr><td>2</td><td>禁止写权限</td></tr><tr><td>4</td><td>禁止执行权限</td></tr></tbody></table><ul><li>返回值：<br>open调用成功时会返回一个新的文件描述符（非负整数），在失败时返回-1。<br>值得注意的是，返回的新的文件描述符总是未使用描述符的最小值，这个特征非常有用，后面的文章会提到。</li></ul><p><strong>read</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,<span class="hljs-keyword">void</span> *buf,<span class="hljs-keyword">size_t</span> nbytes)</span></span>;</code></pre><p>—参数解释—</p><ul><li>filedes: 文件描述符</li><li>buf: 存放数据的缓冲区</li><li>nbytes: 读取的字节数</li><li>返回值：返回实际读取的字节数，这可能会小于请求的字节数。如果返回的是0，表示已经到达文件尾，未读入任何数据，如果返回的是-1，表示read调用出现了错误。</li></ul><p><strong>write</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *buf,<span class="hljs-keyword">size_t</span> nbytes)</span></span>;</code></pre><p>—参数解释—</p><ul><li>filedes: 文件描述符</li><li>buf: 要写入的缓冲区</li><li>nbytes: 准备写入的字节数，写入的是缓冲区的前nbytes个字节</li><li>返回值：返回实际写入的字节数，可能会小于nbytes，如果返回0，表示未写入任何数据，返回-1，表示发生错误。</li></ul><p><strong>close</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">close</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes)</span></span>;</code></pre><ul><li>终止文件描述符与其对应的文件之间的关系</li><li>释放文件描述符并使其能够重新使用</li><li>成功返回0，失败返回-1</li></ul><p><strong>lseek</strong></p><blockquote><p>lseek用于对文件描述符fildes的读写指针进行设置。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">off_t</span> <span class="hljs-title">lseek</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fileds,<span class="hljs-keyword">off_t</span> offset,<span class="hljs-keyword">int</span> whence)</span></span>;</code></pre><p>—参数解释—</p><ul><li>off_t offset：off_t是一个整数类型，offset表示偏移值</li><li>whence   </li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>SEEK_SET</td><td>offset是一个绝对位置</td></tr><tr><td>SEEK_CUR</td><td>offset是一个相对于当前位置的相对位置</td></tr><tr><td>SEEK_END</td><td>offset是一个相对于文件尾的相对位置</td></tr></tbody></table><ul><li>返回值<br>返回从文件头到文件指针的字节偏移值，失败时返回-1.</li></ul><p><strong>fstat/stat/lstat</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fstat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,struct stat *buf)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">stat</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,struct stat *buf)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lstat</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,struct stat *buf)</span></span>;</code></pre><ul><li>fstat 通过文件描述符返回相关的文件状态信息</li><li>stat/lstat 是通过文件名查到文件的状态信息</li><li>stat/lstat的区别：当查到的文件名是一个符号链接时，lstat返回的是该符号链接本身的信息，stat返回的是该链接指向的文件的信息。</li></ul><p><strong>mmap/msync</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mmap</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> len, <span class="hljs-keyword">int</span> prot, <span class="hljs-keyword">int</span> flags, <span class="hljs-keyword">int</span> fildes, <span class="hljs-keyword">off_t</span> off)</span></span>;</code></pre><p>函数功能</p><ul><li>mmap函数创建一段指向内存区域的指针，该内存区域与可以通过一个文件描述符访问的文件的内容相关联。</li><li>简单的说，就是把二进制文件的内容放在内存里，读写文件就可以使用指针操作，方便对某个字节进行读写操作。</li></ul><p>函数参数</p><ul><li>addr ： 分配的内存地址，一般设置为NULL,即由系统进行分配</li><li>len ： 需要分配的长度</li><li>prot: 设置内存访问的权限，有PORT_READ读/PORT_WRITE写/PORE_EXEC执行，按位OR操作</li><li>fildes ： 已经打开的文件描述符</li><li>off：内存访问的文件中数据的起始偏移地址</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msync</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr,<span class="hljs-keyword">size_t</span> len,<span class="hljs-keyword">int</span> flags)</span></span>;</code></pre><p>函数功能：把映射的内存段写回到被映射的文件中</p><ul><li>flasgs：执行修改的具体方式</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>MS_ASYNC</td><td>采用异步写方式</td></tr><tr><td>MS_SYNC</td><td>采用同步写方式</td></tr><tr><td>MS_INVALIDATE</td><td>从文件中读回数据</td></tr></tbody></table><h2 id="二-标准IO库"><a href="#二-标准IO库" class="headerlink" title="二 标准IO库"></a>二 标准IO库</h2><p><strong>IO标准库提供的读写函数主要有以下几个</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>fopen</td><td>打开文件</td></tr><tr><td>fread</td><td>读取文件数据</td></tr><tr><td>fwrite</td><td>向文件写数据</td></tr><tr><td>flose</td><td>关闭文件流</td></tr><tr><td>fflush</td><td>写出缓冲区中所有的数据</td></tr><tr><td>fseek</td><td>移动读写指针</td></tr><tr><td>fgetc/getc/getchar</td><td>从文件流中获取一个字节</td></tr><tr><td>fputc/putc/putchar</td><td>输出一个字节到文件流中</td></tr><tr><td>fgets/gets</td><td>从文件流中获取字符串</td></tr></tbody></table><p>标注IO库stdio为底层I/O系统调用提供了一个通用的接口，还提供了许多复杂的函数用于格式化输出和扫面输入，它还负责满足设备的缓冲需求。<br>在标准IO库中，与文件描述符对应的是流（stream）,它是指向结构<strong>FILE</strong>的指针。<br>同样，在启动程序时，由3个流时自动打开的，分别是   </p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>stdin</td><td>标准输入</td></tr><tr><td>stdout</td><td>标准输出</td></tr><tr><td>stderr</td><td>标准错误</td></tr></tbody></table><p><strong>fopen</strong></p><pre><code class="hljs c"><span class="hljs-function">FILE *<span class="hljs-title">fopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *mode)</span></span>;</code></pre><p>— 参数解释 —</p><ul><li>filename:指定的文件</li><li>moed:指定的打开方式</li></ul><pre><code class="hljs css">"r" / "rb" :只读"w" / "wb" : 只写,把文件长度截短为零"a" / "ab" : 只写，新内容追加在文件尾"r+"/"rb+"/"r+b" : 以更新方式打开，读/写"w+"/"wb+"/"w+b" : 以更新方式打开,并把文件长度截短为0"a+"/"ab+"/"a+b" : 以更新方式打开,新内容追加在文件尾</code></pre><ul><li>返回值：<br>成功返回一个非空的FILE * 指针<br>失败返回NULL</li></ul><p><strong>fread</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fread</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr,<span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">size_t</span> nitems,FILE *stream)</span></span>;</code></pre><p>—参数解释—</p><ul><li>ptr : 数据存放的缓冲区</li><li>size: 每次读取的长度</li><li>nitems: 读取的次数</li><li>stream:文件流</li><li>返回值：放到缓冲区里面的数据块的个数，而不是字节数</li></ul><p><strong>fwrite</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *ptr,<span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">size_t</span> nitems,FILE *stream)</span></span>;</code></pre><p>—参数解释—</p><ul><li>ptr : 数据存放的缓冲区</li><li>size: 每次写入的长度</li><li>nitems: 写入的次数</li><li>stream:文件流</li><li>返回值：写入的个数</li></ul><p><strong>flose</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fclose</span><span class="hljs-params">(FILE *stream)</span></span>;</code></pre><ul><li>flose关闭文件流stream,使所有尚未写出的数据都写出，因为stdio会对数据进行缓冲，所以使用fclose是非常重要的。</li></ul><p><strong>fflush</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fflush</span><span class="hljs-params">(FILE *stream)</span></span>;</code></pre><ul><li>把文件流里面所有未写出的数据立刻写出，可以用这个函数来确保在试图读入一个用户响应之前，先向终端送出一个交互提示符。</li><li>flose()隐含执行了一次fflush函数</li></ul><p><strong>fseek</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fseek</span><span class="hljs-params">(FILE *stream,<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> offset,<span class="hljs-keyword">int</span> whence)</span></span>;</code></pre><p>offset和whence的含义与lseek一样，不一样的时fseek返回的是一个整数，0表示成功，-1表示失败。</p><p><strong>fgetc/getc/getchar</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fgetc</span><span class="hljs-params">(FILE stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getc</span><span class="hljs-params">(FILE *stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getchar</span><span class="hljs-params">()</span></span>;</code></pre><ul><li>fgetc从文件流里面取出下一个字节并把它作为字符返回，当到达文件尾部或者发生错误时返回<strong>EOF</strong>.</li><li>getc与fgetc的作用一样,但是它有可能被声明成一个宏（被ISO C声明为一个宏），所以它不可以作为函数指针，宏会需要更多的内存空间，但是有更高的执行效率。</li><li>getchar的作用相当于getc(stdin),从标准里读取下一个字符</li></ul><p><strong>fputc/putc/putchar</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c,FILE *stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">putc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c,FILE *stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">putchar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span></span>;</code></pre><p>类似于<code>fgetc/fget/getchar</code>之间的关系<br>注意，<strong>putchar和getchar都是把字符当作int类型而不是char类型来使用的，这就允许文件尾(EOF)标识取值-1</strong></p><p><strong>fgets/gets</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">fgets</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s,<span class="hljs-keyword">int</span> n,FILE *stream)</span></span>;<span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">gets</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span>;</code></pre><ul><li>fgets把读到的字符写到S所指向的字符串里，<strong>直到遇到换行符或者文件尾</strong>，也会把换行符接受到字符串里，<strong>并加上结尾字符\0</strong>，一次调用最多传输<strong>n-1</strong>个字符，因为最后一个字符必须是<strong>\0</strong><br>成功时，返回指向s的指针，失败时，返回一个空指针</li><li>gets类似于fgets，只不过它是从标准输入读取数据并<strong>丢弃换行符，并在结尾加上null字符</strong></li></ul><h2 id="三-格式化输入输出"><a href="#三-格式化输入输出" class="headerlink" title="三 格式化输入输出"></a>三 格式化输入输出</h2><h3 id="1-标准输出函数"><a href="#1-标准输出函数" class="headerlink" title="1 标准输出函数"></a>1 标准输出函数</h3><p><strong>printf/fprintf/sprintf</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">printf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,...)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sprintf</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,...)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fprintf</span><span class="hljs-params">(FILE *stream,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,...)</span></span>;</code></pre><ul><li>printf   把自己的输出送到标准输出</li><li>fprintf  把自己的输出送到一个指定的文件流##</li><li>sprintf  把自己的输出和一个结尾空字符写到字符串s里面</li></ul><p><strong>scanf/fscanf/sscanf</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">scanf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,...)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fscanf</span><span class="hljs-params">(FILE *stream,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,..)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sscanf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *format,...)</span></span>;</code></pre><ul><li>scanf 读入标准输入的值保存到对应的变量里去，这些变量的类型必须正确并且精确匹配格式字符串，斗则，内存数据会遭到破坏，使程序崩溃<br>使用%c控制符从输入中读取一个自读，它<strong>不会跳过起始的空白字符</strong><br>使用%s控制符来扫描字符串，它<strong>会跳过起始的空白字符</strong><br>返回值是成功读取的数据项个数<br>例：</li></ul><pre><code class="hljs c">给定下面的输入行：hello, <span class="hljs-number">1234</span>, <span class="hljs-number">5.678</span>, X, <span class="hljs-built_in">string</span> to the <span class="hljs-built_in">end</span> of the <span class="hljs-built_in">line</span>下面的<span class="hljs-built_in">scanf</span>会正确读取<span class="hljs-number">4</span>个数据项：<span class="hljs-keyword">char</span> s[<span class="hljs-number">256</span>];<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">float</span> f;<span class="hljs-keyword">char</span> c;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"Hello,%d,%g, %c, %[^\n]"</span>,&amp;n,&amp;f,&amp;c,s);<span class="hljs-comment">/*</span><span class="hljs-comment"> * 1 注意%c前面有空格，是为了匹配字符X之前的空格</span><span class="hljs-comment"> * 2 %[^\n]: 表示遇到\n停止读取字符串</span><span class="hljs-comment"> */</span></code></pre><ul><li>fscanf  从文件流读取数据到对应项中</li><li>sscanf  从字符串读取数据到对应项中</li></ul><h2 id="四-带缓冲的IO与不带缓冲的IO"><a href="#四-带缓冲的IO与不带缓冲的IO" class="headerlink" title="四 带缓冲的IO与不带缓冲的IO"></a>四 带缓冲的IO与不带缓冲的IO</h2><p>底层系统调用提供的IO读写操作是不带缓存的IO<br>标准库stdio提供的IO读写操作是带缓存的IO</p><p>看下面两个函数</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *buf,<span class="hljs-keyword">size_t</span> nbytes)</span></span>;<span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *ptr,<span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>,<span class="hljs-keyword">size_t</span> nitems,FILE *stream)</span></span>;</code></pre><p>在数据读入buff或者是ptr之前，都会先写到内核所设置的缓冲存储器中。<strong>如果存储器未满，则并不将其排入到输出队列，直到缓存写满或者内核需要重新使用此缓存时才将其排入输出队列，再进行实际的IO操作，这种技术叫延迟写</strong></p><p>标准IO在系统调用上多加了一个缓冲区，也因此引入了流的概念，FILE实际上包含了管理流所需要的所有信息：</p><ul><li>实际的IO文件描述符</li><li>指向流缓存的指针</li><li>缓存长度</li><li>当前在缓存中的字节数     </li></ul><p>标准IO提供三种缓存模式：</p><ul><li>全缓存，即填满IO缓存后才执行IO操作</li><li>行缓存，即输入输出遇到新行符或者缓存满时，才执行真正的IO操作，stdin,stdout通常是行缓存，当stdout被重定向到一个具体的文件时，那么它是全缓存的</li><li>无缓存，相当于read write，stderr时不带任何缓存的</li></ul><p>带缓存的IO虽然数据复制了两次，但是无需考虑缓存以及最佳IO长度的选择，因此它不比read/write慢多少</p><p>如何直观的看到标准IO库的缓存效果，看下面的例子：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> buff[<span class="hljs-number">1024</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">"This Line Should be Cached..."</span>);sleep(<span class="hljs-number">3</span>);    <span class="hljs-comment">//这时候在终端上是看不到任何输出</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\nThis Line Should be Cached Again"</span>);  <span class="hljs-comment">//这时候可以看到第一个printf的输出，因为被换行符刷新了</span>sleep(<span class="hljs-number">3</span>);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This Line Should Not be Cached Again\n"</span>); <span class="hljs-comment">//这时候可以看到第二个和第三个printf的输出，因为被结尾的\n刷新</span><span class="hljs-comment">//fgets(buff,20,stdin);// buff中带'\n'</span>gets(buff);<span class="hljs-comment">// buff中不带'\n'</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s "</span>,buff);&#125;</code></pre><h2 id="五-目录操作"><a href="#五-目录操作" class="headerlink" title="五 目录操作"></a>五 目录操作</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>opendir</td><td>打开目录流</td></tr><tr><td>readdir</td><td>扫描目录</td></tr><tr><td>telldir</td><td>返回目录当前位置</td></tr><tr><td>seekdir</td><td>设置目录流指针</td></tr><tr><td>closedir</td><td>关闭一个目录流</td></tr></tbody></table><p>Linux中，与目录操作有关的头文件在diret.h中，它们使用一个名为DIR的结构体作为目录操作的基础，被称为<strong>目录流</strong>的指针指向这个结构体。</p><p><strong>opendir</strong></p><pre><code class="hljs c"><span class="hljs-function">DIR *<span class="hljs-title">opendir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span>;</code></pre><ul><li>打开并建立一个目录流，如果失败，则返回一个空指针</li></ul><p><strong>readdir</strong></p><pre><code class="hljs c"><span class="hljs-function">struct dirent *<span class="hljs-title">readdir</span><span class="hljs-params">(DIR *dirp)</span></span>;</code></pre><ul><li>readdir返回一个指针，指向目录流的下一个目录项的有关资料，如果发生错误或者到达目录为，则返回NULL</li><li>struct dirent 包含的内容：</li></ul><pre><code class="hljs c"><span class="hljs-keyword">ino_t</span> d_ino: 文件的inode节点号<span class="hljs-keyword">char</span> d_name[]: 文件的名字</code></pre><p><strong>telldir</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">telldir</span><span class="hljs-params">(DIR *dirp)</span></span>;</code></pre><ul><li>返回值记录一个目录流的当前位置</li></ul><p><strong>seekdir</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">seekdir</span><span class="hljs-params">(DIR *dirp,<span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> loc)</span></span>;</code></pre><ul><li>设置目录流dirp的目录项指针，loc的值用来设置指针位置，它应该通过<strong>telldir</strong>来获得</li></ul><p><strong>closedir</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">closedir</span><span class="hljs-params">(DIR *dirp)</span></span>;</code></pre><ul><li>关闭一个目录流并释放与之关联的资源，执行成功返回0，错误返回-1</li></ul><h2 id="六-文件和目录的维护"><a href="#六-文件和目录的维护" class="headerlink" title="六 文件和目录的维护"></a>六 文件和目录的维护</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>chmod</td><td>改变文件的访问权限</td></tr><tr><td>unlink/link/symlink</td><td>删除/建立文件链接</td></tr><tr><td>mkdir/rmdir</td><td>建立/删除目录</td></tr><tr><td>chdir/getcwd</td><td>获取当前目录</td></tr></tbody></table><p><strong>chmod</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chmod</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,<span class="hljs-keyword">mode_t</span> mode)</span></span>;</code></pre><ul><li>path参数指定的文件被修改为具有mode参数给出的权限，参数mode与open中的一样</li></ul><p><strong>unlink/link/symlink</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">unlink</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path2)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">symlink</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path1,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path2)</span></span>;</code></pre><ul><li>unlink,用来删除一个文件的目录项并减少它的连接数，成功返回0，失败返回-1，如果一个文件的链接数减少到0并且没有进程打开它，这个文件就会被删除</li><li>link 将创建一个指向已有文件path1的新连接，新目录由path2给出</li><li>symlink 以类似的方式创建符号链接</li></ul><p><strong>mkdir/rmdir</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mkdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path,<span class="hljs-keyword">mode_t</span> mode)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">rmdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path)</span></span>;</code></pre><ul><li>mkdir 用于创建目录，权限由mode参数给出</li><li>rmdir 用于删除目录，只有在目录为空时才行</li></ul><p><strong>chdir/getcwd</strong></p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chdir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path)</span></span>;<span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">getcwd</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *buf,<span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>)</span></span>;</code></pre><ul><li>chdir 用于切换目录</li><li>getcwd 用于获取当前目录，把当前目录的名字写到buff里面，size参数给出了buff的长度</li></ul><h2 id="七-proc文件系统"><a href="#七-proc文件系统" class="headerlink" title="七 /proc文件系统"></a>七 /proc文件系统</h2><p>Linux提供了一个特殊的文件系统procfs,它通常以/proc目录的形式呈现<br>  </p><p>该目录中包含了许多驱动程序和内核信息，只要应用程序具有正确的访问权限，它们就可以通过读写这些文件来获得信息或者设置参数<br></p><ul><li>这是我阿里云服务器的/proc目录列表</li></ul><pre><code class="hljs c"><span class="hljs-number">1</span>      <span class="hljs-number">143</span>    <span class="hljs-number">23</span>     <span class="hljs-number">430</span>   <span class="hljs-number">54</span>    <span class="hljs-number">6875</span>  <span class="hljs-number">985</span>          <span class="hljs-built_in">interrupts</span>   modules        thread-self<span class="hljs-number">10</span>     <span class="hljs-number">15</span>     <span class="hljs-number">24</span>     <span class="hljs-number">431</span>   <span class="hljs-number">55</span>    <span class="hljs-number">6893</span>  acpi         iomem        mounts         timer_list<span class="hljs-number">11</span>     <span class="hljs-number">16</span>     <span class="hljs-number">274</span>    <span class="hljs-number">446</span>   <span class="hljs-number">56</span>    <span class="hljs-number">6894</span>  buddyinfo    ioports      mtrr           timer_stats<span class="hljs-number">11293</span>  <span class="hljs-number">163</span>    <span class="hljs-number">27448</span>  <span class="hljs-number">47</span>    <span class="hljs-number">57</span>    <span class="hljs-number">6911</span>  bus          irq          net            tty<span class="hljs-number">11296</span>  <span class="hljs-number">165</span>    <span class="hljs-number">27449</span>  <span class="hljs-number">4700</span>  <span class="hljs-number">573</span>   <span class="hljs-number">7</span>     cgroups      kallsyms     pagetypeinfo   uptime<span class="hljs-number">12</span>     <span class="hljs-number">166</span>    <span class="hljs-number">27456</span>  <span class="hljs-number">474</span>   <span class="hljs-number">58</span>    <span class="hljs-number">7081</span>  cmdline      kcore        partitions     version<span class="hljs-number">13</span>     <span class="hljs-number">17</span>     <span class="hljs-number">27457</span>  <span class="hljs-number">479</span>   <span class="hljs-number">59</span>    <span class="hljs-number">786</span>   consoles     keys         sched_debug    version_signature<span class="hljs-number">133</span>    <span class="hljs-number">18</span>     <span class="hljs-number">27458</span>  <span class="hljs-number">48</span>    <span class="hljs-number">599</span>   <span class="hljs-number">8</span>     cpuinfo      key-users    schedstat      vmallocinfo<span class="hljs-number">134</span>    <span class="hljs-number">19</span>     <span class="hljs-number">27507</span>  <span class="hljs-number">49</span>    <span class="hljs-number">60</span>    <span class="hljs-number">81</span>    crypto       kmsg         scsi           vmstat<span class="hljs-number">135</span>    <span class="hljs-number">197</span>    <span class="hljs-number">28</span>     <span class="hljs-number">5</span>     <span class="hljs-number">61</span>    <span class="hljs-number">811</span>   devices      kpagecgroup  self           zoneinfo<span class="hljs-number">137</span>    <span class="hljs-number">2</span>      <span class="hljs-number">29</span>     <span class="hljs-number">50</span>    <span class="hljs-number">62</span>    <span class="hljs-number">82</span>    diskstats    kpagecount   slabinfo<span class="hljs-number">138</span>    <span class="hljs-number">20</span>     <span class="hljs-number">3</span>      <span class="hljs-number">504</span>   <span class="hljs-number">6539</span>  <span class="hljs-number">874</span>   dma          kpageflags   softirqs<span class="hljs-number">139</span>    <span class="hljs-number">20824</span>  <span class="hljs-number">30</span>     <span class="hljs-number">505</span>   <span class="hljs-number">6559</span>  <span class="hljs-number">882</span>   driver       loadavg      stat<span class="hljs-number">14</span>     <span class="hljs-number">21</span>     <span class="hljs-number">31</span>     <span class="hljs-number">51</span>    <span class="hljs-number">6581</span>  <span class="hljs-number">9</span>     execdomains  locks        swaps<span class="hljs-number">140</span>    <span class="hljs-number">218</span>    <span class="hljs-number">394</span>    <span class="hljs-number">52</span>    <span class="hljs-number">6584</span>  <span class="hljs-number">930</span>   fb           mdstat       sys<span class="hljs-number">141</span>    <span class="hljs-number">22</span>     <span class="hljs-number">411</span>    <span class="hljs-number">5220</span>  <span class="hljs-number">68</span>    <span class="hljs-number">952</span>   filesystems  meminfo      sysrq-trigger<span class="hljs-number">142</span>    <span class="hljs-number">22921</span>  <span class="hljs-number">425</span>    <span class="hljs-number">53</span>    <span class="hljs-number">6857</span>  <span class="hljs-number">953</span>   fs           misc         sysvipc</code></pre><ul><li>常用的信息</li></ul><pre><code class="hljs css">cat /proc/cpuinfo    输出cpu信息cat /proc/meminfo    输出内存使用情况cat /proc/version    输出内核版本信息... ...</code></pre><h2 id="八-锁文件"><a href="#八-锁文件" class="headerlink" title="八 锁文件"></a>八 锁文件</h2><blockquote><p>Linux提供了很多种方法来实现文件锁定，其中最简单的方法就是以原子操作的方式创建锁文件，所谓“原子操作”就是在创建锁文件时，这个过程不允许被打断。<br></p></blockquote><p>这种方式却把它所创建的文件是唯一的，而且这个文件不可能被其他程序在同一时间创<br></p><ul><li><p>锁文件只是<strong>建议锁</strong>，而不是<strong>强制锁</strong></p><blockquote><p>建议锁：进程在对某一个文件进行操作时，没有检测是否加锁或者直接向文件写入数据，内核是不会加以阻止的<br>强制锁：OS内核的文件锁，应用程序对文件进行读写操作时，OS内核会检测文件是否加锁，如果加锁将导致操作失败</p></blockquote></li><li><p>锁文件的实现是通过open函数调用的<strong>O_EXCL</strong>标志来完成的   </p></li></ul><ul><li>示例代码</li></ul><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> *  文件锁</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;        <span class="hljs-keyword">int</span> file_desc;        <span class="hljs-keyword">int</span> save_error;        file_desc = <span class="hljs-built_in">open</span>(<span class="hljs-string">"./LCK.test"</span>,O_RDWR | O_CREAT | O_EXCL,<span class="hljs-number">0444</span>);        <span class="hljs-keyword">if</span>(file_desc == <span class="hljs-number">-1</span>)                &#123;                        save_error = errno;                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"open failed with error %d \n"</span>,save_error);                &#125;        <span class="hljs-keyword">else</span>                &#123;                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" open succeeded \n"</span>);                &#125;        <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);&#125;</code></pre><p>通过O_EXCL标志以原子操作的方式创建了一个锁文件，但是需要注意以下两点：</p><ul><li>1 如果需要保证这个文件的名字是唯一的，那么所有的进程在创建文件时都需要加上O_EXCL，如果这个文件已经存在，则open()调用会返回错误</li><li>2 如果其他进程不加O_EXCL标志，则可以直接读写这个文件，因为锁文件是<strong>建议锁而不是强制锁</strong></li></ul><h2 id="九-文件锁"><a href="#九-文件锁" class="headerlink" title="九 文件锁"></a>九 文件锁</h2><blockquote><p>Linux至少提供两种系统调用，分别是fcntl系统调用和lockf系统调用，这些系统调用的好处是可以实现文件的<strong>区域锁定</strong>和<strong>段锁定</strong><br>fcntl和lockf使用不同的底层实现，因此两者不能混合使用<br>fcntl和lockf<strong>都是建议锁，而不是强制锁</strong></p></blockquote><h3 id="fcntl系统调用"><a href="#fcntl系统调用" class="headerlink" title="fcntl系统调用"></a>fcntl系统调用</h3><ul><li>fcntl对一个打开的文件描述符进行操作，并能根据command参数完成不同的任务</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fcntl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,<span class="hljs-keyword">int</span> command,struct flock *flock_structure)</span></span>;</code></pre><ul><li>command选项如下：</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 获取锁信息，信息存储在 struct flock 结构体中 */</span>F_GETLK<span class="hljs-comment">/* 加锁或者解锁，加锁或者解锁的信息在 struct flock 结构体中  */</span>F_SETLK<span class="hljs-comment">/* 与SETLK类似，但在无法获取锁时，这个调用将等待直到 1 获取锁 2 收到一个信号 才会返回 */</span>F_SETLKW</code></pre><ul><li>struct flock的成员如下：</li></ul><pre><code class="hljs c">short l_typeshort l_whence<span class="hljs-keyword">off_t</span> l_start<span class="hljs-keyword">off_t</span> l_len<span class="hljs-keyword">pid_t</span> l_pid</code></pre><ul><li>l_type</li></ul><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 共享锁/读锁 </span><span class="hljs-comment"> * 许多不同的进程可以拥有文件同一区域的共享锁</span><span class="hljs-comment"> * 只要任一进程拥有共享锁，则没有进程可以获得该区域的独占锁</span><span class="hljs-comment"> * 简单的说，这把锁的作用是使文件不让进程上锁</span><span class="hljs-comment"> * 要想获取共享锁，文件必须以读或者读写的方式打开</span><span class="hljs-comment"> * 一般读文件的进程设置共享锁</span><span class="hljs-comment"> */</span>F_RDLCK<span class="hljs-comment">/*</span><span class="hljs-comment"> *解锁，清除锁</span><span class="hljs-comment"> */</span>F_UNLCK<span class="hljs-comment">/*</span><span class="hljs-comment"> * 独占锁/写锁 </span><span class="hljs-comment"> * 有且只有一个进程可以在文件的特定区域拥有一把独占锁</span><span class="hljs-comment"> * 只要有一个进程设置了独占锁，其他任何进程都不可以设置任何锁</span><span class="hljs-comment"> * 获取独占锁的前提是，文件必须要以写或者读写的方式打开，（否则没有获取独占锁，因为不需要修改文件)</span><span class="hljs-comment"> * 一般写文件的进程设置独占锁</span><span class="hljs-comment"> */</span>F_WRLCK</code></pre><ul><li>l_whence</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 文件头 */</span>SEEK_SET<span class="hljs-comment">/* 当前位置 */</span>SEEK_CUR<span class="hljs-comment">/* 文件尾 */</span>SEEK_END</code></pre><ul><li><p>l_start / l_len<br>l_whence定义了l_start的相对偏移值，l_start定义了该区域的第一个字节，l_len定义了改区域的字节数</p></li><li><p>l_pid<br>l_pid记录 持有锁的进程</p></li></ul><p><strong>示例代码</strong></p><p>1 在文件上加锁</p><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> *文件锁 </span><span class="hljs-comment"> *  use fcntl</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *test_file = <span class="hljs-string">"./tmp/test_lock.txt"</span>;<span class="hljs-comment">/*</span><span class="hljs-comment">The structure describing an advisory lock.  This is the type of the third </span><span class="hljs-comment">argument to `fcntl' for the F_GETLK, F_SETLK, and F_SETLKW requests.  </span><span class="hljs-comment"></span><span class="hljs-comment">struct flock</span><span class="hljs-comment">  &#123;</span><span class="hljs-comment">    __off_t l_start; Offset where the lock begins.  </span><span class="hljs-comment">    __off_t l_len;    Size of the locked area; zero means until EOF.  </span><span class="hljs-comment">    __pid_t l_pid;Process holding the lock.  </span><span class="hljs-comment">    short int l_type;Type of lock: F_RDLCK, F_WRLCK, or F_UNLCK.  </span><span class="hljs-comment">    short int l_whence;Where `l_start' is relative to (like `lseek').  </span><span class="hljs-comment">  &#125;;</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> file_desc;<span class="hljs-keyword">int</span> byte_count;<span class="hljs-keyword">char</span> * byte_to_write = <span class="hljs-string">'A'</span>;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">region_1</span>;</span><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">region_2</span>;</span><span class="hljs-keyword">int</span> res;file_desc = <span class="hljs-built_in">open</span>(test_file,O_RDWR | O_CREAT , <span class="hljs-number">0666</span>);<span class="hljs-keyword">if</span>(!file_desc)&#123;<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"unable to open file \n"</span>);<span class="hljs-built_in">exit</span>(EXIT_FAILURE);&#125;<span class="hljs-keyword">for</span>(byte_count = <span class="hljs-number">0</span>;byte_count &lt; <span class="hljs-number">100</span>;byte_count ++)&#123;<span class="hljs-built_in">write</span>(file_desc,byte_to_write,<span class="hljs-number">1</span>);&#125;<span class="hljs-comment">/* 10-30 字节设置为区域 1 ，设置共享锁 */</span>region_1.l_type = F_RDLCK;region_1.l_whence = SEEK_SET;region_1.l_start =  <span class="hljs-number">10</span>;region_1.l_len = <span class="hljs-number">20</span>;<span class="hljs-comment">/* 40-50 字节设置为区域 2 ，设置独占锁 */</span>region_2.l_type = F_WRLCK;region_2.l_whence = SEEK_SET;region_2.l_start =  <span class="hljs-number">40</span>;region_2.l_len = <span class="hljs-number">10</span>;<span class="hljs-comment">/* 锁定文件 */</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">" process %d locking file \n "</span>,getpid());res = fcntl(file_desc,F_SETLK,&amp;region_1); <span class="hljs-comment">/* F_SETLK : 区域加锁 */</span><span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"failed to lock region 1\n"</span>);res = fcntl(file_desc,F_SETLK,&amp;region_2); <span class="hljs-comment">/* F_SETLK : 区域加锁 */</span><span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>) <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"failed to lock region 2\n"</span>);sleep(<span class="hljs-number">60</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">"process %d close file \n"</span>,getpid());<span class="hljs-built_in">close</span>(file_desc);<span class="hljs-built_in">exit</span>(EXIT_SUCCESS);&#125;</code></pre><p>2 在另一个进程中读出这些锁</p><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> *测试文件中不同部分的文件锁</span><span class="hljs-comment"> *  use fcntl </span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *test_file = <span class="hljs-string">"./tmp/test_lock.txt"</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIZE_TO_TRY 5</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_lock_info</span><span class="hljs-params">(struct flock * lck)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> file_desc;<span class="hljs-keyword">int</span> res;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">flock</span> <span class="hljs-title">region_to_test</span>;</span><span class="hljs-keyword">int</span> start_byte;file_desc = <span class="hljs-built_in">open</span>(test_file,O_RDWR | O_CREAT,<span class="hljs-number">0X666</span>);<span class="hljs-keyword">if</span>(!file_desc)&#123;<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"Unable to open file \n"</span>);&#125;<span class="hljs-keyword">for</span>(start_byte = <span class="hljs-number">0</span>;start_byte &lt; <span class="hljs-number">99</span> ;start_byte += SIZE_TO_TRY)&#123;<span class="hljs-comment">/* 独占锁 */</span>region_to_test.l_type = F_WRLCK;region_to_test.l_whence = SEEK_SET;region_to_test.l_start = start_byte;region_to_test.l_len = SIZE_TO_TRY;region_to_test.l_pid = <span class="hljs-number">-1</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"testing F_WRLCK on region from %d to %d \n"</span>,start_byte,start_byte+SIZE_TO_TRY);<span class="hljs-comment">/*  F_GETLK   : 获取锁信息 */</span>res = fcntl(file_desc,F_GETLK,&amp;region_to_test);<span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"lock fail,F_WRLCK retutn \n"</span>);<span class="hljs-built_in">exit</span>(EXIT_FAILURE);&#125;<span class="hljs-keyword">if</span>(region_to_test.l_pid != <span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"lock fail,F_WRLCK retutn \n"</span>);show_lock_info(&amp;region_to_test);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" F_WRLCK - Lock would succeed \n"</span>);&#125;<span class="hljs-comment">/* 共享锁 */</span>region_to_test.l_type = F_RDLCK;region_to_test.l_whence = SEEK_SET;region_to_test.l_start = start_byte;region_to_test.l_len = SIZE_TO_TRY;region_to_test.l_pid = <span class="hljs-number">-1</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"testing F_RDLCK on region from %d to %d \n"</span>,start_byte,start_byte+SIZE_TO_TRY);<span class="hljs-comment">/*      F_GETLK : 获取锁信息 */</span>res = fcntl(file_desc,F_GETLK,&amp;region_to_test);<span class="hljs-keyword">if</span>(res == <span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<span class="hljs-string">"lock fail,F_RDLCK retutn \n"</span>);<span class="hljs-built_in">exit</span>(EXIT_FAILURE);&#125;<span class="hljs-keyword">if</span>(region_to_test.l_pid != <span class="hljs-number">-1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"lock fail,F_RDLCK retutn \n"</span>);show_lock_info(&amp;region_to_test);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" F_RDLCK - Lock would succeed \n"</span>);&#125;&#125;<span class="hljs-built_in">close</span>(file_desc);<span class="hljs-built_in">exit</span>(EXIT_SUCCESS);&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_lock_info</span><span class="hljs-params">(struct flock * lck)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" \t1_type %d "</span>, lck-&gt;l_type);<span class="hljs-built_in">printf</span>(<span class="hljs-string">" \t1_whence %d "</span>,  lck-&gt;l_whence);<span class="hljs-built_in">printf</span>(<span class="hljs-string">" \t1_start %d "</span>,   lck-&gt;l_start);<span class="hljs-built_in">printf</span>(<span class="hljs-string">" \t1_len %d "</span>,      lck-&gt;l_len);<span class="hljs-built_in">printf</span>(<span class="hljs-string">" \t1_pid %d \n"</span>,      lck-&gt;l_pid);&#125;</code></pre><h3 id="lockf系统调用"><a href="#lockf系统调用" class="headerlink" title="lockf系统调用"></a>lockf系统调用</h3><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lockf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fildes,<span class="hljs-keyword">int</span> function,<span class="hljs-keyword">off_t</span> size_to_lock)</span></span>;</code></pre><ul><li>function定义如下：</li></ul><pre><code class="hljs css"><span class="hljs-selector-tag">F_ULOCK</span>:解锁<span class="hljs-selector-tag">F_LOCK</span> : 设置独占锁<span class="hljs-selector-tag">F_TLOCK</span> : 测试并设置独占锁<span class="hljs-selector-tag">F_TEST</span> : 测试其他进程设置的锁</code></pre><ul><li>size_to_lock</li></ul><p>操作的字节数，从文件的当前偏移值开始计算</p><blockquote><p>lockf的接口更加简单，但是功能和灵活性比fcntl差一些</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Unix环境编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unix环境编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux应用程序调试方法</title>
    <link href="/2019/05/18/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <url>/2019/05/18/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一-使用strace命令跟踪系统调用"><a href="#一-使用strace命令跟踪系统调用" class="headerlink" title="一 使用strace命令跟踪系统调用"></a>一 使用strace命令跟踪系统调用</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul><li>打补丁</li></ul><pre><code class="hljs bash">patch -p1 &lt; ../xxx.patch</code></pre><ul><li>配置strace &amp;&amp; 编译</li></ul><pre><code class="hljs bash">./configure --host=arm-linux CC=arm-linux-gccmake</code></pre><p>编译完成之后得到一个strace应用程序，拷贝到开发板上就可以使用了<br>使用方法：</p><pre><code class="hljs bash">./strace -o log.txt ./firstdrvtext on</code></pre><p><code>log.txt</code>是调试信息输出的文件，<code>./firstdrvtext on</code>是应用程序使用方法</p><h3 id="简单介绍strace的原理"><a href="#简单介绍strace的原理" class="headerlink" title="简单介绍strace的原理"></a>简单介绍strace的原理</h3><pre><code class="hljs bash">./strace(父进程) -o log.txt ./firstdrvtext on(子进程)</code></pre><p><strong>父进程启动一个子进程，子进程先判断是否被跟踪，如果是，则会发送给父进程一些信号，然后进入休眠，父进程根据信号值决定记录哪些数据，父进程处理完之后（如记录），子进程继续运行。</strong></p><blockquote><p>子进程里面的open,read,write(c库)函数会调用一条swi指令 swi val<br>open   —-  swi  #val1<br>read    —- swi  #val2<br>write   —- swi  #val3<br>这条指令会导致系统swi异常，进入内核态，调用sys_open,sys_read …   </p></blockquote><ul><li>打开内核文件<code>arch/arm/kernel/entry-common.s</code>:</li></ul><pre><code class="hljs bash">...tstip, <span class="hljs-comment">#_TIF_SYSCALL_TRACE@ are we tracing syscalls?</span>bne__sys_trace// 测试标记为，看是否被跟踪，如果被跟踪，则调用__sys_trace...</code></pre><ul><li>__sys_trace：</li></ul><pre><code class="hljs c"><span class="hljs-comment">/*</span><span class="hljs-comment"> * This is the really slow path.  We're going to be doing</span><span class="hljs-comment"> * context switches, and waiting for our parent to respond.</span><span class="hljs-comment"> */</span>__sys_trace:movr2, scnoaddr1, sp, #S_OFFmovr0, #<span class="hljs-number">0</span>@ trace entry [IP = <span class="hljs-number">0</span>]blsyscall_traceadrlr, __sys_trace_return@ <span class="hljs-keyword">return</span> addressmovscno, r0@ syscall number (possibly <span class="hljs-keyword">new</span>)addr1, sp, #S_R0 + S_OFF@ pointer to regscmpscno, #NR_syscalls@ check upper syscall limitldmcciar1, &#123;r0 - r3&#125;@ have to reload r0 - r3ldrccpc, [tbl, scno, lsl #<span class="hljs-number">2</span>]@ call sys_* routineb<span class="hljs-number">2b</span></code></pre><h3 id="strace的其他用法"><a href="#strace的其他用法" class="headerlink" title="strace的其他用法"></a>strace的其他用法</h3><h2 id="二-使用GDB调试应用程序"><a href="#二-使用GDB调试应用程序" class="headerlink" title="二 使用GDB调试应用程序"></a>二 使用GDB调试应用程序</h2><h3 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h3><ul><li>配置 &amp;&amp; 编译 &amp;&amp; 安装</li></ul><pre><code class="hljs bash">./configure --target=arm-linux --<span class="hljs-built_in">disable</span>-werror</code></pre><ul><li>查看安装目录</li></ul><pre><code class="hljs bash">vi makefileprefix = /usr/<span class="hljs-built_in">local</span></code></pre><ul><li>安装目录修改当前目录下的tmp</li></ul><pre><code class="hljs bash">mkdir tmpmake install prefix=<span class="hljs-variable">$PWD</span>/tmp</code></pre><ul><li>配置 &amp;&amp; 编译gdbserver，并复制到网络文件系统</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> gdb/gdbserver./configure --host=arm-linuxmakecp gdbserver /work/fs.. /bin/gdbserver</code></pre><h3 id="GDB远程调试步骤"><a href="#GDB远程调试步骤" class="headerlink" title="GDB远程调试步骤"></a>GDB远程调试步骤</h3><blockquote><p>编译要调试的应用程序，编译时要加上-g选项</p></blockquote><ul><li>在ARM板上</li></ul><pre><code class="hljs bash">gdbserver 192.168.1.17:2345 ./test_debug//  ip是arm板的ip，端口随便写</code></pre><ul><li>在pc机上</li></ul><pre><code class="hljs bash">/bin/arm-linux-gdb  ./test_debugtarget remote 192.168.1.17:2345</code></pre><ul><li>常用命令：</li></ul><pre><code class="hljs bash">l： 查看源码<span class="hljs-built_in">break</span> main  /  <span class="hljs-built_in">break</span> test_debug:31： 打断点 //main函数打断点 /  31行打断点c：继续执行step ：单步调试<span class="hljs-built_in">print</span> *p：输出quit：退出...</code></pre><h3 id="GDB的另一种使用方法"><a href="#GDB的另一种使用方法" class="headerlink" title="GDB的另一种使用方法"></a>GDB的另一种使用方法</h3><blockquote><p>让程序在开发板上直接运行，当它发送错误时，令它产生<strong>core dump</strong>文件<br>然后使用gdb根据core dump文件找到发生错误的地方。</p></blockquote><ul><li>在开发板上输入</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">ulimit</span> -c unlimited</code></pre><ul><li><p>执行应用程序 <code>./test_debug</code> 程序出错会在当前目录下生成名为<code>core</code>的文件</p></li><li><p>拷贝core文件到pc上，pc机上执行：</p></li></ul><pre><code class="hljs bash">cp core /work/xxx/core/bin/arm-linux-gdb  ./test_debug  ./core</code></pre><p>若程序出错，就可以看到很多调试信息。</p><h2 id="三-配置内核，输出应用程序的段错误信息"><a href="#三-配置内核，输出应用程序的段错误信息" class="headerlink" title="三 配置内核，输出应用程序的段错误信息"></a>三 配置内核，输出应用程序的段错误信息</h2><h3 id="配置内核，输出错误信息"><a href="#配置内核，输出错误信息" class="headerlink" title="配置内核，输出错误信息"></a>配置内核，输出错误信息</h3><ul><li>根据应用程序报错的信息在内核源码中搜索：</li></ul><pre><code class="hljs bash">grep <span class="hljs-string">"Unable to handle kernel"</span> * -nR</code></pre><ul><li>找到并打开<code>arch/arm/mm/fault.c</code>,看到下面的函数：</li></ul><pre><code class="hljs c"><span class="hljs-comment">/* 处理应用程序错误函数 */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>__do_user_fault(struct task_struct *tsk, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> addr,<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> fsr, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> sig, <span class="hljs-keyword">int</span> code,struct pt_regs *regs)&#123;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">siginfo</span> <span class="hljs-title">si</span>;</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> ret;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> val;<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_DEBUG_USER<span class="hljs-comment">// 1  配置内核</span></span><span class="hljs-keyword">if</span> (user_debug &amp; UDBG_SEGV) &#123;   <span class="hljs-comment">// 2 设置启动参数</span>printk(KERN_DEBUG <span class="hljs-string">"%s: unhandled page fault (%d) at 0x%08lx, code 0x%03x\n"</span>,       tsk-&gt;comm, sig, addr, fsr);show_pte(tsk-&gt;mm, addr);show_regs(regs);<span class="hljs-comment">/*  开始打印栈信息   */</span>printk(<span class="hljs-string">"Stack: \n"</span>);<span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">1024</span>)&#123;<span class="hljs-keyword">if</span>(copy_from_user(&amp;val,(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> __user *)(regs-&gt;ARM_sp+i*<span class="hljs-number">4</span>),<span class="hljs-number">4</span>)<span class="hljs-keyword">break</span>;printk(<span class="hljs-string">"%08x "</span>,val);i++;<span class="hljs-keyword">if</span>(i % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>)printk(<span class="hljs-string">"\n"</span>);&#125;printk(<span class="hljs-string">"\nEnd of stack \n"</span>);<span class="hljs-comment">/*  打印栈信息结束   */</span>&#125;#endiftsk-&gt;thread.address = addr;tsk-&gt;thread.error_code = fsr;tsk-&gt;thread.trap_no = <span class="hljs-number">14</span>;si.si_signo = sig;si.si_errno = <span class="hljs-number">0</span>;si.si_code = code;si.si_addr = (<span class="hljs-keyword">void</span> __user *)addr;force_sig_info(sig, &amp;si, tsk);&#125;</code></pre><ul><li>配置内核 CONFIG_DEBUG_USER</li></ul><pre><code class="hljs bash">make menuconfig /DEBUG_USER  //  搜索，配置成ymake uImage</code></pre><ul><li>uboot设置启动参数 user_debug</li></ul><pre><code class="hljs bash"><span class="hljs-built_in">set</span> bootargs user_debug=0xff ... ...</code></pre><ul><li>执行./test_debug，可以看到调试信息和寄存器的值</li><li>反汇编app</li></ul><pre><code class="hljs bash">arm-linux-objdump -D test_debug &gt; test_debug.dis</code></pre><p>在反汇编中找到pc值处的代码，根据寄存器的值找到程序出错的原因</p><h3 id="修改内核，打印栈信息"><a href="#修改内核，打印栈信息" class="headerlink" title="修改内核，打印栈信息"></a>修改内核，打印栈信息</h3><p><code>struct pt_regs</code> 包含发生错误的瞬间所有寄存器的值：</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> &#123;</span><span class="hljs-keyword">long</span> uregs[<span class="hljs-number">18</span>];&#125;;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_cpsruregs[16]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_pcuregs[15]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_lruregs[14]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_spuregs[13]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_ipuregs[12]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_fpuregs[11]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r10uregs[10]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r9uregs[9]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r8uregs[8]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r7uregs[7]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r6uregs[6]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r5uregs[5]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r4uregs[4]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r3uregs[3]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r2uregs[2]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r1uregs[1]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_r0uregs[0]</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARM_ORIG_r0uregs[17]</span></code></pre><p>在<code>arch/arm/mm/__do_user_fault</code>中加入下面的代码：</p><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> ret;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> val;<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;printk(<span class="hljs-string">"Stack: \n"</span>);<span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">1024</span>)&#123;<span class="hljs-comment">/* 从堆栈指针sp处开始打印栈信息 */</span><span class="hljs-keyword">if</span>(copy_from_user(&amp;val,(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> __user *)(regs-&gt;ARM_sp+i*<span class="hljs-number">4</span>),<span class="hljs-number">4</span>)  <span class="hljs-keyword">break</span>; printk(<span class="hljs-string">"%08x "</span>,val);i++;<span class="hljs-keyword">if</span>(i % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>)printk(<span class="hljs-string">"\n"</span>);&#125;printk(<span class="hljs-string">"\nEnd of stack \n"</span>);</code></pre><ul><li>重新编译内核,复制到网络文件系统，并用新内核启动</li></ul><pre><code class="hljs bash">make uImage cp arch/arm/uImage  /work/nfs_root/fs_mini_mdev/uImagerebootnfs 32000000 192.168.1.123:/work/.../uImage_new</code></pre><p><strong>main函数被动态库调用，怎么知道动态库的地址？</strong></p><ul><li>方法1</li></ul><pre><code class="hljs bash">ps //查看进程IDcat /proc/xxx(进程ID)cat maps      //    查看应用程序里面各段地址</code></pre><ul><li>方法2，使用gdb调试,先启动gdb,使用命令<code>info file</code>查看程序里面的各个段</li></ul><blockquote><p>动态链接不容易看程序调用信息，把应用程序编译成静态链接的方式：</p></blockquote><pre><code class="hljs bash">arm-linux-gcc -o <span class="hljs-built_in">test</span> test.c -static</code></pre><h2 id="四-自制系统调用"><a href="#四-自制系统调用" class="headerlink" title="四 自制系统调用"></a>四 自制系统调用</h2><blockquote><p>ps:这种方法很少用，也比较繁琐，适合长时间打印调试信息</p></blockquote><h3 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h3><p>app 调用<code>open read write</code>函数，导致：swi #val<br>程序跳转到<code>vector_swi</code>处去执行，得到“导致异常的指令”，取出里面的val,根据这个val调用对应的处理函数，如<code>sys_open,sys_write，sys_read...</code><br>这些函数在一个数组里，通过查找数组调用对应的函数。   </p><ul><li>仿照这种形式写一个自己的系统调用</li></ul><h3 id="自制系统调用"><a href="#自制系统调用" class="headerlink" title="自制系统调用"></a>自制系统调用</h3><ul><li><strong>写一个应用函数，仿glibc，用来触发系统调用</strong>   <blockquote><p>仿照glibc里面的brk.c里面的_brk函数（c嵌入汇编的形式）</p></blockquote></li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;errno.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_OABI_SYSCALL_BASE0x900000</span><span class="hljs-comment">//#if defined(__thumb__) || defined(__ARM_EABI__)</span><span class="hljs-comment">//#define __NR_SYSCALL_BASE0</span><span class="hljs-comment">//#else</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __NR_SYSCALL_BASE__NR_OABI_SYSCALL_BASE</span><span class="hljs-comment">//#endif</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *buf ,<span class="hljs-keyword">int</span> count )</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">/* swi */</span> <span class="hljs-keyword">asm</span> (<span class="hljs-string">"mov r0, %0\n"</span><span class="hljs-comment">/* save the argment in r0 */</span>          <span class="hljs-string">"mov r1, %1\n"</span><span class="hljs-comment">/* save the argment in r0 */</span>          <span class="hljs-string">"swi %2\n"</span><span class="hljs-comment">/* do the system call */</span>          :           : <span class="hljs-string">"r"</span>(buf),<span class="hljs-string">"r"</span>(count), <span class="hljs-string">"i"</span> (__NR_SYSCALL_BASE + <span class="hljs-number">352</span>)          : <span class="hljs-string">"r0"</span>,<span class="hljs-string">"r1"</span>);<span class="hljs-comment">/* 过程中会改变的寄存器 */</span>&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc , <span class="hljs-keyword">char</span> ** argv)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">" in app, call hello  \n"</span>);<span class="hljs-comment">/* 执行hello函数触发一个swi指令异常 */</span>hello(<span class="hljs-string">"tjpuzh.top"</span>,<span class="hljs-number">10</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><ul><li><strong>修改内核，添加系统调用函数的声明和实现</strong> </li><li>声明： </li></ul><pre><code class="hljs c">include\linux\syscalls.h中加入<span class="hljs-function">asmlinkage <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">sys_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user *buf,<span class="hljs-keyword">int</span> count)</span></span>;</code></pre><ul><li>实现：</li></ul><pre><code class="hljs c">在\fs\read_write.c中实现sys_hello<span class="hljs-function">asmlinkage <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">sys_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user * buf,<span class="hljs-keyword">int</span> count)</span></span><span class="hljs-function"></span>&#123;... ... <span class="hljs-comment">// 此处实现想要实现的功能，如open,read,write...</span>&#125;</code></pre><ul><li>添加 </li></ul><pre><code class="hljs bash">在 arch\arm\kernel\calls.S中，最后加入一项CALL(sys_hello)</code></pre><ul><li>测试</li></ul><pre><code class="hljs bash">make uImagecp arch/arm/uImage /work/nfs_root/fs_mini_mdev/uImagerebootnfs 32000000 192.168.3.123:/work/nfs_root/fs_mini_mdev/uImage_hellobootm 32000000</code></pre><h3 id="使用自制系统调用来打输出调试信息"><a href="#使用自制系统调用来打输出调试信息" class="headerlink" title="使用自制系统调用来打输出调试信息"></a>使用自制系统调用来打输出调试信息</h3><p> <strong>整体流程</strong></p><ul><li>修改应用程序的可执行文件，替换“某个位置”的代码为swi val   </li><li>执行程序   </li><li>执行到断点处，进入sys_hello    </li><li>在sys_hello,打印调试信息，执行原来的指令，返回</li></ul><p><strong>测试步骤</strong></p><ul><li>写一个简单的应用程序 : <code>debug_with_system_call.c</code></li><li>替换            </li></ul><ol><li>输出反汇编文件</li></ol><pre><code class="hljs bash">arm-linux-objdump -D debug_with_system_call &gt; debug_with_system_call.dis</code></pre><ol start="2"><li><p>根据适合打断点的指令，找到合适机器码<br><img src="/img/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/1.png" srcset="/img/loading.gif" alt=""></p></li><li><p>反汇编自制系统调用的测试程序，可以看到swi指令的机器码</p></li></ol><pre><code class="hljs bash">arm-linux-objdump -D test_system_call &gt; test_system_call.dis</code></pre><p><img src="/img/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/3.png" srcset="/img/loading.gif" alt="">   </p><ol start="4"><li>修改应用程序的机器码为swi指令的机器码   </li></ol><p><img src="/img/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/2.png" srcset="/img/loading.gif" alt="">    </p><p><img src="/img/Linux%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/4.png" srcset="/img/loading.gif" alt="">  </p><p>保存为  </p><pre><code class="hljs bash">debug_with_system_call_swi</code></pre><p>加上执行权限：</p><pre><code class="hljs bash">sudo chmod +x debug_with_system_call_swi</code></pre><ul><li>修改自制的sys_hello函数</li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/processor.h&gt;</span></span><span class="hljs-function">asmlinkage <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">sys_hello</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user * buf,<span class="hljs-keyword">int</span> count)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> val;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pt_regs</span> *<span class="hljs-title">regs</span>;</span><span class="hljs-comment">/* 1 输出一些打印调试信息 */</span><span class="hljs-comment">/* 应用程序的反汇编里：00010788 &lt;cnt&gt; */</span>copy_from_user(&amp;val,(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> __user *)<span class="hljs-number">0x00010788</span>,<span class="hljs-number">4</span>);printk(<span class="hljs-string">"sys_hello:val = %d\n"</span>,val);<span class="hljs-comment">/* 2 执行被替换的指令: add r3, r3, #2; 0x2 */</span><span class="hljs-comment">// 搜索pt_regs，在它的结果里再搜索current</span>regs = task_pt_regs(current);regs-&gt;ARM_r3 += <span class="hljs-number">2</span>;<span class="hljs-comment">/* 3 反回 */</span><span class="hljs-keyword">return</span>;&#125;</code></pre><ul><li>运行</li></ul><pre><code class="hljs bash">./debug_with_system_call_swi</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>call back机制</title>
    <link href="/2019/04/21/callback%E6%9C%BA%E5%88%B6/"/>
    <url>/2019/04/21/callback%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ps:最近在做ffmpeg+rtmp的视频直播，这算是里面用到的一个小技术点。实际上这个技术<strong>很常用很常用</strong>，重要的事情多说一遍。</p></blockquote><h2 id="什么是call-back？"><a href="#什么是call-back？" class="headerlink" title="什么是call back？"></a>什么是call back？</h2><ul><li><strong>call back的定义</strong><blockquote><p>callback,又叫回调函数，是指用函数指针的形式将函数作为另一个函数的参数，当这个指针所指向的函数被调用时，这个函数就叫回调函数。</p></blockquote></li></ul><p>听起来是不是挺简单的，但是本文介绍的重点不在于如何定义一个函数指针，也不在于如何通过函数指针调用一个函数，而是介绍回调函数机制，重点在机制的分析，也就是通过回调函数的技术实现某些特定的功能。</p><hr><p>emmmm, 好吧，还是先介绍一下如何定义一个函数指针：</p><pre><code class="hljs c"><span class="hljs-keyword">void</span> (*function_callback)(AVFrame *pframe);</code></pre><p>这种定义方法当然没错，但是将这么长的一个式子放进另一个函数中作为参数，代码就有点不好看</p><ul><li>我们可以这么做：</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*function_callback)</span><span class="hljs-params">(AVFrame *pframe)</span></span>;function_callback updatecallback；</code></pre><p>注意，下面这两行代码里面的<code>function_callback</code>就<strong>不是一个具体的函数指针</strong>了，这是通过typedef定义的一个<strong>函数指针类型</strong>，通过这个函数指针类型定义了一个函数指针<code>updatecallback</code>。<br>也许你会问，typedef的形式不是应该像下面这样吗？</p><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span>* pchar;</code></pre><p>原因是，在定义函数声明时，会将函数指针放到前面，使其看起来像一个完整的函数形式，如果把函数指针拿到后面，不就和这种形式一样了麽？</p><p>对于回调函数，还有一种说法:</p><blockquote><p>用户调用windows api叫做call, 就是调用，<br>windows api调用用户的函数叫call back</p></blockquote><p>有这种说法的存在是因为windows的内核中确实存在大量的回调函数需要用户去实现，但实际上这是回调函数的一种应用场景，call back还有其他的很多应用场景，在下面介绍。</p><h2 id="callback的应用场景"><a href="#callback的应用场景" class="headerlink" title="callback的应用场景"></a>callback的应用场景</h2><p><strong>线程同步，底层代码与GUI交互，一个接口多个实现等</strong></p><p>线程同步有很多种方式，其中    qt中有信号与槽的方式，在线程A中发送信号，线程B接受到信号执行槽函数，在linux中有信号量等，，，</p><ul><li><p><strong>使用callback的实现方法如下：</strong></p></li><li><p>模块A在完成某一操作后需要调用模块B的操作</p><blockquote><p>  如ffmpeg在视频解码完毕之后需要调用GUI层的函数来渲染图像，但是不同的平台的GUI又一样或者说GUI与ffmpeg不在一个线程中，在写ffmpeg的时候不知道调用哪个，此时，就可以用回调函数。<br> 不管这个是什么函数，先用函数指针的形式定义出来，再把它放在应该放的位置调用，最后提供一个设置callback的接口setcallback。<br> 别的模块按照这个函数指针的格式实现一个具体的函数，再调用setcallback的接口设置这个callback</p></blockquote></li><li><p><strong>一个接口多个实现</strong><br>看例子：</p></li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMsg1</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is the message 1!\n"</span>);&#125; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMsg2</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is the message 2!\n"</span>);&#125; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMsg3</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"This is the message 3!\n"</span>);&#125; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowMessage</span><span class="hljs-params">(<span class="hljs-keyword">void</span> (* p)())</span></span>&#123;p;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;   ShowMessage(PrintMsg1);   ShowMessage(PrintMsg2);   ShowMessage(PrintMsg3);&#125;</code></pre><p><strong>callback的优点：灵活，跨平台</strong></p><p><img src="/img/callback%E6%9C%BA%E5%88%B6/callback.png" srcset="/img/loading.gif" alt=""></p><h2 id="实现线程同步的代码示例"><a href="#实现线程同步的代码示例" class="headerlink" title="实现线程同步的代码示例"></a>实现线程同步的代码示例</h2><ul><li><strong>ffmpeg解码线程：</strong></li><li>声明：</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*function_callback)</span><span class="hljs-params">(AVFrame *pframe)</span></span>;function_callback updatecallback;</code></pre><ul><li>定义setupcallback：</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setupcallback</span><span class="hljs-params">(function_callback callback)</span></span><span class="hljs-function"></span>&#123;updatecallback = callback;&#125;</code></pre><ul><li>callback使用：</li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start_decode</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;...<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;...avcodec_decode_video2(pOutCodecCtx,&amp;pframe,&amp;dec_got_frame,&amp;pkt);<span class="hljs-comment">// 解码</span>updatecallback(&amp;pframe);<span class="hljs-comment">// 刷新GUI</span>...&#125;...&#125;</code></pre><ul><li><p><strong>qt gui线程</strong></p></li><li><p>实现callback:</p></li></ul><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onUpdateDecodedVideoData</span><span class="hljs-params">(AVFrame *pframe)</span></span><span class="hljs-function"></span>&#123;...&#125;</code></pre><ul><li>调用setupcallback把上面的函数替换掉ffmpeg线程里的函数</li></ul><pre><code class="hljs c">setupcallback(onUpdateDecodedVideoData);</code></pre><p><strong>这里需要注意以下几点：</strong><br>C++类成员函数的callback函数一般是静态的，原因在于C++的普通成员函数的参数会有一个默认的this，会导致callback函数的参数不匹配，编译器报错。<br>静态的成员函数无法调用非静态的成员变量，解决这个问题有个简单的方法就是在类内部定义一个静态的对象指针，把this指针赋值给这个静态的对象指针，在静态成员函数中使用这个静态对象代替this调用类内部的成员变量。</p><hr><p><font color=gray size=1>技术是在不断的讨论中进步的，如所述有不妥之处，希望能联系 <a href="mailto:devtty@qq.com">devtty@qq.com</a> 进行指正，万分感谢！ </font></p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>热拔插驱动</title>
    <link href="/2019/04/16/%E7%83%AD%E6%8B%94%E6%8F%92%E9%A9%B1%E5%8A%A8/"/>
    <url>/2019/04/16/%E7%83%AD%E6%8B%94%E6%8F%92%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="热拔插驱动"><a href="#热拔插驱动" class="headerlink" title="热拔插驱动"></a>热拔插驱动</h2><ul><li>hotplug/uevent机制</li></ul><h3 id="hotplug内核框架"><a href="#hotplug内核框架" class="headerlink" title="hotplug内核框架"></a>hotplug内核框架</h3><pre><code class="hljs c">class_device_createclass_device_registerclass_device_addkobject_ueventkobject_uevent_env(kobj, action, <span class="hljs-literal">NULL</span>)   <span class="hljs-comment">// action_string  = “add”</span>action_string = action_to_string(action)<span class="hljs-comment">/* 分配保存环境变量的内存 */</span><span class="hljs-comment">/* environment values */</span><span class="hljs-built_in">buffer</span> = kmalloc(BUFFER_SIZE, GFP_KERNEL)<span class="hljs-comment">/* 设置环境变量 */</span>scratch = <span class="hljs-built_in">buffer</span>;envp [i++] = scratch;scratch += <span class="hljs-built_in">sprintf</span>(scratch, <span class="hljs-string">"ACTION=%s"</span>, action_string) + <span class="hljs-number">1</span>;envp [i++] = scratch;scratch += <span class="hljs-built_in">sprintf</span> (scratch, <span class="hljs-string">"DEVPATH=%s"</span>, devpath) + <span class="hljs-number">1</span>;envp [i++] = scratch;scratch += <span class="hljs-built_in">sprintf</span>(scratch, <span class="hljs-string">"SUBSYSTEM=%s"</span>, subsystem) + <span class="hljs-number">1</span>;<span class="hljs-comment">/* 调用应用程序：比如mdev */</span>argv [<span class="hljs-number">0</span>] = uevent_helper; = “mdev”argv [<span class="hljs-number">1</span>] = (<span class="hljs-keyword">char</span> *)subsystem;argv [<span class="hljs-number">2</span>] = <span class="hljs-literal">NULL</span>;call_usermodehelper (argv[<span class="hljs-number">0</span>], argv, envp, <span class="hljs-number">0</span>);</code></pre><ul><li>过程总结：</li></ul><blockquote><p>上述的代码从<code>class_device_class</code>开始,创建一个设备节点，然后层层深入每个函数调用的关键函数，最终找到<code>kobject_uevent</code>函数，根据传入的action，如<code>add</code>命令,则分配环境变量所需要的内存，再设置环境变量，设置完毕之后，调用<code>call_usermodehelper</code>,调用一个应用程序，这个应该程序会根据环境变量创建设备节点，这个外部函数一般设置为<code>/sbin/mdev</code></p></blockquote><ul><li><p>mdev介绍</p><blockquote><p>mdev是busybox中的一个udev管理程序的精简版本，它也可以自己创建设备节点和设备的自动挂载，只是mdev是被hotplug直接调用<br>mdev扫描/sys/class和/sys/block中所有的类设备目录，如果在目录中含有名为”dev”的文件，且文件中包含的是设备号，则mdev就利用这些信息为这个设备在/dev下创建设备节点</p></blockquote></li><li><p>为什么是/sbin/mdev？</p><blockquote><p>启动脚本<code>cat /etc/init.d/rcS</code>:<br> <code>echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</code>设置了uevent_helper 为“/sbin/mdev”.</p></blockquote></li></ul><h3 id="如何实现自动挂载"><a href="#如何实现自动挂载" class="headerlink" title="如何实现自动挂载"></a>如何实现自动挂载</h3><ul><li><p>如果想实现U盘的自动挂载<br>1 内核支持hotplug<br>2 需要编辑配置文件<code>/etc/mdev.conf</code>,该文件的作用是在找到匹配设备时自动执行自定义命令</p><p><strong>mdev.conf的格式</strong> </p></li></ul><pre><code class="hljs c">&lt;device regex&gt; &lt;uid&gt;:&lt;gid&gt; &lt;octal permissions&gt; [&lt;@|$|*&gt; &lt;command&gt;]</code></pre><blockquote><p><code>device regex</code> 正则表达式，表示哪一个设备<br><code>uid</code> owner<br><code>gid</code> 组ID<br><code>octal permissions</code>  以八进制表示的属性，默认660<br><code>@</code>  创建设备节点之后执行命令<br><code>$</code> 删除设备节点之前执行命令<br><code>*</code> 创建设备节点之后执行，删除设备节点之前执行命令<br><code>command</code> 要执行的命令</p></blockquote><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul><li>什么是正则表达式：            <blockquote><p>1 在电脑上查文件，<em>.c :  *是通配符，表示任意字符<br>2 更精确的查找，使用正则表达式<br>  <code>.</code>表示任意字符（换行符除外）<br>  `</em> <code>表示重复0次或者更多次</code>+<code>表示重复1次或者更多次</code>？<code>表示重复0次或者1次</code>[  xxx  ] <code>表示这些字符里面的某一个，如</code>[abc]<code>、</code>[1~9]`</p></blockquote></li></ul><h4 id="写mdev-conf-参考-busybox-的-mdev-txt"><a href="#写mdev-conf-参考-busybox-的-mdev-txt" class="headerlink" title="写mdev.conf:(参考 busybox 的 mdev.txt )"></a>写mdev.conf:(参考 busybox 的 mdev.txt )</h4><p>1 <strong>实现led驱动在挂载时输出相关信息</strong>   </p><p>1.1 原始的做法</p><pre><code class="hljs c">vi /etc/mdev.confleds <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span>led1 <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span>led2 <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span>led3 <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span></code></pre><p>1.2 修改为    </p><pre><code class="hljs c">leds? [<span class="hljs-number">123</span>]? <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span></code></pre><p>1.3 添加打印命令   </p><pre><code class="hljs c">leds? [<span class="hljs-number">123</span>]? <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span> * echo create /dev/$MDEV &gt; /dev/console</code></pre><p>1.4 改成输入输出打印不同的命令</p><pre><code class="hljs c">leds? [<span class="hljs-number">123</span>]? <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span> * <span class="hljs-keyword">if</span> [ $ACTION = “add”]; then echo create /dev/$MDEV &gt; /dev/console; <span class="hljs-keyword">else</span> echo <span class="hljs-built_in">remove</span> /dev/$MDEV &gt; /dev/console;</code></pre><p>1.5 把上面的命令写入一个脚本 add_remove_led.sh</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$ACTION</span> = “add”]<span class="hljs-keyword">then</span><span class="hljs-built_in">echo</span> create /dev/<span class="hljs-variable">$MDEV</span> &gt; /dev/console;<span class="hljs-keyword">else</span><span class="hljs-built_in">echo</span> remove /dev/<span class="hljs-variable">$MDEV</span> &gt; /dev/console;<span class="hljs-keyword">fi</span></code></pre><p>1.6 再修改/etc/mdev.conf文件</p><pre><code class="hljs c">leds?[<span class="hljs-number">123</span>]? <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span> * /bin/add_remove_led.sh</code></pre><p>2 <strong>设置U盘自动挂载</strong></p><pre><code class="hljs c">sda[<span class="hljs-number">1</span><span class="hljs-number">-9</span>]+ <span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">777</span> * <span class="hljs-keyword">if</span> [$ACTION = “add”];then mount /dev/$MDEV /mnt; <span class="hljs-keyword">else</span> umount /mnt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DMA驱动</title>
    <link href="/2019/04/11/DMA%E9%A9%B1%E5%8A%A8/"/>
    <url>/2019/04/11/DMA%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="DMA驱动"><a href="#DMA驱动" class="headerlink" title="DMA驱动"></a>DMA驱动</h1><h2 id="DMA驱动-1"><a href="#DMA驱动-1" class="headerlink" title=" DMA驱动 "></a><font color=gray size=1> DMA驱动 </font></h2><h2 id="一-DMA简介"><a href="#一-DMA简介" class="headerlink" title="一 DMA简介"></a>一 DMA简介</h2><p>DMA：Direct Memory Access 直接内存存取     </p><p>根据2440的芯片手册，DMA分为四种工作模式：</p><blockquote><ul><li>数据传输源地址在系统总线，数据传输目的地址在外部总线</li><li>数据传输源地址在系统总线，数据传输目的地址在系统总线</li><li>数据传输源地址在外部总线，数据传输目的地址在外部总线</li><li>数据传输源地址在外部总线，数据传输目的地址在系统总线</li></ul></blockquote><p>简而言之，DMA的作用就是用来进行数据的传输，而传输的过程不需要CPU的参与，可以为<br>系统减负。</p><p>对DMA的设置分为以下几个步骤：</p><ol><li>把源告诉DMA</li><li>把目的告诉DMA</li><li>把size告诉DMA</li><li>设置DMA的参数</li><li>启动DMA</li></ol><h2 id="二-DMA驱动代码分析"><a href="#二-DMA驱动代码分析" class="headerlink" title="二 DMA驱动代码分析"></a>二 DMA驱动代码分析</h2><h3 id="驱动入口函数"><a href="#驱动入口函数" class="headerlink" title="驱动入口函数"></a>驱动入口函数</h3><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dma_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span>(request_irq(IRQ_DMA3,s3c_dma_irq,<span class="hljs-number">0</span>,<span class="hljs-string">"s3c_dma"</span>,<span class="hljs-number">1</span>))&#123;printk(<span class="hljs-string">"can not request irq for dma \n"</span>);<span class="hljs-keyword">return</span> -EBUSY;&#125;src = dma_alloc_writecombine(<span class="hljs-literal">NULL</span>, BUFF_SIZE, &amp;src_phy, GFP_KERNEL);<span class="hljs-keyword">if</span>(src == <span class="hljs-literal">NULL</span>)&#123;free_irq(IRQ_DMA3,<span class="hljs-number">1</span>);printk(<span class="hljs-string">" can not alloc buffer for src \n"</span>);<span class="hljs-keyword">return</span> -ENOMEM;&#125;des = dma_alloc_writecombine(<span class="hljs-literal">NULL</span>, BUFF_SIZE, &amp;des_phy, GFP_KERNEL);<span class="hljs-keyword">if</span>(des == <span class="hljs-literal">NULL</span>)&#123;free_irq(IRQ_DMA3,<span class="hljs-number">1</span>);printk(<span class="hljs-string">" can not alloc buffer for des \n"</span>);dma_free_writecombine(<span class="hljs-literal">NULL</span>, BUFF_SIZE, &amp;src_phy, GFP_KERNEL);<span class="hljs-keyword">return</span> -ENOMEM;&#125;major = register_chrdev(<span class="hljs-number">0</span>, <span class="hljs-string">"s3c_dma"</span>, &amp;dma_fops);cls = class_create(THIS_MODULE,<span class="hljs-string">"s3c_dma"</span>);class_device_create(cls, <span class="hljs-literal">NULL</span>, MKDEV(major,<span class="hljs-number">0</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-string">"dma"</span>); <span class="hljs-comment">/* /dev/dma */</span>p_s3c_regs = ioremap(S3C_DMA3_BASE, <span class="hljs-keyword">sizeof</span>(struct s3c_dma_regs));<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>驱动入口函数分析：        </p><ol><li>注册DMA中断函数，在ioctl函数中，启动DMA之后进入休眠，此中断函数是用于在DMA<br>传输完成之后唤醒ioctl.</li><li>dma_alloc_writecombine ： 用来分配源和目的的buffer,此处不能用kmalloc，原因在于kmalloc分配到的内存地址不一定连续，而DMA传输需要<strong>源和目的的地址都是连续的</strong></li><li>register_chrdev：注册一个字符设备驱动，把dma_fops注册进内核，<strong>dma的操作一般使用的是ioctl，而不是rend/write</strong></li><li>class_create：创建一个类</li><li>class_device_create：在这个类下面创建一个字符设备节点</li><li>ioremap：分配DMA寄存器的虚拟地址</li></ol><h3 id="ioctl函数"><a href="#ioctl函数" class="headerlink" title="ioctl函数"></a>ioctl函数</h3><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">s3c_dma_ioctl</span> <span class="hljs-params">(struct inode * node, struct file *file, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> cmd, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> arg)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i;<span class="hljs-built_in">memset</span>(src,<span class="hljs-number">0X55</span>,BUFF_SIZE);<span class="hljs-built_in">memset</span>(des,<span class="hljs-number">0XAA</span>,BUFF_SIZE);<span class="hljs-keyword">switch</span>(cmd)&#123;<span class="hljs-keyword">case</span> NO_USE_DMA :&#123;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;BUFF_SIZE;i++)&#123;des[i] = src[i];&#125;<span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(des,src,BUFF_SIZE) == <span class="hljs-number">0</span>)&#123;printk(<span class="hljs-string">"NO_USE_DMA OK \n"</span>);&#125;<span class="hljs-keyword">else</span>&#123;printk(<span class="hljs-string">"NO_USE_DMA ERROR \n"</span>);&#125;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">case</span> USE_DMA:&#123;ev_dma = <span class="hljs-number">0</span>;p_s3c_regs-&gt;disrc = src_phy;<span class="hljs-comment">/* 把源,目的,长度告诉DMA */</span>p_s3c_regs-&gt;disrc      = src_phy;        <span class="hljs-comment">/* 源的物理地址 */</span>p_s3c_regs-&gt;disrcc     = (<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">1</span>) | (<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">0</span>); <span class="hljs-comment">/* 源位于AHB总线, 源地址递增 */</span>p_s3c_regs-&gt;didst      = des_phy;        <span class="hljs-comment">/* 目的的物理地址 */</span>p_s3c_regs-&gt;didstc     = (<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">2</span>) | (<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">1</span>) | (<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">0</span>); <span class="hljs-comment">/* 目的位于AHB总线, 目的地址递增 */</span>p_s3c_regs-&gt;dcon       = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30</span>)|(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">29</span>)|(<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">28</span>)|(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">27</span>)|(<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">23</span>)|(<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-number">20</span>)|(BUFF_SIZE&lt;&lt;<span class="hljs-number">0</span>);  <span class="hljs-comment">/* 使能中断,单个传输,软件触发, */</span><span class="hljs-comment">/* 启动DMA */</span>p_s3c_regs-&gt;dmasktrig  = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>) | (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">0</span>);<span class="hljs-comment">/* 如何知道DMA转换完成？ */</span><span class="hljs-comment">/* 休眠 */</span>wait_event_interruptible(dma_waittq, ev_dma);<span class="hljs-keyword">if</span>(<span class="hljs-built_in">memcmp</span>(des,src,BUFF_SIZE) == <span class="hljs-number">0</span>)&#123;printk(<span class="hljs-string">"USE_DMA OK \n"</span>);&#125;<span class="hljs-keyword">else</span>&#123;printk(<span class="hljs-string">"USE_DMA ERROR \n"</span>);&#125;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>ioctl函数分析：</p><ol><li>函数中通过用户传入的数选择使用DMA还是不使用DMA</li><li>wait_event_interruptible(dma_waittq, ev_dma)：函数进入休眠,参数定义如下：</li></ol><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">DECLARE_WAIT_QUEUE_HEAD</span><span class="hljs-params">(dma_waittq)</span></span>;<span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> ev_dma = <span class="hljs-number">0</span>;</code></pre><p>进入iotcl函数时，把ev_dma设置为0，休眠ioctl<br>DMA传输完成时，把ev_dma设置为1，唤醒ioctl,唤醒的中断函数如下：</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">irqreturn_t</span> <span class="hljs-title">s3c_dma_irq</span><span class="hljs-params">(<span class="hljs-keyword">int</span> irq, <span class="hljs-keyword">void</span> *devid)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">/* 唤醒 */</span>ev_dma = <span class="hljs-number">1</span>;wake_up_interruptible(&amp;dma_waittq);<span class="hljs-comment">/* 唤醒休眠的进程 */</span><span class="hljs-keyword">return</span> IRQ_HANDLED;&#125;</code></pre><p>以上就是DMA的一个简单的试验，在虚拟机上将DMA测试文件放在后台运行，再输入ls等指令，使用DMA和不使用DMA，CPU对指令的反应速度有很大的差距。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>原先做电池管理时，在STM32上做ADC采集数据，一次需要16路ADC的数据，所以将ADC配置成了DMA模式，减轻CPU工作量的效果还是很明显的。其实，还有别的外设也是可以配置成DMA模式的。</p><h2 id="DMA驱动-2"><a href="#DMA驱动-2" class="headerlink" title=" DMA驱动 "></a><font color=gray size=1> DMA驱动 </font></h2>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符设备驱动</title>
    <link href="/2019/04/03/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    <url>/2019/04/03/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="字符设备驱动"><a href="#字符设备驱动" class="headerlink" title="字符设备驱动"></a>字符设备驱动</h1><h2 id="之前的框架"><a href="#之前的框架" class="headerlink" title="之前的框架"></a>之前的框架</h2><pre><code class="hljs markdown"><span class="hljs-bullet">- </span>确定主设备号<span class="hljs-bullet">- </span>file_operation结构体<span class="hljs-bullet">- </span>register_chrdecv<span class="hljs-bullet">- </span>入口<span class="hljs-bullet">- </span>出口</code></pre><p><strong>缺点：只有255个字符设备驱动</strong></p><blockquote><p><strong>之前：以主设备号为下标，在chardev里面找到之前注册的file_operations</strong><br><strong>现在：以主设备号和次设备号来找到file_operation结构体</strong></p></blockquote><h2 id="现在的框架"><a href="#现在的框架" class="headerlink" title="现在的框架"></a>现在的框架</h2><p>register_chardev拆分为以下几个部分：</p><pre><code class="hljs c">__register_chrdev_regioncdev_alloccdev_initcdev_add</code></pre><h4 id="具体框架分析"><a href="#具体框架分析" class="headerlink" title="具体框架分析"></a>具体框架分析</h4><hr><ul><li>构造file_operation结构体</li></ul><pre><code class="hljs c">.owner = THIS_MODULE.<span class="hljs-built_in">open</span>  = hello</code></pre><ul><li>注册字符设备驱动</li></ul><pre><code class="hljs c"><span class="hljs-keyword">if</span> majorMKDEVregister_chrdev_region<span class="hljs-keyword">else</span> alloc_chrdev_region  <span class="hljs-comment">//自动分配主设备号</span></code></pre><ul><li>定义一个cdev结构体，并初始化</li></ul><pre><code class="hljs c">cdev_initcdev_add</code></pre><ul><li>创建类，自动创建设备节点</li></ul><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">class</span> <span class="hljs-title">cls</span>;</span>cls = class_createclass_device_create</code></pre><ul><li>出口函数</li></ul><pre><code class="hljs c">class_device_destroyclass_destroycdev_delunregister_chrdev_region</code></pre><ul><li>测试程序</li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><span class="hljs-comment">/*</span><span class="hljs-comment"> * hello_test /dev/hello</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_usage</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *file)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s &lt;dev&gt; \n"</span>,file);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> *argv[])</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> fd;<span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>)&#123;print_usage(argv[<span class="hljs-number">0</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;fd = <span class="hljs-built_in">open</span>(argv[<span class="hljs-number">1</span>],O_RDWR);<span class="hljs-keyword">if</span>(fd&lt;<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"can not open %s \n"</span>,argv[<span class="hljs-number">1</span>]);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"can open %s \n"</span>,argv[<span class="hljs-number">1</span>]);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="驱动部分代码"><a href="#驱动部分代码" class="headerlink" title="驱动部分代码"></a>驱动部分代码</h4><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/fs.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/delay.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/irq.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/uaccess.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/irq.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/io.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/arch/regs-gpio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/hardware.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/poll.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/cdev.h&gt;</span></span><span class="hljs-comment">/* 1  确定主设备号 */</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> major = <span class="hljs-number">0</span>;<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev_hello</span>;</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev2_hello</span>;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_HELLO 2</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">dev_t</span> devid;<span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">class</span> *<span class="hljs-title">cls</span>;</span><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">hello_open</span><span class="hljs-params">(struct inode *node,struct file *file)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">static</span> count = <span class="hljs-number">0</span>;printk(<span class="hljs-string">"hello1 is open %d \n"</span>,++count);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">hello2_open</span><span class="hljs-params">(struct inode *node,struct file *file)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">static</span> count = <span class="hljs-number">0</span>;  printk(<span class="hljs-string">"hello2 is open %d \n"</span>,++count);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">/* 2  构造file_operation结构体*/</span><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">file_ops</span>=</span><span class="hljs-class">&#123;</span>.owner = THIS_MODULE,.<span class="hljs-built_in">open</span>  = hello_open,&#125;; <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">file_ops2</span>=</span><span class="hljs-class">&#123;</span>.owner = THIS_MODULE,.<span class="hljs-built_in">open</span>  = hello2_open,&#125;;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hello_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">/*3 代替register_chrdev的方式 */</span><span class="hljs-comment">/* 创建次设备号为0 1的节点 */</span><span class="hljs-keyword">if</span> (major) &#123; devid = MKDEV(major, <span class="hljs-number">0</span>);register_chrdev_region(devid, MAX_HELLO, <span class="hljs-string">"hello"</span>);<span class="hljs-comment">/* major(0~1)对应file_ops，其他的都不对应file_ops */</span>&#125; <span class="hljs-keyword">else</span> &#123;alloc_chrdev_region(&amp;devid, <span class="hljs-number">0</span>, MAX_HELLO, <span class="hljs-string">"hello"</span>);<span class="hljs-comment">/* major(0~1)对应file_ops，其他的都不对应file_ops */</span>major = MAJOR(devid);&#125;cdev_init(&amp;cdev_hello,&amp;file_ops);cdev_add(&amp;cdev_hello,devid,MAX_HELLO);<span class="hljs-comment">/* 创建次设备号为2的节点 */</span>devid = MKDEV(major, <span class="hljs-number">2</span>); <span class="hljs-comment">// 从2开始</span>register_chrdev_region(devid, <span class="hljs-number">1</span>, <span class="hljs-string">"hello"</span>); <span class="hljs-comment">// 需要1个节点</span>cdev_init(&amp;cdev2_hello,&amp;file_ops2);cdev_add(&amp;cdev2_hello,devid,<span class="hljs-number">1</span>); <span class="hljs-comment">/*4 自动创建设备节点 */</span>cls = class_create(THIS_MODULE,<span class="hljs-string">"hello"</span>);class_device_create(cls,<span class="hljs-literal">NULL</span>,MKDEV(major,<span class="hljs-number">0</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-string">"hello0"</span>);<span class="hljs-comment">/*dev/hello0*/</span>class_device_create(cls,<span class="hljs-literal">NULL</span>,MKDEV(major,<span class="hljs-number">1</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-string">"hello1"</span>);<span class="hljs-comment">/*dev/hello1*/</span>class_device_create(cls,<span class="hljs-literal">NULL</span>,MKDEV(major,<span class="hljs-number">2</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-string">"hello2"</span>);<span class="hljs-comment">/*dev/hello2*/</span>class_device_create(cls,<span class="hljs-literal">NULL</span>,MKDEV(major,<span class="hljs-number">3</span>),<span class="hljs-literal">NULL</span>,<span class="hljs-string">"hello3"</span>);<span class="hljs-comment">/*dev/hello2*/</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hello_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><span class="hljs-function"></span>&#123;class_device_destroy(cls,MKDEV(major,<span class="hljs-number">0</span>));class_device_destroy(cls,MKDEV(major,<span class="hljs-number">1</span>));class_device_destroy(cls,MKDEV(major,<span class="hljs-number">2</span>));class_device_destroy(cls,MKDEV(major,<span class="hljs-number">3</span>));class_destroy(cls);cdev_del(&amp;cdev_hello);unregister_chrdev_region(MKDEV(major,<span class="hljs-number">0</span>),MAX_HELLO);cdev_del(&amp;cdev2_hello);unregister_chrdev_region(MKDEV(major,<span class="hljs-number">2</span>),<span class="hljs-number">1</span>);&#125;module_init(hello_init);module_exit(hello_exit);MODULE_LICENSE(<span class="hljs-string">"GPL"</span>);</code></pre><blockquote><p>以上是字符设备驱动的框架以及测试代码，仅仅是说明了字符设备驱动的一种新的注册方式，距离一个真正的字符设备驱动还有一定的距离<del>~</del></p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Linux驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组与指针的关系</title>
    <link href="/2019/04/03/%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <url>/2019/04/03/%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数组与指针的关系"><a href="#数组与指针的关系" class="headerlink" title="数组与指针的关系"></a>数组与指针的关系</h1><h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><blockquote><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4></blockquote><ul><li>一维数组 </li></ul><pre><code class="hljs c"><span class="hljs-keyword">int</span> <span class="hljs-built_in">array</span></code></pre><ul><li>二维数组 </li></ul><pre><code class="hljs c"><span class="hljs-keyword">int</span> array_2 [][<span class="hljs-number">10</span>]注：低维度的数据元素个数必须显式定义，高维度可以省略</code></pre><ul><li>指针数组（数组元素为指针的数组） </li></ul><pre><code class="hljs c"><span class="hljs-keyword">char</span> *p[]</code></pre><blockquote><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4></blockquote><ul><li>一级指针：</li></ul><pre><code class="hljs c">*p</code></pre><ul><li>二级指针：</li></ul><pre><code class="hljs c">**p</code></pre><ul><li>数组指针（指向数组的指针）：</li></ul><pre><code class="hljs c"><span class="hljs-keyword">int</span> (*p)[<span class="hljs-number">10</span>] <span class="hljs-comment">// 这里是指向二维数组的指针形式，10 必须显式说明</span></code></pre><h2 id="常见的问题与解答"><a href="#常见的问题与解答" class="headerlink" title="常见的问题与解答"></a>常见的问题与解答</h2><blockquote><p>问题1 ：数组名和指针的区别？</p></blockquote><p>答：</p><pre><code class="hljs c">数组名是数组的首地址，是一个常量，而不是变量指针是一种变量类型变量可以赋值给常量，常量不可以赋值给变量《c和指针》的说法为，表达式的左值必须是可修改的，也就是说数组名不可以是表达式的左值</code></pre><blockquote><p>问题2：如何把指针指向二维数组呢？</p></blockquote><p>答：</p><pre><code class="hljs c">有两种形式：    <span class="hljs-number">1</span> 使用数组指针，C语言中指向二维数组的指针的形式为：      <span class="hljs-keyword">int</span> (*p)[<span class="hljs-number">10</span>]（为什么这么写？解释在下面）    <span class="hljs-number">2</span> 由于二维数组的元素在内存中是按照先行后列的顺序顺序存储的，因此：      可以把数组的首地址“显式”的赋值给一个一级指针，形式如下：      <span class="hljs-keyword">int</span> *p = &amp;<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]      但是注意：<span class="hljs-keyword">int</span> *p = <span class="hljs-built_in">array</span>，这种形式在编译器中会报错</code></pre><blockquote><p>问题3：二级指针可以指向二维数组吗？</p></blockquote><p>答：</p><pre><code class="hljs c">是不可以的!编译器同样会报错。从这里可以看出，二维数组寻找数组的元素也许并不是对一位数组的首地址进行解引用操作，很可能是简单的进行行列的计算得出数据的位置（数据是顺序存储的），也就是为什么二维数组的列数必须是固定的。</code></pre><blockquote><p>问题4：什么类型的指针可以指向指针数组？</p></blockquote><p>答：</p><pre><code class="hljs c">顾名思义，指针数组里面的元素都是指针，也就是说对数组地址进行解引用操作之后并不能得到数据，而是一个指针，必须对这个指针再进行一次解引用操作，才能得到一个具体的数据。上面的定义是不是和二级指针的定义很类似呢?是的，C语言中可以用二级指针指向指针数组。</code></pre><blockquote><p>问题5：对指针数组和数组指针形式的解释？</p></blockquote><p>答：</p><pre><code class="hljs c">指针数组：<span class="hljs-keyword">char</span> *p[] :[]的优先级大于*,因此p先和[]结合，解释为一个数组，<span class="hljs-keyword">char</span> * 表面了数组里面元素的类型，为指向<span class="hljs-keyword">char</span>型的指针数组指针：常见的是指向二维数组或者更高维数组的指针指向二维数组的指针：<span class="hljs-keyword">char</span> (*p)[<span class="hljs-number">10</span>]:()的优先级大于[],因此* 和p先结合，解释为一个指针，<span class="hljs-keyword">char</span>修饰的是数组，包含了若干个元素的数组。也可以按照常规的数据定义方式：<span class="hljs-keyword">char</span>(*)[<span class="hljs-number">10</span>] p，<span class="hljs-keyword">char</span>(*)[<span class="hljs-number">10</span>]是数据类型，p是变量名，只是为了好看把P前移了而已。（注：实测后面这种形式在VS2017上编译并没有通过 --email:<span class="hljs-number">1059859967</span>@qq.com）</code></pre><blockquote><p>问题6: <code>char **argv</code> 与<code>char *argv[]</code>的区别</p></blockquote><p>答：</p><pre><code class="hljs c">相信你看完之后已经完全不用搜索帖子或者百度来解答这个问题了~~~</code></pre><hr><blockquote><p><font color=gray size=1>技术是在不断的讨论中进步的，如所述有不妥之处，希望能联系 <a href="mailto:1059859967@qq.com">1059859967@qq.com</a> 进行指正，万分感谢！ </font></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
